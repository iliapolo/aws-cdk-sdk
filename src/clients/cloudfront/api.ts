import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class CloudFrontClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public createCachePolicy(input: shapes.CloudFrontCreateCachePolicyRequest): CloudFrontCreateCachePolicy {
    return new CloudFrontCreateCachePolicy(this, 'CreateCachePolicy', this.__resources, input);
  }

  public createCloudFrontOriginAccessIdentity(input: shapes.CloudFrontCreateCloudFrontOriginAccessIdentityRequest): CloudFrontCreateCloudFrontOriginAccessIdentity {
    return new CloudFrontCreateCloudFrontOriginAccessIdentity(this, 'CreateCloudFrontOriginAccessIdentity', this.__resources, input);
  }

  public createDistribution(input: shapes.CloudFrontCreateDistributionRequest): CloudFrontCreateDistribution {
    return new CloudFrontCreateDistribution(this, 'CreateDistribution', this.__resources, input);
  }

  public createDistributionWithTags(input: shapes.CloudFrontCreateDistributionWithTagsRequest): CloudFrontCreateDistributionWithTags {
    return new CloudFrontCreateDistributionWithTags(this, 'CreateDistributionWithTags', this.__resources, input);
  }

  public createFieldLevelEncryptionConfig(input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest): CloudFrontCreateFieldLevelEncryptionConfig {
    return new CloudFrontCreateFieldLevelEncryptionConfig(this, 'CreateFieldLevelEncryptionConfig', this.__resources, input);
  }

  public createFieldLevelEncryptionProfile(input: shapes.CloudFrontCreateFieldLevelEncryptionProfileRequest): CloudFrontCreateFieldLevelEncryptionProfile {
    return new CloudFrontCreateFieldLevelEncryptionProfile(this, 'CreateFieldLevelEncryptionProfile', this.__resources, input);
  }

  public createInvalidation(input: shapes.CloudFrontCreateInvalidationRequest): CloudFrontCreateInvalidation {
    return new CloudFrontCreateInvalidation(this, 'CreateInvalidation', this.__resources, input);
  }

  public createKeyGroup(input: shapes.CloudFrontCreateKeyGroupRequest): CloudFrontCreateKeyGroup {
    return new CloudFrontCreateKeyGroup(this, 'CreateKeyGroup', this.__resources, input);
  }

  public createMonitoringSubscription(input: shapes.CloudFrontCreateMonitoringSubscriptionRequest): CloudFrontCreateMonitoringSubscription {
    return new CloudFrontCreateMonitoringSubscription(this, 'CreateMonitoringSubscription', this.__resources, input);
  }

  public createOriginRequestPolicy(input: shapes.CloudFrontCreateOriginRequestPolicyRequest): CloudFrontCreateOriginRequestPolicy {
    return new CloudFrontCreateOriginRequestPolicy(this, 'CreateOriginRequestPolicy', this.__resources, input);
  }

  public createPublicKey(input: shapes.CloudFrontCreatePublicKeyRequest): CloudFrontCreatePublicKey {
    return new CloudFrontCreatePublicKey(this, 'CreatePublicKey', this.__resources, input);
  }

  public createRealtimeLogConfig(input: shapes.CloudFrontCreateRealtimeLogConfigRequest): CloudFrontCreateRealtimeLogConfig {
    return new CloudFrontCreateRealtimeLogConfig(this, 'CreateRealtimeLogConfig', this.__resources, input);
  }

  public createStreamingDistribution(input: shapes.CloudFrontCreateStreamingDistributionRequest): CloudFrontCreateStreamingDistribution {
    return new CloudFrontCreateStreamingDistribution(this, 'CreateStreamingDistribution', this.__resources, input);
  }

  public createStreamingDistributionWithTags(input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest): CloudFrontCreateStreamingDistributionWithTags {
    return new CloudFrontCreateStreamingDistributionWithTags(this, 'CreateStreamingDistributionWithTags', this.__resources, input);
  }

  public deleteCachePolicy(input: shapes.CloudFrontDeleteCachePolicyRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteCachePolicy'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteCachePolicy', props);
  }

  public deleteCloudFrontOriginAccessIdentity(input: shapes.CloudFrontDeleteCloudFrontOriginAccessIdentityRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteCloudFrontOriginAccessIdentity'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteCloudFrontOriginAccessIdentity', props);
  }

  public deleteDistribution(input: shapes.CloudFrontDeleteDistributionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteDistribution'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDistribution', props);
  }

  public deleteFieldLevelEncryptionConfig(input: shapes.CloudFrontDeleteFieldLevelEncryptionConfigRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteFieldLevelEncryptionConfig'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteFieldLevelEncryptionConfig', props);
  }

  public deleteFieldLevelEncryptionProfile(input: shapes.CloudFrontDeleteFieldLevelEncryptionProfileRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteFieldLevelEncryptionProfile'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteFieldLevelEncryptionProfile', props);
  }

  public deleteKeyGroup(input: shapes.CloudFrontDeleteKeyGroupRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteKeyGroup'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteKeyGroup', props);
  }

  public deleteMonitoringSubscription(input: shapes.CloudFrontDeleteMonitoringSubscriptionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMonitoringSubscription',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteMonitoringSubscription'),
        parameters: {
          DistributionId: input.distributionId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteMonitoringSubscription', props);
  }

  public deleteOriginRequestPolicy(input: shapes.CloudFrontDeleteOriginRequestPolicyRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteOriginRequestPolicy'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteOriginRequestPolicy', props);
  }

  public deletePublicKey(input: shapes.CloudFrontDeletePublicKeyRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeletePublicKey'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeletePublicKey', props);
  }

  public deleteRealtimeLogConfig(input: shapes.CloudFrontDeleteRealtimeLogConfigRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteRealtimeLogConfig'),
        parameters: {
          Name: input.name,
          ARN: input.arn,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteRealtimeLogConfig', props);
  }

  public deleteStreamingDistribution(input: shapes.CloudFrontDeleteStreamingDistributionRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.DeleteStreamingDistribution'),
        parameters: {
          Id: input.id,
          IfMatch: input.ifMatch,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteStreamingDistribution', props);
  }

  public fetchCachePolicy(input: shapes.CloudFrontGetCachePolicyRequest): CloudFrontFetchCachePolicy {
    return new CloudFrontFetchCachePolicy(this, 'FetchCachePolicy', this.__resources, input);
  }

  public fetchCachePolicyConfig(input: shapes.CloudFrontGetCachePolicyConfigRequest): CloudFrontFetchCachePolicyConfig {
    return new CloudFrontFetchCachePolicyConfig(this, 'FetchCachePolicyConfig', this.__resources, input);
  }

  public fetchCloudFrontOriginAccessIdentity(input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityRequest): CloudFrontFetchCloudFrontOriginAccessIdentity {
    return new CloudFrontFetchCloudFrontOriginAccessIdentity(this, 'FetchCloudFrontOriginAccessIdentity', this.__resources, input);
  }

  public fetchCloudFrontOriginAccessIdentityConfig(input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityConfigRequest): CloudFrontFetchCloudFrontOriginAccessIdentityConfig {
    return new CloudFrontFetchCloudFrontOriginAccessIdentityConfig(this, 'FetchCloudFrontOriginAccessIdentityConfig', this.__resources, input);
  }

  public fetchDistribution(input: shapes.CloudFrontGetDistributionRequest): CloudFrontFetchDistribution {
    return new CloudFrontFetchDistribution(this, 'FetchDistribution', this.__resources, input);
  }

  public fetchDistributionConfig(input: shapes.CloudFrontGetDistributionConfigRequest): CloudFrontFetchDistributionConfig {
    return new CloudFrontFetchDistributionConfig(this, 'FetchDistributionConfig', this.__resources, input);
  }

  public fetchFieldLevelEncryption(input: shapes.CloudFrontGetFieldLevelEncryptionRequest): CloudFrontFetchFieldLevelEncryption {
    return new CloudFrontFetchFieldLevelEncryption(this, 'FetchFieldLevelEncryption', this.__resources, input);
  }

  public fetchFieldLevelEncryptionConfig(input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest): CloudFrontFetchFieldLevelEncryptionConfig {
    return new CloudFrontFetchFieldLevelEncryptionConfig(this, 'FetchFieldLevelEncryptionConfig', this.__resources, input);
  }

  public fetchFieldLevelEncryptionProfile(input: shapes.CloudFrontGetFieldLevelEncryptionProfileRequest): CloudFrontFetchFieldLevelEncryptionProfile {
    return new CloudFrontFetchFieldLevelEncryptionProfile(this, 'FetchFieldLevelEncryptionProfile', this.__resources, input);
  }

  public fetchFieldLevelEncryptionProfileConfig(input: shapes.CloudFrontGetFieldLevelEncryptionProfileConfigRequest): CloudFrontFetchFieldLevelEncryptionProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionProfileConfig(this, 'FetchFieldLevelEncryptionProfileConfig', this.__resources, input);
  }

  public fetchInvalidation(input: shapes.CloudFrontGetInvalidationRequest): CloudFrontFetchInvalidation {
    return new CloudFrontFetchInvalidation(this, 'FetchInvalidation', this.__resources, input);
  }

  public fetchKeyGroup(input: shapes.CloudFrontGetKeyGroupRequest): CloudFrontFetchKeyGroup {
    return new CloudFrontFetchKeyGroup(this, 'FetchKeyGroup', this.__resources, input);
  }

  public fetchKeyGroupConfig(input: shapes.CloudFrontGetKeyGroupConfigRequest): CloudFrontFetchKeyGroupConfig {
    return new CloudFrontFetchKeyGroupConfig(this, 'FetchKeyGroupConfig', this.__resources, input);
  }

  public fetchMonitoringSubscription(input: shapes.CloudFrontGetMonitoringSubscriptionRequest): CloudFrontFetchMonitoringSubscription {
    return new CloudFrontFetchMonitoringSubscription(this, 'FetchMonitoringSubscription', this.__resources, input);
  }

  public fetchOriginRequestPolicy(input: shapes.CloudFrontGetOriginRequestPolicyRequest): CloudFrontFetchOriginRequestPolicy {
    return new CloudFrontFetchOriginRequestPolicy(this, 'FetchOriginRequestPolicy', this.__resources, input);
  }

  public fetchOriginRequestPolicyConfig(input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest): CloudFrontFetchOriginRequestPolicyConfig {
    return new CloudFrontFetchOriginRequestPolicyConfig(this, 'FetchOriginRequestPolicyConfig', this.__resources, input);
  }

  public fetchPublicKey(input: shapes.CloudFrontGetPublicKeyRequest): CloudFrontFetchPublicKey {
    return new CloudFrontFetchPublicKey(this, 'FetchPublicKey', this.__resources, input);
  }

  public fetchPublicKeyConfig(input: shapes.CloudFrontGetPublicKeyConfigRequest): CloudFrontFetchPublicKeyConfig {
    return new CloudFrontFetchPublicKeyConfig(this, 'FetchPublicKeyConfig', this.__resources, input);
  }

  public fetchRealtimeLogConfig(input: shapes.CloudFrontGetRealtimeLogConfigRequest): CloudFrontFetchRealtimeLogConfig {
    return new CloudFrontFetchRealtimeLogConfig(this, 'FetchRealtimeLogConfig', this.__resources, input);
  }

  public fetchStreamingDistribution(input: shapes.CloudFrontGetStreamingDistributionRequest): CloudFrontFetchStreamingDistribution {
    return new CloudFrontFetchStreamingDistribution(this, 'FetchStreamingDistribution', this.__resources, input);
  }

  public fetchStreamingDistributionConfig(input: shapes.CloudFrontGetStreamingDistributionConfigRequest): CloudFrontFetchStreamingDistributionConfig {
    return new CloudFrontFetchStreamingDistributionConfig(this, 'FetchStreamingDistributionConfig', this.__resources, input);
  }

  public listCachePolicies(input: shapes.CloudFrontListCachePoliciesRequest): CloudFrontListCachePolicies {
    return new CloudFrontListCachePolicies(this, 'ListCachePolicies', this.__resources, input);
  }

  public listCloudFrontOriginAccessIdentities(input: shapes.CloudFrontListCloudFrontOriginAccessIdentitiesRequest): CloudFrontListCloudFrontOriginAccessIdentities {
    return new CloudFrontListCloudFrontOriginAccessIdentities(this, 'ListCloudFrontOriginAccessIdentities', this.__resources, input);
  }

  public listDistributions(input: shapes.CloudFrontListDistributionsRequest): CloudFrontListDistributions {
    return new CloudFrontListDistributions(this, 'ListDistributions', this.__resources, input);
  }

  public listDistributionsByCachePolicyId(input: shapes.CloudFrontListDistributionsByCachePolicyIdRequest): CloudFrontListDistributionsByCachePolicyId {
    return new CloudFrontListDistributionsByCachePolicyId(this, 'ListDistributionsByCachePolicyId', this.__resources, input);
  }

  public listDistributionsByKeyGroup(input: shapes.CloudFrontListDistributionsByKeyGroupRequest): CloudFrontListDistributionsByKeyGroup {
    return new CloudFrontListDistributionsByKeyGroup(this, 'ListDistributionsByKeyGroup', this.__resources, input);
  }

  public listDistributionsByOriginRequestPolicyId(input: shapes.CloudFrontListDistributionsByOriginRequestPolicyIdRequest): CloudFrontListDistributionsByOriginRequestPolicyId {
    return new CloudFrontListDistributionsByOriginRequestPolicyId(this, 'ListDistributionsByOriginRequestPolicyId', this.__resources, input);
  }

  public listDistributionsByRealtimeLogConfig(input: shapes.CloudFrontListDistributionsByRealtimeLogConfigRequest): CloudFrontListDistributionsByRealtimeLogConfig {
    return new CloudFrontListDistributionsByRealtimeLogConfig(this, 'ListDistributionsByRealtimeLogConfig', this.__resources, input);
  }

  public listDistributionsByWebAclId(input: shapes.CloudFrontListDistributionsByWebAclIdRequest): CloudFrontListDistributionsByWebAclId {
    return new CloudFrontListDistributionsByWebAclId(this, 'ListDistributionsByWebAclId', this.__resources, input);
  }

  public listFieldLevelEncryptionConfigs(input: shapes.CloudFrontListFieldLevelEncryptionConfigsRequest): CloudFrontListFieldLevelEncryptionConfigs {
    return new CloudFrontListFieldLevelEncryptionConfigs(this, 'ListFieldLevelEncryptionConfigs', this.__resources, input);
  }

  public listFieldLevelEncryptionProfiles(input: shapes.CloudFrontListFieldLevelEncryptionProfilesRequest): CloudFrontListFieldLevelEncryptionProfiles {
    return new CloudFrontListFieldLevelEncryptionProfiles(this, 'ListFieldLevelEncryptionProfiles', this.__resources, input);
  }

  public listInvalidations(input: shapes.CloudFrontListInvalidationsRequest): CloudFrontListInvalidations {
    return new CloudFrontListInvalidations(this, 'ListInvalidations', this.__resources, input);
  }

  public listKeyGroups(input: shapes.CloudFrontListKeyGroupsRequest): CloudFrontListKeyGroups {
    return new CloudFrontListKeyGroups(this, 'ListKeyGroups', this.__resources, input);
  }

  public listOriginRequestPolicies(input: shapes.CloudFrontListOriginRequestPoliciesRequest): CloudFrontListOriginRequestPolicies {
    return new CloudFrontListOriginRequestPolicies(this, 'ListOriginRequestPolicies', this.__resources, input);
  }

  public listPublicKeys(input: shapes.CloudFrontListPublicKeysRequest): CloudFrontListPublicKeys {
    return new CloudFrontListPublicKeys(this, 'ListPublicKeys', this.__resources, input);
  }

  public listRealtimeLogConfigs(input: shapes.CloudFrontListRealtimeLogConfigsRequest): CloudFrontListRealtimeLogConfigs {
    return new CloudFrontListRealtimeLogConfigs(this, 'ListRealtimeLogConfigs', this.__resources, input);
  }

  public listStreamingDistributions(input: shapes.CloudFrontListStreamingDistributionsRequest): CloudFrontListStreamingDistributions {
    return new CloudFrontListStreamingDistributions(this, 'ListStreamingDistributions', this.__resources, input);
  }

  public listTagsForResource(input: shapes.CloudFrontListTagsForResourceRequest): CloudFrontListTagsForResource {
    return new CloudFrontListTagsForResource(this, 'ListTagsForResource', this.__resources, input);
  }

  public tagResource(input: shapes.CloudFrontTagResourceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'tagResource',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.TagResource'),
        parameters: {
          Resource: input.resource,
          Tags: {
            Items: input.tags.items,
          },
        },
      },
    };
    new cr.AwsCustomResource(this, 'TagResource', props);
  }

  public untagResource(input: shapes.CloudFrontUntagResourceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'untagResource',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UntagResource'),
        parameters: {
          Resource: input.resource,
          TagKeys: {
            Items: input.tagKeys.items,
          },
        },
      },
    };
    new cr.AwsCustomResource(this, 'UntagResource', props);
  }

  public updateCachePolicy(input: shapes.CloudFrontUpdateCachePolicyRequest): CloudFrontUpdateCachePolicy {
    return new CloudFrontUpdateCachePolicy(this, 'UpdateCachePolicy', this.__resources, input);
  }

  public updateCloudFrontOriginAccessIdentity(input: shapes.CloudFrontUpdateCloudFrontOriginAccessIdentityRequest): CloudFrontUpdateCloudFrontOriginAccessIdentity {
    return new CloudFrontUpdateCloudFrontOriginAccessIdentity(this, 'UpdateCloudFrontOriginAccessIdentity', this.__resources, input);
  }

  public updateDistribution(input: shapes.CloudFrontUpdateDistributionRequest): CloudFrontUpdateDistribution {
    return new CloudFrontUpdateDistribution(this, 'UpdateDistribution', this.__resources, input);
  }

  public updateFieldLevelEncryptionConfig(input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest): CloudFrontUpdateFieldLevelEncryptionConfig {
    return new CloudFrontUpdateFieldLevelEncryptionConfig(this, 'UpdateFieldLevelEncryptionConfig', this.__resources, input);
  }

  public updateFieldLevelEncryptionProfile(input: shapes.CloudFrontUpdateFieldLevelEncryptionProfileRequest): CloudFrontUpdateFieldLevelEncryptionProfile {
    return new CloudFrontUpdateFieldLevelEncryptionProfile(this, 'UpdateFieldLevelEncryptionProfile', this.__resources, input);
  }

  public updateKeyGroup(input: shapes.CloudFrontUpdateKeyGroupRequest): CloudFrontUpdateKeyGroup {
    return new CloudFrontUpdateKeyGroup(this, 'UpdateKeyGroup', this.__resources, input);
  }

  public updateOriginRequestPolicy(input: shapes.CloudFrontUpdateOriginRequestPolicyRequest): CloudFrontUpdateOriginRequestPolicy {
    return new CloudFrontUpdateOriginRequestPolicy(this, 'UpdateOriginRequestPolicy', this.__resources, input);
  }

  public updatePublicKey(input: shapes.CloudFrontUpdatePublicKeyRequest): CloudFrontUpdatePublicKey {
    return new CloudFrontUpdatePublicKey(this, 'UpdatePublicKey', this.__resources, input);
  }

  public updateRealtimeLogConfig(input: shapes.CloudFrontUpdateRealtimeLogConfigRequest): CloudFrontUpdateRealtimeLogConfig {
    return new CloudFrontUpdateRealtimeLogConfig(this, 'UpdateRealtimeLogConfig', this.__resources, input);
  }

  public updateStreamingDistribution(input: shapes.CloudFrontUpdateStreamingDistributionRequest): CloudFrontUpdateStreamingDistribution {
    return new CloudFrontUpdateStreamingDistribution(this, 'UpdateStreamingDistribution', this.__resources, input);
  }

}

export class CloudFrontCreateCachePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get cachePolicy(): CloudFrontCreateCachePolicyCachePolicy {
    return new CloudFrontCreateCachePolicyCachePolicy(this, 'CachePolicy', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.Location'),
        outputPath: 'Location',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.ETag'),
        outputPath: 'ETag',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateCachePolicyCachePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.Id'),
        outputPath: 'CachePolicy.Id',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.Id', props);
    return resource.getResponseField('CachePolicy.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.LastModifiedTime'),
        outputPath: 'CachePolicy.LastModifiedTime',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.LastModifiedTime', props);
    return resource.getResponseField('CachePolicy.LastModifiedTime') as unknown as string;
  }

  public get cachePolicyConfig(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfig {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfig(this, 'CachePolicyConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.Comment'),
        outputPath: 'CachePolicy.CachePolicyConfig.Comment',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.Comment', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.Name'),
        outputPath: 'CachePolicy.CachePolicyConfig.Name',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.Name', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.Name') as unknown as string;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.DefaultTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.DefaultTTL',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.DefaultTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.MaxTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.MaxTTL',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.MaxTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.MaxTTL') as unknown as number;
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.MinTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.MinTTL',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.MinTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.MinTTL') as unknown as number;
  }

  public get parametersInCacheKeyAndForwardedToOrigin(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(this, 'ParametersInCacheKeyAndForwardedToOrigin', this.__resources, this.input);
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get enableAcceptEncodingGzip(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip') as unknown as boolean;
  }

  public get enableAcceptEncodingBrotli(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli') as unknown as boolean;
  }

  public get headersConfig(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings {
    return new CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontCreateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontCreateCloudFrontOriginAccessIdentity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get cloudFrontOriginAccessIdentity(): CloudFrontCreateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity {
    return new CloudFrontCreateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity(this, 'CloudFrontOriginAccessIdentity', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCloudFrontOriginAccessIdentity.Location'),
        outputPath: 'Location',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCloudFrontOriginAccessIdentity.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCloudFrontOriginAccessIdentity.ETag'),
        outputPath: 'ETag',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCloudFrontOriginAccessIdentity.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.Id'),
        outputPath: 'CloudFrontOriginAccessIdentity.Id',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.Id', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.Id') as unknown as string;
  }

  public get s3CanonicalUserId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.S3CanonicalUserId'),
        outputPath: 'CloudFrontOriginAccessIdentity.S3CanonicalUserId',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.S3CanonicalUserId', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.S3CanonicalUserId') as unknown as string;
  }

  public get cloudFrontOriginAccessIdentityConfig(): CloudFrontCreateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig {
    return new CloudFrontCreateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig(this, 'CloudFrontOriginAccessIdentityConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference'),
        outputPath: 'CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment'),
        outputPath: 'CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment') as unknown as string;
  }

}

export class CloudFrontCreateDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get distribution(): CloudFrontCreateDistributionDistribution {
    return new CloudFrontCreateDistributionDistribution(this, 'Distribution', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Location'),
        outputPath: 'Location',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.ETag'),
        outputPath: 'ETag',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateDistributionDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.Id'),
        outputPath: 'Distribution.Id',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.Id', props);
    return resource.getResponseField('Distribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ARN'),
        outputPath: 'Distribution.ARN',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ARN', props);
    return resource.getResponseField('Distribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.Status'),
        outputPath: 'Distribution.Status',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.Status', props);
    return resource.getResponseField('Distribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.LastModifiedTime'),
        outputPath: 'Distribution.LastModifiedTime',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.LastModifiedTime', props);
    return resource.getResponseField('Distribution.LastModifiedTime') as unknown as string;
  }

  public get inProgressInvalidationBatches(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.InProgressInvalidationBatches'),
        outputPath: 'Distribution.InProgressInvalidationBatches',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.InProgressInvalidationBatches', props);
    return resource.getResponseField('Distribution.InProgressInvalidationBatches') as unknown as number;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DomainName'),
        outputPath: 'Distribution.DomainName',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DomainName', props);
    return resource.getResponseField('Distribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontCreateDistributionDistributionActiveTrustedSigners {
    return new CloudFrontCreateDistributionDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get activeTrustedKeyGroups(): CloudFrontCreateDistributionDistributionActiveTrustedKeyGroups {
    return new CloudFrontCreateDistributionDistributionActiveTrustedKeyGroups(this, 'ActiveTrustedKeyGroups', this.__resources, this.input);
  }

  public get distributionConfig(): CloudFrontCreateDistributionDistributionDistributionConfig {
    return new CloudFrontCreateDistributionDistributionDistributionConfig(this, 'DistributionConfig', this.__resources, this.input);
  }

  public get aliasIcpRecordals(): shapes.CloudFrontAliasIcpRecordal[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.AliasICPRecordals'),
        outputPath: 'Distribution.AliasICPRecordals',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.AliasICPRecordals', props);
    return resource.getResponseField('Distribution.AliasICPRecordals') as unknown as shapes.CloudFrontAliasIcpRecordal[];
  }

}

export class CloudFrontCreateDistributionDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'Distribution.ActiveTrustedSigners.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'Distribution.ActiveTrustedSigners.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ActiveTrustedSigners.Items'),
        outputPath: 'Distribution.ActiveTrustedSigners.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontCreateDistributionDistributionActiveTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ActiveTrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ActiveTrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ActiveTrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ActiveTrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontKgKeyPairIds[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.ActiveTrustedKeyGroups.Items'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.ActiveTrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Items') as unknown as shapes.CloudFrontKgKeyPairIds[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.CallerReference'),
        outputPath: 'Distribution.DistributionConfig.CallerReference',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.CallerReference', props);
    return resource.getResponseField('Distribution.DistributionConfig.CallerReference') as unknown as string;
  }

  public get aliases(): CloudFrontCreateDistributionDistributionDistributionConfigAliases {
    return new CloudFrontCreateDistributionDistributionDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get defaultRootObject(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultRootObject'),
        outputPath: 'Distribution.DistributionConfig.DefaultRootObject',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultRootObject', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultRootObject') as unknown as string;
  }

  public get origins(): CloudFrontCreateDistributionDistributionDistributionConfigOrigins {
    return new CloudFrontCreateDistributionDistributionDistributionConfigOrigins(this, 'Origins', this.__resources, this.input);
  }

  public get originGroups(): CloudFrontCreateDistributionDistributionDistributionConfigOriginGroups {
    return new CloudFrontCreateDistributionDistributionDistributionConfigOriginGroups(this, 'OriginGroups', this.__resources, this.input);
  }

  public get defaultCacheBehavior(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehavior {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehavior(this, 'DefaultCacheBehavior', this.__resources, this.input);
  }

  public get cacheBehaviors(): CloudFrontCreateDistributionDistributionDistributionConfigCacheBehaviors {
    return new CloudFrontCreateDistributionDistributionDistributionConfigCacheBehaviors(this, 'CacheBehaviors', this.__resources, this.input);
  }

  public get customErrorResponses(): CloudFrontCreateDistributionDistributionDistributionConfigCustomErrorResponses {
    return new CloudFrontCreateDistributionDistributionDistributionConfigCustomErrorResponses(this, 'CustomErrorResponses', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Comment'),
        outputPath: 'Distribution.DistributionConfig.Comment',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Comment', props);
    return resource.getResponseField('Distribution.DistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontCreateDistributionDistributionDistributionConfigLogging {
    return new CloudFrontCreateDistributionDistributionDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.PriceClass'),
        outputPath: 'Distribution.DistributionConfig.PriceClass',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.PriceClass', props);
    return resource.getResponseField('Distribution.DistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Enabled') as unknown as boolean;
  }

  public get viewerCertificate(): CloudFrontCreateDistributionDistributionDistributionConfigViewerCertificate {
    return new CloudFrontCreateDistributionDistributionDistributionConfigViewerCertificate(this, 'ViewerCertificate', this.__resources, this.input);
  }

  public get restrictions(): CloudFrontCreateDistributionDistributionDistributionConfigRestrictions {
    return new CloudFrontCreateDistributionDistributionDistributionConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get webAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.WebACLId'),
        outputPath: 'Distribution.DistributionConfig.WebACLId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.WebACLId', props);
    return resource.getResponseField('Distribution.DistributionConfig.WebACLId') as unknown as string;
  }

  public get httpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.HttpVersion'),
        outputPath: 'Distribution.DistributionConfig.HttpVersion',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.HttpVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.HttpVersion') as unknown as string;
  }

  public get isIpv6Enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.IsIPV6Enabled'),
        outputPath: 'Distribution.DistributionConfig.IsIPV6Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.IsIPV6Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.IsIPV6Enabled') as unknown as boolean;
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Aliases.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Aliases.Items'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Aliases.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigOrigins extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Origins.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Origins.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Origins.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOrigin[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Origins.Items'),
        outputPath: 'Distribution.DistributionConfig.Origins.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Origins.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Items') as unknown as shapes.CloudFrontOrigin[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigOriginGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.OriginGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.OriginGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOriginGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.OriginGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.OriginGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Items') as unknown as shapes.CloudFrontOriginGroup[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehavior extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get targetOriginId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId') as unknown as string;
  }

  public get trustedSigners(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get trustedKeyGroups(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(this, 'TrustedKeyGroups', this.__resources, this.input);
  }

  public get viewerProtocolPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy') as unknown as string;
  }

  public get allowedMethods(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods(this, 'AllowedMethods', this.__resources, this.input);
  }

  public get smoothStreaming(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming') as unknown as boolean;
  }

  public get compress(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.Compress'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.Compress',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.Compress', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.Compress') as unknown as boolean;
  }

  public get lambdaFunctionAssociations(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(this, 'LambdaFunctionAssociations', this.__resources, this.input);
  }

  public get fieldLevelEncryptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId') as unknown as string;
  }

  public get realtimeLogConfigArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn') as unknown as string;
  }

  public get cachePolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId') as unknown as string;
  }

  public get originRequestPolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId') as unknown as string;
  }

  public get forwardedValues(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues(this, 'ForwardedValues', this.__resources, this.input);
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL') as unknown as number;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL') as unknown as number;
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items') as unknown as string[];
  }

  public get cachedMethods(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(this, 'CachedMethods', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontLambdaFunctionAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items') as unknown as shapes.CloudFrontLambdaFunctionAssociation[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get queryString(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString') as unknown as boolean;
  }

  public get cookies(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(this, 'Cookies', this.__resources, this.input);
  }

  public get headers(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(this, 'Headers', this.__resources, this.input);
  }

  public get queryStringCacheKeys(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(this, 'QueryStringCacheKeys', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get forward(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward') as unknown as string;
  }

  public get whitelistedNames(): CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames {
    return new CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(this, 'WhitelistedNames', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigCacheBehaviors extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.CacheBehaviors.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.CacheBehaviors.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCacheBehavior[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.CacheBehaviors.Items'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.CacheBehaviors.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Items') as unknown as shapes.CloudFrontCacheBehavior[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigCustomErrorResponses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCustomErrorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Items'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Items') as unknown as shapes.CloudFrontCustomErrorResponse[];
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Logging.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Logging.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get includeCookies(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Logging.IncludeCookies'),
        outputPath: 'Distribution.DistributionConfig.Logging.IncludeCookies',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Logging.IncludeCookies', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.IncludeCookies') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Logging.Bucket'),
        outputPath: 'Distribution.DistributionConfig.Logging.Bucket',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Logging.Prefix'),
        outputPath: 'Distribution.DistributionConfig.Logging.Prefix',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigViewerCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get cloudFrontDefaultCertificate(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate') as unknown as boolean;
  }

  public get iamCertificateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId') as unknown as string;
  }

  public get acmCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn') as unknown as string;
  }

  public get sslSupportMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod') as unknown as string;
  }

  public get minimumProtocolVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion') as unknown as string;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.Certificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.Certificate',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.Certificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.Certificate') as unknown as string;
  }

  public get certificateSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.CertificateSource'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CertificateSource',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.ViewerCertificate.CertificateSource', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CertificateSource') as unknown as string;
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get geoRestriction(): CloudFrontCreateDistributionDistributionDistributionConfigRestrictionsGeoRestriction {
    return new CloudFrontCreateDistributionDistributionDistributionConfigRestrictionsGeoRestriction(this, 'GeoRestriction', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionDistributionDistributionConfigRestrictionsGeoRestriction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionRequest) {
    super(scope, id);
  }

  public get restrictionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType') as unknown as string;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTags extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get distribution(): CloudFrontCreateDistributionWithTagsDistribution {
    return new CloudFrontCreateDistributionWithTagsDistribution(this, 'Distribution', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Location'),
        outputPath: 'Location',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.ETag'),
        outputPath: 'ETag',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateDistributionWithTagsDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.Id'),
        outputPath: 'Distribution.Id',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.Id', props);
    return resource.getResponseField('Distribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ARN'),
        outputPath: 'Distribution.ARN',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ARN', props);
    return resource.getResponseField('Distribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.Status'),
        outputPath: 'Distribution.Status',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.Status', props);
    return resource.getResponseField('Distribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.LastModifiedTime'),
        outputPath: 'Distribution.LastModifiedTime',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.LastModifiedTime', props);
    return resource.getResponseField('Distribution.LastModifiedTime') as unknown as string;
  }

  public get inProgressInvalidationBatches(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.InProgressInvalidationBatches'),
        outputPath: 'Distribution.InProgressInvalidationBatches',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.InProgressInvalidationBatches', props);
    return resource.getResponseField('Distribution.InProgressInvalidationBatches') as unknown as number;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DomainName'),
        outputPath: 'Distribution.DomainName',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DomainName', props);
    return resource.getResponseField('Distribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontCreateDistributionWithTagsDistributionActiveTrustedSigners {
    return new CloudFrontCreateDistributionWithTagsDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get activeTrustedKeyGroups(): CloudFrontCreateDistributionWithTagsDistributionActiveTrustedKeyGroups {
    return new CloudFrontCreateDistributionWithTagsDistributionActiveTrustedKeyGroups(this, 'ActiveTrustedKeyGroups', this.__resources, this.input);
  }

  public get distributionConfig(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfig {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfig(this, 'DistributionConfig', this.__resources, this.input);
  }

  public get aliasIcpRecordals(): shapes.CloudFrontAliasIcpRecordal[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.AliasICPRecordals'),
        outputPath: 'Distribution.AliasICPRecordals',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.AliasICPRecordals', props);
    return resource.getResponseField('Distribution.AliasICPRecordals') as unknown as shapes.CloudFrontAliasIcpRecordal[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'Distribution.ActiveTrustedSigners.Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'Distribution.ActiveTrustedSigners.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ActiveTrustedSigners.Items'),
        outputPath: 'Distribution.ActiveTrustedSigners.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionActiveTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ActiveTrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ActiveTrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ActiveTrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ActiveTrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontKgKeyPairIds[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.ActiveTrustedKeyGroups.Items'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.ActiveTrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Items') as unknown as shapes.CloudFrontKgKeyPairIds[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.CallerReference'),
        outputPath: 'Distribution.DistributionConfig.CallerReference',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.CallerReference', props);
    return resource.getResponseField('Distribution.DistributionConfig.CallerReference') as unknown as string;
  }

  public get aliases(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigAliases {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get defaultRootObject(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultRootObject'),
        outputPath: 'Distribution.DistributionConfig.DefaultRootObject',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultRootObject', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultRootObject') as unknown as string;
  }

  public get origins(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigOrigins {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigOrigins(this, 'Origins', this.__resources, this.input);
  }

  public get originGroups(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigOriginGroups {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigOriginGroups(this, 'OriginGroups', this.__resources, this.input);
  }

  public get defaultCacheBehavior(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehavior {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehavior(this, 'DefaultCacheBehavior', this.__resources, this.input);
  }

  public get cacheBehaviors(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigCacheBehaviors {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigCacheBehaviors(this, 'CacheBehaviors', this.__resources, this.input);
  }

  public get customErrorResponses(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigCustomErrorResponses {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigCustomErrorResponses(this, 'CustomErrorResponses', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Comment'),
        outputPath: 'Distribution.DistributionConfig.Comment',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Comment', props);
    return resource.getResponseField('Distribution.DistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigLogging {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.PriceClass'),
        outputPath: 'Distribution.DistributionConfig.PriceClass',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.PriceClass', props);
    return resource.getResponseField('Distribution.DistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Enabled') as unknown as boolean;
  }

  public get viewerCertificate(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigViewerCertificate {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigViewerCertificate(this, 'ViewerCertificate', this.__resources, this.input);
  }

  public get restrictions(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigRestrictions {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get webAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.WebACLId'),
        outputPath: 'Distribution.DistributionConfig.WebACLId',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.WebACLId', props);
    return resource.getResponseField('Distribution.DistributionConfig.WebACLId') as unknown as string;
  }

  public get httpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.HttpVersion'),
        outputPath: 'Distribution.DistributionConfig.HttpVersion',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.HttpVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.HttpVersion') as unknown as string;
  }

  public get isIpv6Enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.IsIPV6Enabled'),
        outputPath: 'Distribution.DistributionConfig.IsIPV6Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.IsIPV6Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.IsIPV6Enabled') as unknown as boolean;
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Aliases.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Aliases.Items'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Aliases.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigOrigins extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Origins.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Origins.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Origins.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOrigin[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Origins.Items'),
        outputPath: 'Distribution.DistributionConfig.Origins.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Origins.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Items') as unknown as shapes.CloudFrontOrigin[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigOriginGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.OriginGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.OriginGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOriginGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.OriginGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.OriginGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Items') as unknown as shapes.CloudFrontOriginGroup[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehavior extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get targetOriginId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId') as unknown as string;
  }

  public get trustedSigners(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get trustedKeyGroups(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(this, 'TrustedKeyGroups', this.__resources, this.input);
  }

  public get viewerProtocolPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy') as unknown as string;
  }

  public get allowedMethods(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods(this, 'AllowedMethods', this.__resources, this.input);
  }

  public get smoothStreaming(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming') as unknown as boolean;
  }

  public get compress(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.Compress'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.Compress',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.Compress', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.Compress') as unknown as boolean;
  }

  public get lambdaFunctionAssociations(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(this, 'LambdaFunctionAssociations', this.__resources, this.input);
  }

  public get fieldLevelEncryptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId') as unknown as string;
  }

  public get realtimeLogConfigArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn') as unknown as string;
  }

  public get cachePolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId') as unknown as string;
  }

  public get originRequestPolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId') as unknown as string;
  }

  public get forwardedValues(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValues {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValues(this, 'ForwardedValues', this.__resources, this.input);
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL') as unknown as number;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL') as unknown as number;
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items') as unknown as string[];
  }

  public get cachedMethods(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(this, 'CachedMethods', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontLambdaFunctionAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items') as unknown as shapes.CloudFrontLambdaFunctionAssociation[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get queryString(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString') as unknown as boolean;
  }

  public get cookies(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(this, 'Cookies', this.__resources, this.input);
  }

  public get headers(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(this, 'Headers', this.__resources, this.input);
  }

  public get queryStringCacheKeys(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(this, 'QueryStringCacheKeys', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get forward(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward') as unknown as string;
  }

  public get whitelistedNames(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(this, 'WhitelistedNames', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items') as unknown as string[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigCacheBehaviors extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.CacheBehaviors.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.CacheBehaviors.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCacheBehavior[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.CacheBehaviors.Items'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.CacheBehaviors.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Items') as unknown as shapes.CloudFrontCacheBehavior[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigCustomErrorResponses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.CustomErrorResponses.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.CustomErrorResponses.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCustomErrorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.CustomErrorResponses.Items'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.CustomErrorResponses.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Items') as unknown as shapes.CloudFrontCustomErrorResponse[];
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Logging.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Logging.Enabled',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get includeCookies(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Logging.IncludeCookies'),
        outputPath: 'Distribution.DistributionConfig.Logging.IncludeCookies',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Logging.IncludeCookies', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.IncludeCookies') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Logging.Bucket'),
        outputPath: 'Distribution.DistributionConfig.Logging.Bucket',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Logging.Prefix'),
        outputPath: 'Distribution.DistributionConfig.Logging.Prefix',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigViewerCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get cloudFrontDefaultCertificate(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate') as unknown as boolean;
  }

  public get iamCertificateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId') as unknown as string;
  }

  public get acmCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn') as unknown as string;
  }

  public get sslSupportMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod') as unknown as string;
  }

  public get minimumProtocolVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion') as unknown as string;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.Certificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.Certificate',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.Certificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.Certificate') as unknown as string;
  }

  public get certificateSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.CertificateSource'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CertificateSource',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.ViewerCertificate.CertificateSource', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CertificateSource') as unknown as string;
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get geoRestriction(): CloudFrontCreateDistributionWithTagsDistributionDistributionConfigRestrictionsGeoRestriction {
    return new CloudFrontCreateDistributionWithTagsDistributionDistributionConfigRestrictionsGeoRestriction(this, 'GeoRestriction', this.__resources, this.input);
  }

}

export class CloudFrontCreateDistributionWithTagsDistributionDistributionConfigRestrictionsGeoRestriction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get restrictionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType') as unknown as string;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateDistributionWithTags.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Items',
        parameters: {
          DistributionConfigWithTags: {
            DistributionConfig: {
              CallerReference: this.input.distributionConfigWithTags.distributionConfig.callerReference,
              Aliases: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.aliases?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.aliases?.items,
              },
              DefaultRootObject: this.input.distributionConfigWithTags.distributionConfig.defaultRootObject,
              Origins: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.origins.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.origins.items,
              },
              OriginGroups: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.originGroups?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.originGroups?.items,
              },
              DefaultCacheBehavior: {
                TargetOriginId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.targetOriginId,
                TrustedSigners: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
                },
                TrustedKeyGroups: {
                  Enabled: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
                },
                ViewerProtocolPolicy: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
                AllowedMethods: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                  CachedMethods: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                  },
                },
                SmoothStreaming: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.smoothStreaming,
                Compress: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.compress,
                LambdaFunctionAssociations: {
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
                },
                FieldLevelEncryptionId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
                RealtimeLogConfigArn: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
                CachePolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.cachePolicyId,
                OriginRequestPolicyId: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
                ForwardedValues: {
                  QueryString: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                  Cookies: {
                    Forward: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                    WhitelistedNames: {
                      Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                      Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                    },
                  },
                  Headers: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                  },
                  QueryStringCacheKeys: {
                    Quantity: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                    Items: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                  },
                },
                MinTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.minTtl,
                DefaultTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.defaultTtl,
                MaxTTL: this.input.distributionConfigWithTags.distributionConfig.defaultCacheBehavior.maxTtl,
              },
              CacheBehaviors: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.cacheBehaviors?.items,
              },
              CustomErrorResponses: {
                Quantity: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.quantity,
                Items: this.input.distributionConfigWithTags.distributionConfig.customErrorResponses?.items,
              },
              Comment: this.input.distributionConfigWithTags.distributionConfig.comment,
              Logging: {
                Enabled: this.input.distributionConfigWithTags.distributionConfig.logging?.enabled,
                IncludeCookies: this.input.distributionConfigWithTags.distributionConfig.logging?.includeCookies,
                Bucket: this.input.distributionConfigWithTags.distributionConfig.logging?.bucket,
                Prefix: this.input.distributionConfigWithTags.distributionConfig.logging?.prefix,
              },
              PriceClass: this.input.distributionConfigWithTags.distributionConfig.priceClass,
              Enabled: this.input.distributionConfigWithTags.distributionConfig.enabled,
              ViewerCertificate: {
                CloudFrontDefaultCertificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
                IAMCertificateId: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.iamCertificateId,
                ACMCertificateArn: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.acmCertificateArn,
                SSLSupportMethod: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.sslSupportMethod,
                MinimumProtocolVersion: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.minimumProtocolVersion,
                Certificate: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificate,
                CertificateSource: this.input.distributionConfigWithTags.distributionConfig.viewerCertificate?.certificateSource,
              },
              Restrictions: {
                GeoRestriction: {
                  RestrictionType: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.restrictionType,
                  Quantity: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.quantity,
                  Items: this.input.distributionConfigWithTags.distributionConfig.restrictions?.geoRestriction.items,
                },
              },
              WebACLId: this.input.distributionConfigWithTags.distributionConfig.webAclId,
              HttpVersion: this.input.distributionConfigWithTags.distributionConfig.httpVersion,
              IsIPV6Enabled: this.input.distributionConfigWithTags.distributionConfig.isIpv6Enabled,
            },
            Tags: {
              Items: this.input.distributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDistributionWithTags.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Items') as unknown as string[];
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryption(): CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryption {
    return new CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryption(this, 'FieldLevelEncryption', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.Location'),
        outputPath: 'Location',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.Id'),
        outputPath: 'FieldLevelEncryption.Id',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.Id', props);
    return resource.getResponseField('FieldLevelEncryption.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.LastModifiedTime'),
        outputPath: 'FieldLevelEncryption.LastModifiedTime',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.LastModifiedTime', props);
    return resource.getResponseField('FieldLevelEncryption.LastModifiedTime') as unknown as string;
  }

  public get fieldLevelEncryptionConfig(): CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfig {
    return new CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfig(this, 'FieldLevelEncryptionConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.Comment'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.Comment',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.Comment') as unknown as string;
  }

  public get queryArgProfileConfig(): CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig {
    return new CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig(this, 'QueryArgProfileConfig', this.__resources, this.input);
  }

  public get contentTypeProfileConfig(): CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig {
    return new CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig(this, 'ContentTypeProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get forwardWhenQueryArgProfileIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown') as unknown as boolean;
  }

  public get queryArgProfiles(): CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles {
    return new CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles(this, 'QueryArgProfiles', this.__resources, this.input);
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontQueryArgProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items') as unknown as shapes.CloudFrontQueryArgProfile[];
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get forwardWhenContentTypeIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown') as unknown as boolean;
  }

  public get contentTypeProfiles(): CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles {
    return new CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles(this, 'ContentTypeProfiles', this.__resources, this.input);
  }

}

export class CloudFrontCreateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontContentTypeProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items') as unknown as shapes.CloudFrontContentTypeProfile[];
  }

}

export class CloudFrontCreateFieldLevelEncryptionProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionProfile(): CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfile {
    return new CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfile(this, 'FieldLevelEncryptionProfile', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.Location'),
        outputPath: 'Location',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.ETag'),
        outputPath: 'ETag',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.Id'),
        outputPath: 'FieldLevelEncryptionProfile.Id',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.Id', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.LastModifiedTime'),
        outputPath: 'FieldLevelEncryptionProfile.LastModifiedTime',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.LastModifiedTime', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.LastModifiedTime') as unknown as string;
  }

  public get fieldLevelEncryptionProfileConfig(): CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig {
    return new CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig(this, 'FieldLevelEncryptionProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name') as unknown as string;
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment') as unknown as string;
  }

  public get encryptionEntities(): CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities {
    return new CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities(this, 'EncryptionEntities', this.__resources, this.input);
  }

}

export class CloudFrontCreateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontEncryptionEntity[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items') as unknown as shapes.CloudFrontEncryptionEntity[];
  }

}

export class CloudFrontCreateInvalidation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateInvalidationRequest) {
    super(scope, id);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Location'),
        outputPath: 'Location',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get invalidation(): CloudFrontCreateInvalidationInvalidation {
    return new CloudFrontCreateInvalidationInvalidation(this, 'Invalidation', this.__resources, this.input);
  }

}

export class CloudFrontCreateInvalidationInvalidation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateInvalidationRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Invalidation.Id'),
        outputPath: 'Invalidation.Id',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Invalidation.Id', props);
    return resource.getResponseField('Invalidation.Id') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Invalidation.Status'),
        outputPath: 'Invalidation.Status',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Invalidation.Status', props);
    return resource.getResponseField('Invalidation.Status') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Invalidation.CreateTime'),
        outputPath: 'Invalidation.CreateTime',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Invalidation.CreateTime', props);
    return resource.getResponseField('Invalidation.CreateTime') as unknown as string;
  }

  public get invalidationBatch(): CloudFrontCreateInvalidationInvalidationInvalidationBatch {
    return new CloudFrontCreateInvalidationInvalidationInvalidationBatch(this, 'InvalidationBatch', this.__resources, this.input);
  }

}

export class CloudFrontCreateInvalidationInvalidationInvalidationBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateInvalidationRequest) {
    super(scope, id);
  }

  public get paths(): CloudFrontCreateInvalidationInvalidationInvalidationBatchPaths {
    return new CloudFrontCreateInvalidationInvalidationInvalidationBatchPaths(this, 'Paths', this.__resources, this.input);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Invalidation.InvalidationBatch.CallerReference'),
        outputPath: 'Invalidation.InvalidationBatch.CallerReference',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Invalidation.InvalidationBatch.CallerReference', props);
    return resource.getResponseField('Invalidation.InvalidationBatch.CallerReference') as unknown as string;
  }

}

export class CloudFrontCreateInvalidationInvalidationInvalidationBatchPaths extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateInvalidationRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Invalidation.InvalidationBatch.Paths.Quantity'),
        outputPath: 'Invalidation.InvalidationBatch.Paths.Quantity',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Invalidation.InvalidationBatch.Paths.Quantity', props);
    return resource.getResponseField('Invalidation.InvalidationBatch.Paths.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateInvalidation.Invalidation.InvalidationBatch.Paths.Items'),
        outputPath: 'Invalidation.InvalidationBatch.Paths.Items',
        parameters: {
          DistributionId: this.input.distributionId,
          InvalidationBatch: {
            Paths: {
              Quantity: this.input.invalidationBatch.paths.quantity,
              Items: this.input.invalidationBatch.paths.items,
            },
            CallerReference: this.input.invalidationBatch.callerReference,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateInvalidation.Invalidation.InvalidationBatch.Paths.Items', props);
    return resource.getResponseField('Invalidation.InvalidationBatch.Paths.Items') as unknown as string[];
  }

}

export class CloudFrontCreateKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateKeyGroupRequest) {
    super(scope, id);
  }

  public get keyGroup(): CloudFrontCreateKeyGroupKeyGroup {
    return new CloudFrontCreateKeyGroupKeyGroup(this, 'KeyGroup', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.Location'),
        outputPath: 'Location',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.ETag'),
        outputPath: 'ETag',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateKeyGroupKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateKeyGroupRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.KeyGroup.Id'),
        outputPath: 'KeyGroup.Id',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.KeyGroup.Id', props);
    return resource.getResponseField('KeyGroup.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.KeyGroup.LastModifiedTime'),
        outputPath: 'KeyGroup.LastModifiedTime',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.KeyGroup.LastModifiedTime', props);
    return resource.getResponseField('KeyGroup.LastModifiedTime') as unknown as string;
  }

  public get keyGroupConfig(): CloudFrontCreateKeyGroupKeyGroupKeyGroupConfig {
    return new CloudFrontCreateKeyGroupKeyGroupKeyGroupConfig(this, 'KeyGroupConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateKeyGroupKeyGroupKeyGroupConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateKeyGroupRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.KeyGroup.KeyGroupConfig.Name'),
        outputPath: 'KeyGroup.KeyGroupConfig.Name',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.KeyGroup.KeyGroupConfig.Name', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Name') as unknown as string;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.KeyGroup.KeyGroupConfig.Items'),
        outputPath: 'KeyGroup.KeyGroupConfig.Items',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.KeyGroup.KeyGroupConfig.Items', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Items') as unknown as string[];
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateKeyGroup.KeyGroup.KeyGroupConfig.Comment'),
        outputPath: 'KeyGroup.KeyGroupConfig.Comment',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateKeyGroup.KeyGroup.KeyGroupConfig.Comment', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Comment') as unknown as string;
  }

}

export class CloudFrontCreateMonitoringSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateMonitoringSubscriptionRequest) {
    super(scope, id);
  }

  public get monitoringSubscription(): CloudFrontCreateMonitoringSubscriptionMonitoringSubscription {
    return new CloudFrontCreateMonitoringSubscriptionMonitoringSubscription(this, 'MonitoringSubscription', this.__resources, this.input);
  }

}

export class CloudFrontCreateMonitoringSubscriptionMonitoringSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateMonitoringSubscriptionRequest) {
    super(scope, id);
  }

  public get realtimeMetricsSubscriptionConfig(): CloudFrontCreateMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig {
    return new CloudFrontCreateMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig(this, 'RealtimeMetricsSubscriptionConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateMonitoringSubscriptionRequest) {
    super(scope, id);
  }

  public get realtimeMetricsSubscriptionStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMonitoringSubscription',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateMonitoringSubscription.MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus'),
        outputPath: 'MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus',
        parameters: {
          DistributionId: this.input.distributionId,
          MonitoringSubscription: {
            RealtimeMetricsSubscriptionConfig: {
              RealtimeMetricsSubscriptionStatus: this.input.monitoringSubscription.realtimeMetricsSubscriptionConfig?.realtimeMetricsSubscriptionStatus,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateMonitoringSubscription.MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus', props);
    return resource.getResponseField('MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus') as unknown as string;
  }

}

export class CloudFrontCreateOriginRequestPolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get originRequestPolicy(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicy {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicy(this, 'OriginRequestPolicy', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.Location'),
        outputPath: 'Location',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.ETag'),
        outputPath: 'ETag',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.Id'),
        outputPath: 'OriginRequestPolicy.Id',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.Id', props);
    return resource.getResponseField('OriginRequestPolicy.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.LastModifiedTime'),
        outputPath: 'OriginRequestPolicy.LastModifiedTime',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.LastModifiedTime', props);
    return resource.getResponseField('OriginRequestPolicy.LastModifiedTime') as unknown as string;
  }

  public get originRequestPolicyConfig(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig(this, 'OriginRequestPolicyConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Comment'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.Comment',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Comment', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Name'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.Name',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Name', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.Name') as unknown as string;
  }

  public get headersConfig(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings {
    return new CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontCreateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontCreatePublicKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreatePublicKeyRequest) {
    super(scope, id);
  }

  public get publicKey(): CloudFrontCreatePublicKeyPublicKey {
    return new CloudFrontCreatePublicKeyPublicKey(this, 'PublicKey', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.Location'),
        outputPath: 'Location',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.ETag'),
        outputPath: 'ETag',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreatePublicKeyPublicKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreatePublicKeyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.PublicKey.Id'),
        outputPath: 'PublicKey.Id',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.PublicKey.Id', props);
    return resource.getResponseField('PublicKey.Id') as unknown as string;
  }

  public get createdTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.PublicKey.CreatedTime'),
        outputPath: 'PublicKey.CreatedTime',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.PublicKey.CreatedTime', props);
    return resource.getResponseField('PublicKey.CreatedTime') as unknown as string;
  }

  public get publicKeyConfig(): CloudFrontCreatePublicKeyPublicKeyPublicKeyConfig {
    return new CloudFrontCreatePublicKeyPublicKeyPublicKeyConfig(this, 'PublicKeyConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreatePublicKeyPublicKeyPublicKeyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreatePublicKeyRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.PublicKey.PublicKeyConfig.CallerReference'),
        outputPath: 'PublicKey.PublicKeyConfig.CallerReference',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.PublicKey.PublicKeyConfig.CallerReference', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.CallerReference') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.PublicKey.PublicKeyConfig.Name'),
        outputPath: 'PublicKey.PublicKeyConfig.Name',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.PublicKey.PublicKeyConfig.Name', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.Name') as unknown as string;
  }

  public get encodedKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.PublicKey.PublicKeyConfig.EncodedKey'),
        outputPath: 'PublicKey.PublicKeyConfig.EncodedKey',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.PublicKey.PublicKeyConfig.EncodedKey', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.EncodedKey') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreatePublicKey.PublicKey.PublicKeyConfig.Comment'),
        outputPath: 'PublicKey.PublicKeyConfig.Comment',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePublicKey.PublicKey.PublicKeyConfig.Comment', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.Comment') as unknown as string;
  }

}

export class CloudFrontCreateRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get realtimeLogConfig(): CloudFrontCreateRealtimeLogConfigRealtimeLogConfig {
    return new CloudFrontCreateRealtimeLogConfigRealtimeLogConfig(this, 'RealtimeLogConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateRealtimeLogConfigRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateRealtimeLogConfig.RealtimeLogConfig.ARN'),
        outputPath: 'RealtimeLogConfig.ARN',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRealtimeLogConfig.RealtimeLogConfig.ARN', props);
    return resource.getResponseField('RealtimeLogConfig.ARN') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateRealtimeLogConfig.RealtimeLogConfig.Name'),
        outputPath: 'RealtimeLogConfig.Name',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRealtimeLogConfig.RealtimeLogConfig.Name', props);
    return resource.getResponseField('RealtimeLogConfig.Name') as unknown as string;
  }

  public get samplingRate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateRealtimeLogConfig.RealtimeLogConfig.SamplingRate'),
        outputPath: 'RealtimeLogConfig.SamplingRate',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRealtimeLogConfig.RealtimeLogConfig.SamplingRate', props);
    return resource.getResponseField('RealtimeLogConfig.SamplingRate') as unknown as number;
  }

  public get endPoints(): shapes.CloudFrontEndPoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateRealtimeLogConfig.RealtimeLogConfig.EndPoints'),
        outputPath: 'RealtimeLogConfig.EndPoints',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRealtimeLogConfig.RealtimeLogConfig.EndPoints', props);
    return resource.getResponseField('RealtimeLogConfig.EndPoints') as unknown as shapes.CloudFrontEndPoint[];
  }

  public get fields(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateRealtimeLogConfig.RealtimeLogConfig.Fields'),
        outputPath: 'RealtimeLogConfig.Fields',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateRealtimeLogConfig.RealtimeLogConfig.Fields', props);
    return resource.getResponseField('RealtimeLogConfig.Fields') as unknown as string[];
  }

}

export class CloudFrontCreateStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get streamingDistribution(): CloudFrontCreateStreamingDistributionStreamingDistribution {
    return new CloudFrontCreateStreamingDistributionStreamingDistribution(this, 'StreamingDistribution', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.Location'),
        outputPath: 'Location',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.ETag'),
        outputPath: 'ETag',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.Id'),
        outputPath: 'StreamingDistribution.Id',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.Id', props);
    return resource.getResponseField('StreamingDistribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.ARN'),
        outputPath: 'StreamingDistribution.ARN',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.ARN', props);
    return resource.getResponseField('StreamingDistribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.Status'),
        outputPath: 'StreamingDistribution.Status',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.Status', props);
    return resource.getResponseField('StreamingDistribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.LastModifiedTime'),
        outputPath: 'StreamingDistribution.LastModifiedTime',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.LastModifiedTime', props);
    return resource.getResponseField('StreamingDistribution.LastModifiedTime') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.DomainName'),
        outputPath: 'StreamingDistribution.DomainName',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.DomainName', props);
    return resource.getResponseField('StreamingDistribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontCreateStreamingDistributionStreamingDistributionActiveTrustedSigners {
    return new CloudFrontCreateStreamingDistributionStreamingDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get streamingDistributionConfig(): CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfig {
    return new CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfig(this, 'StreamingDistributionConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Quantity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Items'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Items',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.CallerReference'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.CallerReference',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.CallerReference', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.CallerReference') as unknown as string;
  }

  public get s3Origin(): CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin {
    return new CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin(this, 'S3Origin', this.__resources, this.input);
  }

  public get aliases(): CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases {
    return new CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Comment'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Comment',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Comment', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging {
    return new CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get trustedSigners(): CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners {
    return new CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.PriceClass'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.PriceClass',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.PriceClass', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Enabled') as unknown as boolean;
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName') as unknown as string;
  }

  public get originAccessIdentity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity') as unknown as string;
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Items',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Bucket',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Prefix',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontCreateStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontCreateStreamingDistributionWithTags extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get streamingDistribution(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistribution {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistribution(this, 'StreamingDistribution', this.__resources, this.input);
  }

  public get location(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.Location'),
        outputPath: 'Location',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.Location', props);
    return resource.getResponseField('Location') as unknown as string;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.ETag'),
        outputPath: 'ETag',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.Id'),
        outputPath: 'StreamingDistribution.Id',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.Id', props);
    return resource.getResponseField('StreamingDistribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.ARN'),
        outputPath: 'StreamingDistribution.ARN',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.ARN', props);
    return resource.getResponseField('StreamingDistribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.Status'),
        outputPath: 'StreamingDistribution.Status',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.Status', props);
    return resource.getResponseField('StreamingDistribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.LastModifiedTime'),
        outputPath: 'StreamingDistribution.LastModifiedTime',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.LastModifiedTime', props);
    return resource.getResponseField('StreamingDistribution.LastModifiedTime') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.DomainName'),
        outputPath: 'StreamingDistribution.DomainName',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.DomainName', props);
    return resource.getResponseField('StreamingDistribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionActiveTrustedSigners {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get streamingDistributionConfig(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfig {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfig(this, 'StreamingDistributionConfig', this.__resources, this.input);
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Enabled',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Quantity',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.ActiveTrustedSigners.Items'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Items',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.CallerReference'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.CallerReference',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.CallerReference', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.CallerReference') as unknown as string;
  }

  public get s3Origin(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigS3Origin {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigS3Origin(this, 'S3Origin', this.__resources, this.input);
  }

  public get aliases(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigAliases {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Comment'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Comment',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Comment', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigLogging {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get trustedSigners(): CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigTrustedSigners {
    return new CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.PriceClass'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.PriceClass',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.PriceClass', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Enabled',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Enabled') as unknown as boolean;
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigS3Origin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName') as unknown as string;
  }

  public get originAccessIdentity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity') as unknown as string;
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Aliases.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Items',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Aliases.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Enabled',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Bucket',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Prefix',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontCreateStreamingDistributionWithTagsStreamingDistributionStreamingDistributionConfigTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontCreateStreamingDistributionWithTagsRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createStreamingDistributionWithTags',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items',
        parameters: {
          StreamingDistributionConfigWithTags: {
            StreamingDistributionConfig: {
              CallerReference: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.callerReference,
              S3Origin: {
                DomainName: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.domainName,
                OriginAccessIdentity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.s3Origin.originAccessIdentity,
              },
              Aliases: {
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.aliases?.items,
              },
              Comment: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.comment,
              Logging: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.enabled,
                Bucket: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.bucket,
                Prefix: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.logging?.prefix,
              },
              TrustedSigners: {
                Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.enabled,
                Quantity: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.quantity,
                Items: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.trustedSigners.items,
              },
              PriceClass: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.priceClass,
              Enabled: this.input.streamingDistributionConfigWithTags.streamingDistributionConfig.enabled,
            },
            Tags: {
              Items: this.input.streamingDistributionConfigWithTags.tags.items,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateStreamingDistributionWithTags.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCachePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get cachePolicy(): CloudFrontFetchCachePolicyCachePolicy {
    return new CloudFrontFetchCachePolicyCachePolicy(this, 'CachePolicy', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchCachePolicyCachePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.Id'),
        outputPath: 'CachePolicy.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.Id', props);
    return resource.getResponseField('CachePolicy.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.LastModifiedTime'),
        outputPath: 'CachePolicy.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.LastModifiedTime', props);
    return resource.getResponseField('CachePolicy.LastModifiedTime') as unknown as string;
  }

  public get cachePolicyConfig(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfig {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfig(this, 'CachePolicyConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.Comment'),
        outputPath: 'CachePolicy.CachePolicyConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.Comment', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.Name'),
        outputPath: 'CachePolicy.CachePolicyConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.Name', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.Name') as unknown as string;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.DefaultTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.DefaultTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.DefaultTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.MaxTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.MaxTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.MaxTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.MaxTTL') as unknown as number;
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.MinTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.MinTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.MinTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.MinTTL') as unknown as number;
  }

  public get parametersInCacheKeyAndForwardedToOrigin(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(this, 'ParametersInCacheKeyAndForwardedToOrigin', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get enableAcceptEncodingGzip(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip') as unknown as boolean;
  }

  public get enableAcceptEncodingBrotli(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli') as unknown as boolean;
  }

  public get headersConfig(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings {
    return new CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCachePolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get cachePolicyConfig(): CloudFrontFetchCachePolicyConfigCachePolicyConfig {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfig(this, 'CachePolicyConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.Comment'),
        outputPath: 'CachePolicyConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.Comment', props);
    return resource.getResponseField('CachePolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.Name'),
        outputPath: 'CachePolicyConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.Name', props);
    return resource.getResponseField('CachePolicyConfig.Name') as unknown as string;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.DefaultTTL'),
        outputPath: 'CachePolicyConfig.DefaultTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.DefaultTTL', props);
    return resource.getResponseField('CachePolicyConfig.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.MaxTTL'),
        outputPath: 'CachePolicyConfig.MaxTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.MaxTTL', props);
    return resource.getResponseField('CachePolicyConfig.MaxTTL') as unknown as number;
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.MinTTL'),
        outputPath: 'CachePolicyConfig.MinTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.MinTTL', props);
    return resource.getResponseField('CachePolicyConfig.MinTTL') as unknown as number;
  }

  public get parametersInCacheKeyAndForwardedToOrigin(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(this, 'ParametersInCacheKeyAndForwardedToOrigin', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get enableAcceptEncodingGzip(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip') as unknown as boolean;
  }

  public get enableAcceptEncodingBrotli(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli') as unknown as boolean;
  }

  public get headersConfig(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings {
    return new CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontFetchCachePolicyConfigCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCachePolicyConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCachePolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCachePolicyConfig.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontFetchCloudFrontOriginAccessIdentity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get cloudFrontOriginAccessIdentity(): CloudFrontFetchCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity {
    return new CloudFrontFetchCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity(this, 'CloudFrontOriginAccessIdentity', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentity.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentity.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.Id'),
        outputPath: 'CloudFrontOriginAccessIdentity.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.Id', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.Id') as unknown as string;
  }

  public get s3CanonicalUserId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.S3CanonicalUserId'),
        outputPath: 'CloudFrontOriginAccessIdentity.S3CanonicalUserId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.S3CanonicalUserId', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.S3CanonicalUserId') as unknown as string;
  }

  public get cloudFrontOriginAccessIdentityConfig(): CloudFrontFetchCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig {
    return new CloudFrontFetchCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig(this, 'CloudFrontOriginAccessIdentityConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference'),
        outputPath: 'CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment'),
        outputPath: 'CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment') as unknown as string;
  }

}

export class CloudFrontFetchCloudFrontOriginAccessIdentityConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityConfigRequest) {
    super(scope, id);
  }

  public get cloudFrontOriginAccessIdentityConfig(): CloudFrontFetchCloudFrontOriginAccessIdentityConfigCloudFrontOriginAccessIdentityConfig {
    return new CloudFrontFetchCloudFrontOriginAccessIdentityConfigCloudFrontOriginAccessIdentityConfig(this, 'CloudFrontOriginAccessIdentityConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentityConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentityConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentityConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchCloudFrontOriginAccessIdentityConfigCloudFrontOriginAccessIdentityConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetCloudFrontOriginAccessIdentityConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentityConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentityConfig.CloudFrontOriginAccessIdentityConfig.CallerReference'),
        outputPath: 'CloudFrontOriginAccessIdentityConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentityConfig.CloudFrontOriginAccessIdentityConfig.CallerReference', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCloudFrontOriginAccessIdentityConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetCloudFrontOriginAccessIdentityConfig.CloudFrontOriginAccessIdentityConfig.Comment'),
        outputPath: 'CloudFrontOriginAccessIdentityConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCloudFrontOriginAccessIdentityConfig.CloudFrontOriginAccessIdentityConfig.Comment', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityConfig.Comment') as unknown as string;
  }

}

export class CloudFrontFetchDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get distribution(): CloudFrontFetchDistributionDistribution {
    return new CloudFrontFetchDistributionDistribution(this, 'Distribution', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchDistributionDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.Id'),
        outputPath: 'Distribution.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.Id', props);
    return resource.getResponseField('Distribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ARN'),
        outputPath: 'Distribution.ARN',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ARN', props);
    return resource.getResponseField('Distribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.Status'),
        outputPath: 'Distribution.Status',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.Status', props);
    return resource.getResponseField('Distribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.LastModifiedTime'),
        outputPath: 'Distribution.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.LastModifiedTime', props);
    return resource.getResponseField('Distribution.LastModifiedTime') as unknown as string;
  }

  public get inProgressInvalidationBatches(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.InProgressInvalidationBatches'),
        outputPath: 'Distribution.InProgressInvalidationBatches',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.InProgressInvalidationBatches', props);
    return resource.getResponseField('Distribution.InProgressInvalidationBatches') as unknown as number;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DomainName'),
        outputPath: 'Distribution.DomainName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DomainName', props);
    return resource.getResponseField('Distribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontFetchDistributionDistributionActiveTrustedSigners {
    return new CloudFrontFetchDistributionDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get activeTrustedKeyGroups(): CloudFrontFetchDistributionDistributionActiveTrustedKeyGroups {
    return new CloudFrontFetchDistributionDistributionActiveTrustedKeyGroups(this, 'ActiveTrustedKeyGroups', this.__resources, this.input);
  }

  public get distributionConfig(): CloudFrontFetchDistributionDistributionDistributionConfig {
    return new CloudFrontFetchDistributionDistributionDistributionConfig(this, 'DistributionConfig', this.__resources, this.input);
  }

  public get aliasIcpRecordals(): shapes.CloudFrontAliasIcpRecordal[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.AliasICPRecordals'),
        outputPath: 'Distribution.AliasICPRecordals',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.AliasICPRecordals', props);
    return resource.getResponseField('Distribution.AliasICPRecordals') as unknown as shapes.CloudFrontAliasIcpRecordal[];
  }

}

export class CloudFrontFetchDistributionDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'Distribution.ActiveTrustedSigners.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'Distribution.ActiveTrustedSigners.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ActiveTrustedSigners.Items'),
        outputPath: 'Distribution.ActiveTrustedSigners.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontFetchDistributionDistributionActiveTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ActiveTrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ActiveTrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ActiveTrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ActiveTrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontKgKeyPairIds[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.ActiveTrustedKeyGroups.Items'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.ActiveTrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Items') as unknown as shapes.CloudFrontKgKeyPairIds[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.CallerReference'),
        outputPath: 'Distribution.DistributionConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.CallerReference', props);
    return resource.getResponseField('Distribution.DistributionConfig.CallerReference') as unknown as string;
  }

  public get aliases(): CloudFrontFetchDistributionDistributionDistributionConfigAliases {
    return new CloudFrontFetchDistributionDistributionDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get defaultRootObject(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultRootObject'),
        outputPath: 'Distribution.DistributionConfig.DefaultRootObject',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultRootObject', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultRootObject') as unknown as string;
  }

  public get origins(): CloudFrontFetchDistributionDistributionDistributionConfigOrigins {
    return new CloudFrontFetchDistributionDistributionDistributionConfigOrigins(this, 'Origins', this.__resources, this.input);
  }

  public get originGroups(): CloudFrontFetchDistributionDistributionDistributionConfigOriginGroups {
    return new CloudFrontFetchDistributionDistributionDistributionConfigOriginGroups(this, 'OriginGroups', this.__resources, this.input);
  }

  public get defaultCacheBehavior(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehavior {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehavior(this, 'DefaultCacheBehavior', this.__resources, this.input);
  }

  public get cacheBehaviors(): CloudFrontFetchDistributionDistributionDistributionConfigCacheBehaviors {
    return new CloudFrontFetchDistributionDistributionDistributionConfigCacheBehaviors(this, 'CacheBehaviors', this.__resources, this.input);
  }

  public get customErrorResponses(): CloudFrontFetchDistributionDistributionDistributionConfigCustomErrorResponses {
    return new CloudFrontFetchDistributionDistributionDistributionConfigCustomErrorResponses(this, 'CustomErrorResponses', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Comment'),
        outputPath: 'Distribution.DistributionConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Comment', props);
    return resource.getResponseField('Distribution.DistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontFetchDistributionDistributionDistributionConfigLogging {
    return new CloudFrontFetchDistributionDistributionDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.PriceClass'),
        outputPath: 'Distribution.DistributionConfig.PriceClass',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.PriceClass', props);
    return resource.getResponseField('Distribution.DistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Enabled') as unknown as boolean;
  }

  public get viewerCertificate(): CloudFrontFetchDistributionDistributionDistributionConfigViewerCertificate {
    return new CloudFrontFetchDistributionDistributionDistributionConfigViewerCertificate(this, 'ViewerCertificate', this.__resources, this.input);
  }

  public get restrictions(): CloudFrontFetchDistributionDistributionDistributionConfigRestrictions {
    return new CloudFrontFetchDistributionDistributionDistributionConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get webAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.WebACLId'),
        outputPath: 'Distribution.DistributionConfig.WebACLId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.WebACLId', props);
    return resource.getResponseField('Distribution.DistributionConfig.WebACLId') as unknown as string;
  }

  public get httpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.HttpVersion'),
        outputPath: 'Distribution.DistributionConfig.HttpVersion',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.HttpVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.HttpVersion') as unknown as string;
  }

  public get isIpv6Enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.IsIPV6Enabled'),
        outputPath: 'Distribution.DistributionConfig.IsIPV6Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.IsIPV6Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.IsIPV6Enabled') as unknown as boolean;
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Aliases.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Aliases.Items'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Aliases.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigOrigins extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Origins.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Origins.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Origins.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOrigin[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Origins.Items'),
        outputPath: 'Distribution.DistributionConfig.Origins.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Origins.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Items') as unknown as shapes.CloudFrontOrigin[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigOriginGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.OriginGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.OriginGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOriginGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.OriginGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.OriginGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Items') as unknown as shapes.CloudFrontOriginGroup[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehavior extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get targetOriginId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId') as unknown as string;
  }

  public get trustedSigners(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get trustedKeyGroups(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(this, 'TrustedKeyGroups', this.__resources, this.input);
  }

  public get viewerProtocolPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy') as unknown as string;
  }

  public get allowedMethods(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods(this, 'AllowedMethods', this.__resources, this.input);
  }

  public get smoothStreaming(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming') as unknown as boolean;
  }

  public get compress(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.Compress'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.Compress',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.Compress', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.Compress') as unknown as boolean;
  }

  public get lambdaFunctionAssociations(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(this, 'LambdaFunctionAssociations', this.__resources, this.input);
  }

  public get fieldLevelEncryptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId') as unknown as string;
  }

  public get realtimeLogConfigArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn') as unknown as string;
  }

  public get cachePolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId') as unknown as string;
  }

  public get originRequestPolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId') as unknown as string;
  }

  public get forwardedValues(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues(this, 'ForwardedValues', this.__resources, this.input);
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL') as unknown as number;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL') as unknown as number;
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items') as unknown as string[];
  }

  public get cachedMethods(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(this, 'CachedMethods', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontLambdaFunctionAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items') as unknown as shapes.CloudFrontLambdaFunctionAssociation[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get queryString(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString') as unknown as boolean;
  }

  public get cookies(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(this, 'Cookies', this.__resources, this.input);
  }

  public get headers(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(this, 'Headers', this.__resources, this.input);
  }

  public get queryStringCacheKeys(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(this, 'QueryStringCacheKeys', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get forward(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward') as unknown as string;
  }

  public get whitelistedNames(): CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames {
    return new CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(this, 'WhitelistedNames', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigCacheBehaviors extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.CacheBehaviors.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.CacheBehaviors.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCacheBehavior[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.CacheBehaviors.Items'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.CacheBehaviors.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Items') as unknown as shapes.CloudFrontCacheBehavior[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigCustomErrorResponses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.CustomErrorResponses.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.CustomErrorResponses.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCustomErrorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.CustomErrorResponses.Items'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.CustomErrorResponses.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Items') as unknown as shapes.CloudFrontCustomErrorResponse[];
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Logging.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Logging.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get includeCookies(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Logging.IncludeCookies'),
        outputPath: 'Distribution.DistributionConfig.Logging.IncludeCookies',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Logging.IncludeCookies', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.IncludeCookies') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Logging.Bucket'),
        outputPath: 'Distribution.DistributionConfig.Logging.Bucket',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Logging.Prefix'),
        outputPath: 'Distribution.DistributionConfig.Logging.Prefix',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigViewerCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get cloudFrontDefaultCertificate(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate') as unknown as boolean;
  }

  public get iamCertificateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId') as unknown as string;
  }

  public get acmCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn') as unknown as string;
  }

  public get sslSupportMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod') as unknown as string;
  }

  public get minimumProtocolVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion') as unknown as string;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.Certificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.Certificate',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.Certificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.Certificate') as unknown as string;
  }

  public get certificateSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.ViewerCertificate.CertificateSource'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CertificateSource',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.ViewerCertificate.CertificateSource', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CertificateSource') as unknown as string;
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get geoRestriction(): CloudFrontFetchDistributionDistributionDistributionConfigRestrictionsGeoRestriction {
    return new CloudFrontFetchDistributionDistributionDistributionConfigRestrictionsGeoRestriction(this, 'GeoRestriction', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionDistributionDistributionConfigRestrictionsGeoRestriction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionRequest) {
    super(scope, id);
  }

  public get restrictionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType') as unknown as string;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get distributionConfig(): CloudFrontFetchDistributionConfigDistributionConfig {
    return new CloudFrontFetchDistributionConfigDistributionConfig(this, 'DistributionConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.CallerReference'),
        outputPath: 'DistributionConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.CallerReference', props);
    return resource.getResponseField('DistributionConfig.CallerReference') as unknown as string;
  }

  public get aliases(): CloudFrontFetchDistributionConfigDistributionConfigAliases {
    return new CloudFrontFetchDistributionConfigDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get defaultRootObject(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultRootObject'),
        outputPath: 'DistributionConfig.DefaultRootObject',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultRootObject', props);
    return resource.getResponseField('DistributionConfig.DefaultRootObject') as unknown as string;
  }

  public get origins(): CloudFrontFetchDistributionConfigDistributionConfigOrigins {
    return new CloudFrontFetchDistributionConfigDistributionConfigOrigins(this, 'Origins', this.__resources, this.input);
  }

  public get originGroups(): CloudFrontFetchDistributionConfigDistributionConfigOriginGroups {
    return new CloudFrontFetchDistributionConfigDistributionConfigOriginGroups(this, 'OriginGroups', this.__resources, this.input);
  }

  public get defaultCacheBehavior(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehavior {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehavior(this, 'DefaultCacheBehavior', this.__resources, this.input);
  }

  public get cacheBehaviors(): CloudFrontFetchDistributionConfigDistributionConfigCacheBehaviors {
    return new CloudFrontFetchDistributionConfigDistributionConfigCacheBehaviors(this, 'CacheBehaviors', this.__resources, this.input);
  }

  public get customErrorResponses(): CloudFrontFetchDistributionConfigDistributionConfigCustomErrorResponses {
    return new CloudFrontFetchDistributionConfigDistributionConfigCustomErrorResponses(this, 'CustomErrorResponses', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Comment'),
        outputPath: 'DistributionConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Comment', props);
    return resource.getResponseField('DistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontFetchDistributionConfigDistributionConfigLogging {
    return new CloudFrontFetchDistributionConfigDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.PriceClass'),
        outputPath: 'DistributionConfig.PriceClass',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.PriceClass', props);
    return resource.getResponseField('DistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Enabled'),
        outputPath: 'DistributionConfig.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Enabled', props);
    return resource.getResponseField('DistributionConfig.Enabled') as unknown as boolean;
  }

  public get viewerCertificate(): CloudFrontFetchDistributionConfigDistributionConfigViewerCertificate {
    return new CloudFrontFetchDistributionConfigDistributionConfigViewerCertificate(this, 'ViewerCertificate', this.__resources, this.input);
  }

  public get restrictions(): CloudFrontFetchDistributionConfigDistributionConfigRestrictions {
    return new CloudFrontFetchDistributionConfigDistributionConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get webAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.WebACLId'),
        outputPath: 'DistributionConfig.WebACLId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.WebACLId', props);
    return resource.getResponseField('DistributionConfig.WebACLId') as unknown as string;
  }

  public get httpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.HttpVersion'),
        outputPath: 'DistributionConfig.HttpVersion',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.HttpVersion', props);
    return resource.getResponseField('DistributionConfig.HttpVersion') as unknown as string;
  }

  public get isIpv6Enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.IsIPV6Enabled'),
        outputPath: 'DistributionConfig.IsIPV6Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.IsIPV6Enabled', props);
    return resource.getResponseField('DistributionConfig.IsIPV6Enabled') as unknown as boolean;
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Aliases.Quantity'),
        outputPath: 'DistributionConfig.Aliases.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('DistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Aliases.Items'),
        outputPath: 'DistributionConfig.Aliases.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Aliases.Items', props);
    return resource.getResponseField('DistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigOrigins extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Origins.Quantity'),
        outputPath: 'DistributionConfig.Origins.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Origins.Quantity', props);
    return resource.getResponseField('DistributionConfig.Origins.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOrigin[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Origins.Items'),
        outputPath: 'DistributionConfig.Origins.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Origins.Items', props);
    return resource.getResponseField('DistributionConfig.Origins.Items') as unknown as shapes.CloudFrontOrigin[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigOriginGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.OriginGroups.Quantity'),
        outputPath: 'DistributionConfig.OriginGroups.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.OriginGroups.Quantity', props);
    return resource.getResponseField('DistributionConfig.OriginGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOriginGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.OriginGroups.Items'),
        outputPath: 'DistributionConfig.OriginGroups.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.OriginGroups.Items', props);
    return resource.getResponseField('DistributionConfig.OriginGroups.Items') as unknown as shapes.CloudFrontOriginGroup[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehavior extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get targetOriginId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TargetOriginId'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TargetOriginId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TargetOriginId', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TargetOriginId') as unknown as string;
  }

  public get trustedSigners(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorTrustedSigners {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get trustedKeyGroups(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorTrustedKeyGroups {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(this, 'TrustedKeyGroups', this.__resources, this.input);
  }

  public get viewerProtocolPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy') as unknown as string;
  }

  public get allowedMethods(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorAllowedMethods {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorAllowedMethods(this, 'AllowedMethods', this.__resources, this.input);
  }

  public get smoothStreaming(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.SmoothStreaming'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.SmoothStreaming',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.SmoothStreaming', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.SmoothStreaming') as unknown as boolean;
  }

  public get compress(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.Compress'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.Compress',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.Compress', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.Compress') as unknown as boolean;
  }

  public get lambdaFunctionAssociations(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(this, 'LambdaFunctionAssociations', this.__resources, this.input);
  }

  public get fieldLevelEncryptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId') as unknown as string;
  }

  public get realtimeLogConfigArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn') as unknown as string;
  }

  public get cachePolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.CachePolicyId'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.CachePolicyId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.CachePolicyId', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.CachePolicyId') as unknown as string;
  }

  public get originRequestPolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId') as unknown as string;
  }

  public get forwardedValues(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValues {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValues(this, 'ForwardedValues', this.__resources, this.input);
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.MinTTL'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.MinTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.MinTTL', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.MinTTL') as unknown as number;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.DefaultTTL'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.DefaultTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.DefaultTTL', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.MaxTTL'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.MaxTTL',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.MaxTTL', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.MaxTTL') as unknown as number;
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorAllowedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items') as unknown as string[];
  }

  public get cachedMethods(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(this, 'CachedMethods', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontLambdaFunctionAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items') as unknown as shapes.CloudFrontLambdaFunctionAssociation[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get queryString(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString') as unknown as boolean;
  }

  public get cookies(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesCookies {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(this, 'Cookies', this.__resources, this.input);
  }

  public get headers(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(this, 'Headers', this.__resources, this.input);
  }

  public get queryStringCacheKeys(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(this, 'QueryStringCacheKeys', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get forward(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward') as unknown as string;
  }

  public get whitelistedNames(): CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames {
    return new CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(this, 'WhitelistedNames', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items'),
        outputPath: 'DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items', props);
    return resource.getResponseField('DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items') as unknown as string[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigCacheBehaviors extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.CacheBehaviors.Quantity'),
        outputPath: 'DistributionConfig.CacheBehaviors.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.CacheBehaviors.Quantity', props);
    return resource.getResponseField('DistributionConfig.CacheBehaviors.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCacheBehavior[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.CacheBehaviors.Items'),
        outputPath: 'DistributionConfig.CacheBehaviors.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.CacheBehaviors.Items', props);
    return resource.getResponseField('DistributionConfig.CacheBehaviors.Items') as unknown as shapes.CloudFrontCacheBehavior[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigCustomErrorResponses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.CustomErrorResponses.Quantity'),
        outputPath: 'DistributionConfig.CustomErrorResponses.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.CustomErrorResponses.Quantity', props);
    return resource.getResponseField('DistributionConfig.CustomErrorResponses.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCustomErrorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.CustomErrorResponses.Items'),
        outputPath: 'DistributionConfig.CustomErrorResponses.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.CustomErrorResponses.Items', props);
    return resource.getResponseField('DistributionConfig.CustomErrorResponses.Items') as unknown as shapes.CloudFrontCustomErrorResponse[];
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Logging.Enabled'),
        outputPath: 'DistributionConfig.Logging.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('DistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get includeCookies(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Logging.IncludeCookies'),
        outputPath: 'DistributionConfig.Logging.IncludeCookies',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Logging.IncludeCookies', props);
    return resource.getResponseField('DistributionConfig.Logging.IncludeCookies') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Logging.Bucket'),
        outputPath: 'DistributionConfig.Logging.Bucket',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('DistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Logging.Prefix'),
        outputPath: 'DistributionConfig.Logging.Prefix',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('DistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigViewerCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get cloudFrontDefaultCertificate(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate'),
        outputPath: 'DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate') as unknown as boolean;
  }

  public get iamCertificateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.IAMCertificateId'),
        outputPath: 'DistributionConfig.ViewerCertificate.IAMCertificateId',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.IAMCertificateId', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.IAMCertificateId') as unknown as string;
  }

  public get acmCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.ACMCertificateArn'),
        outputPath: 'DistributionConfig.ViewerCertificate.ACMCertificateArn',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.ACMCertificateArn', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.ACMCertificateArn') as unknown as string;
  }

  public get sslSupportMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.SSLSupportMethod'),
        outputPath: 'DistributionConfig.ViewerCertificate.SSLSupportMethod',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.SSLSupportMethod', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.SSLSupportMethod') as unknown as string;
  }

  public get minimumProtocolVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.MinimumProtocolVersion'),
        outputPath: 'DistributionConfig.ViewerCertificate.MinimumProtocolVersion',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.MinimumProtocolVersion', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.MinimumProtocolVersion') as unknown as string;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.Certificate'),
        outputPath: 'DistributionConfig.ViewerCertificate.Certificate',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.Certificate', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.Certificate') as unknown as string;
  }

  public get certificateSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.ViewerCertificate.CertificateSource'),
        outputPath: 'DistributionConfig.ViewerCertificate.CertificateSource',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.ViewerCertificate.CertificateSource', props);
    return resource.getResponseField('DistributionConfig.ViewerCertificate.CertificateSource') as unknown as string;
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get geoRestriction(): CloudFrontFetchDistributionConfigDistributionConfigRestrictionsGeoRestriction {
    return new CloudFrontFetchDistributionConfigDistributionConfigRestrictionsGeoRestriction(this, 'GeoRestriction', this.__resources, this.input);
  }

}

export class CloudFrontFetchDistributionConfigDistributionConfigRestrictionsGeoRestriction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetDistributionConfigRequest) {
    super(scope, id);
  }

  public get restrictionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Restrictions.GeoRestriction.RestrictionType'),
        outputPath: 'DistributionConfig.Restrictions.GeoRestriction.RestrictionType',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Restrictions.GeoRestriction.RestrictionType', props);
    return resource.getResponseField('DistributionConfig.Restrictions.GeoRestriction.RestrictionType') as unknown as string;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Restrictions.GeoRestriction.Quantity'),
        outputPath: 'DistributionConfig.Restrictions.GeoRestriction.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Restrictions.GeoRestriction.Quantity', props);
    return resource.getResponseField('DistributionConfig.Restrictions.GeoRestriction.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetDistributionConfig.DistributionConfig.Restrictions.GeoRestriction.Items'),
        outputPath: 'DistributionConfig.Restrictions.GeoRestriction.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetDistributionConfig.DistributionConfig.Restrictions.GeoRestriction.Items', props);
    return resource.getResponseField('DistributionConfig.Restrictions.GeoRestriction.Items') as unknown as string[];
  }

}

export class CloudFrontFetchFieldLevelEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryption(): CloudFrontFetchFieldLevelEncryptionFieldLevelEncryption {
    return new CloudFrontFetchFieldLevelEncryptionFieldLevelEncryption(this, 'FieldLevelEncryption', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchFieldLevelEncryptionFieldLevelEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.Id'),
        outputPath: 'FieldLevelEncryption.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.Id', props);
    return resource.getResponseField('FieldLevelEncryption.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.LastModifiedTime'),
        outputPath: 'FieldLevelEncryption.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.LastModifiedTime', props);
    return resource.getResponseField('FieldLevelEncryption.LastModifiedTime') as unknown as string;
  }

  public get fieldLevelEncryptionConfig(): CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfig {
    return new CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfig(this, 'FieldLevelEncryptionConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.Comment'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.Comment') as unknown as string;
  }

  public get queryArgProfileConfig(): CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig(this, 'QueryArgProfileConfig', this.__resources, this.input);
  }

  public get contentTypeProfileConfig(): CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig(this, 'ContentTypeProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get forwardWhenQueryArgProfileIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown') as unknown as boolean;
  }

  public get queryArgProfiles(): CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles {
    return new CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles(this, 'QueryArgProfiles', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontQueryArgProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items') as unknown as shapes.CloudFrontQueryArgProfile[];
  }

}

export class CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get forwardWhenContentTypeIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown') as unknown as boolean;
  }

  public get contentTypeProfiles(): CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles {
    return new CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles(this, 'ContentTypeProfiles', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontContentTypeProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryption',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryption.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items') as unknown as shapes.CloudFrontContentTypeProfile[];
  }

}

export class CloudFrontFetchFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionConfig(): CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfig {
    return new CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfig(this, 'FieldLevelEncryptionConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.CallerReference'),
        outputPath: 'FieldLevelEncryptionConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.Comment'),
        outputPath: 'FieldLevelEncryptionConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.Comment') as unknown as string;
  }

  public get queryArgProfileConfig(): CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigQueryArgProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigQueryArgProfileConfig(this, 'QueryArgProfileConfig', this.__resources, this.input);
  }

  public get contentTypeProfileConfig(): CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigContentTypeProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigContentTypeProfileConfig(this, 'ContentTypeProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigQueryArgProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get forwardWhenQueryArgProfileIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown'),
        outputPath: 'FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown') as unknown as boolean;
  }

  public get queryArgProfiles(): CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles {
    return new CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles(this, 'QueryArgProfiles', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity'),
        outputPath: 'FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontQueryArgProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items'),
        outputPath: 'FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items') as unknown as shapes.CloudFrontQueryArgProfile[];
  }

}

export class CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigContentTypeProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get forwardWhenContentTypeIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown'),
        outputPath: 'FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown') as unknown as boolean;
  }

  public get contentTypeProfiles(): CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles {
    return new CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles(this, 'ContentTypeProfiles', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionConfigFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity'),
        outputPath: 'FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontContentTypeProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items'),
        outputPath: 'FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionConfig.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items') as unknown as shapes.CloudFrontContentTypeProfile[];
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionProfile(): CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfile {
    return new CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfile(this, 'FieldLevelEncryptionProfile', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.Id'),
        outputPath: 'FieldLevelEncryptionProfile.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.Id', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.LastModifiedTime'),
        outputPath: 'FieldLevelEncryptionProfile.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.LastModifiedTime', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.LastModifiedTime') as unknown as string;
  }

  public get fieldLevelEncryptionProfileConfig(): CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig(this, 'FieldLevelEncryptionProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name') as unknown as string;
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment') as unknown as string;
  }

  public get encryptionEntities(): CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities {
    return new CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities(this, 'EncryptionEntities', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontEncryptionEntity[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items') as unknown as shapes.CloudFrontEncryptionEntity[];
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileConfigRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionProfileConfig(): CloudFrontFetchFieldLevelEncryptionProfileConfigFieldLevelEncryptionProfileConfig {
    return new CloudFrontFetchFieldLevelEncryptionProfileConfigFieldLevelEncryptionProfileConfig(this, 'FieldLevelEncryptionProfileConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfileConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfileConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfileConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfileConfigFieldLevelEncryptionProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileConfigRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfileConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.Name'),
        outputPath: 'FieldLevelEncryptionProfileConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.Name', props);
    return resource.getResponseField('FieldLevelEncryptionProfileConfig.Name') as unknown as string;
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfileConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.CallerReference'),
        outputPath: 'FieldLevelEncryptionProfileConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryptionProfileConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfileConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.Comment'),
        outputPath: 'FieldLevelEncryptionProfileConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryptionProfileConfig.Comment') as unknown as string;
  }

  public get encryptionEntities(): CloudFrontFetchFieldLevelEncryptionProfileConfigFieldLevelEncryptionProfileConfigEncryptionEntities {
    return new CloudFrontFetchFieldLevelEncryptionProfileConfigFieldLevelEncryptionProfileConfigEncryptionEntities(this, 'EncryptionEntities', this.__resources, this.input);
  }

}

export class CloudFrontFetchFieldLevelEncryptionProfileConfigFieldLevelEncryptionProfileConfigEncryptionEntities extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetFieldLevelEncryptionProfileConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfileConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity'),
        outputPath: 'FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontEncryptionEntity[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getFieldLevelEncryptionProfileConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items'),
        outputPath: 'FieldLevelEncryptionProfileConfig.EncryptionEntities.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetFieldLevelEncryptionProfileConfig.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items', props);
    return resource.getResponseField('FieldLevelEncryptionProfileConfig.EncryptionEntities.Items') as unknown as shapes.CloudFrontEncryptionEntity[];
  }

}

export class CloudFrontFetchInvalidation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetInvalidationRequest) {
    super(scope, id);
  }

  public get invalidation(): CloudFrontFetchInvalidationInvalidation {
    return new CloudFrontFetchInvalidationInvalidation(this, 'Invalidation', this.__resources, this.input);
  }

}

export class CloudFrontFetchInvalidationInvalidation extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetInvalidationRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetInvalidation.Invalidation.Id'),
        outputPath: 'Invalidation.Id',
        parameters: {
          DistributionId: this.input.distributionId,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetInvalidation.Invalidation.Id', props);
    return resource.getResponseField('Invalidation.Id') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetInvalidation.Invalidation.Status'),
        outputPath: 'Invalidation.Status',
        parameters: {
          DistributionId: this.input.distributionId,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetInvalidation.Invalidation.Status', props);
    return resource.getResponseField('Invalidation.Status') as unknown as string;
  }

  public get createTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetInvalidation.Invalidation.CreateTime'),
        outputPath: 'Invalidation.CreateTime',
        parameters: {
          DistributionId: this.input.distributionId,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetInvalidation.Invalidation.CreateTime', props);
    return resource.getResponseField('Invalidation.CreateTime') as unknown as string;
  }

  public get invalidationBatch(): CloudFrontFetchInvalidationInvalidationInvalidationBatch {
    return new CloudFrontFetchInvalidationInvalidationInvalidationBatch(this, 'InvalidationBatch', this.__resources, this.input);
  }

}

export class CloudFrontFetchInvalidationInvalidationInvalidationBatch extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetInvalidationRequest) {
    super(scope, id);
  }

  public get paths(): CloudFrontFetchInvalidationInvalidationInvalidationBatchPaths {
    return new CloudFrontFetchInvalidationInvalidationInvalidationBatchPaths(this, 'Paths', this.__resources, this.input);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetInvalidation.Invalidation.InvalidationBatch.CallerReference'),
        outputPath: 'Invalidation.InvalidationBatch.CallerReference',
        parameters: {
          DistributionId: this.input.distributionId,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetInvalidation.Invalidation.InvalidationBatch.CallerReference', props);
    return resource.getResponseField('Invalidation.InvalidationBatch.CallerReference') as unknown as string;
  }

}

export class CloudFrontFetchInvalidationInvalidationInvalidationBatchPaths extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetInvalidationRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetInvalidation.Invalidation.InvalidationBatch.Paths.Quantity'),
        outputPath: 'Invalidation.InvalidationBatch.Paths.Quantity',
        parameters: {
          DistributionId: this.input.distributionId,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetInvalidation.Invalidation.InvalidationBatch.Paths.Quantity', props);
    return resource.getResponseField('Invalidation.InvalidationBatch.Paths.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getInvalidation',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetInvalidation.Invalidation.InvalidationBatch.Paths.Items'),
        outputPath: 'Invalidation.InvalidationBatch.Paths.Items',
        parameters: {
          DistributionId: this.input.distributionId,
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetInvalidation.Invalidation.InvalidationBatch.Paths.Items', props);
    return resource.getResponseField('Invalidation.InvalidationBatch.Paths.Items') as unknown as string[];
  }

}

export class CloudFrontFetchKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetKeyGroupRequest) {
    super(scope, id);
  }

  public get keyGroup(): CloudFrontFetchKeyGroupKeyGroup {
    return new CloudFrontFetchKeyGroupKeyGroup(this, 'KeyGroup', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroup.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroup.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchKeyGroupKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetKeyGroupRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroup.KeyGroup.Id'),
        outputPath: 'KeyGroup.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroup.KeyGroup.Id', props);
    return resource.getResponseField('KeyGroup.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroup.KeyGroup.LastModifiedTime'),
        outputPath: 'KeyGroup.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroup.KeyGroup.LastModifiedTime', props);
    return resource.getResponseField('KeyGroup.LastModifiedTime') as unknown as string;
  }

  public get keyGroupConfig(): CloudFrontFetchKeyGroupKeyGroupKeyGroupConfig {
    return new CloudFrontFetchKeyGroupKeyGroupKeyGroupConfig(this, 'KeyGroupConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchKeyGroupKeyGroupKeyGroupConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetKeyGroupRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroup.KeyGroup.KeyGroupConfig.Name'),
        outputPath: 'KeyGroup.KeyGroupConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroup.KeyGroup.KeyGroupConfig.Name', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Name') as unknown as string;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroup.KeyGroup.KeyGroupConfig.Items'),
        outputPath: 'KeyGroup.KeyGroupConfig.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroup.KeyGroup.KeyGroupConfig.Items', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Items') as unknown as string[];
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroup.KeyGroup.KeyGroupConfig.Comment'),
        outputPath: 'KeyGroup.KeyGroupConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroup.KeyGroup.KeyGroupConfig.Comment', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Comment') as unknown as string;
  }

}

export class CloudFrontFetchKeyGroupConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetKeyGroupConfigRequest) {
    super(scope, id);
  }

  public get keyGroupConfig(): CloudFrontFetchKeyGroupConfigKeyGroupConfig {
    return new CloudFrontFetchKeyGroupConfigKeyGroupConfig(this, 'KeyGroupConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroupConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroupConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroupConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchKeyGroupConfigKeyGroupConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetKeyGroupConfigRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroupConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroupConfig.KeyGroupConfig.Name'),
        outputPath: 'KeyGroupConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroupConfig.KeyGroupConfig.Name', props);
    return resource.getResponseField('KeyGroupConfig.Name') as unknown as string;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroupConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroupConfig.KeyGroupConfig.Items'),
        outputPath: 'KeyGroupConfig.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroupConfig.KeyGroupConfig.Items', props);
    return resource.getResponseField('KeyGroupConfig.Items') as unknown as string[];
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getKeyGroupConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetKeyGroupConfig.KeyGroupConfig.Comment'),
        outputPath: 'KeyGroupConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetKeyGroupConfig.KeyGroupConfig.Comment', props);
    return resource.getResponseField('KeyGroupConfig.Comment') as unknown as string;
  }

}

export class CloudFrontFetchMonitoringSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetMonitoringSubscriptionRequest) {
    super(scope, id);
  }

  public get monitoringSubscription(): CloudFrontFetchMonitoringSubscriptionMonitoringSubscription {
    return new CloudFrontFetchMonitoringSubscriptionMonitoringSubscription(this, 'MonitoringSubscription', this.__resources, this.input);
  }

}

export class CloudFrontFetchMonitoringSubscriptionMonitoringSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetMonitoringSubscriptionRequest) {
    super(scope, id);
  }

  public get realtimeMetricsSubscriptionConfig(): CloudFrontFetchMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig {
    return new CloudFrontFetchMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig(this, 'RealtimeMetricsSubscriptionConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchMonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetMonitoringSubscriptionRequest) {
    super(scope, id);
  }

  public get realtimeMetricsSubscriptionStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getMonitoringSubscription',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetMonitoringSubscription.MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus'),
        outputPath: 'MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus',
        parameters: {
          DistributionId: this.input.distributionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetMonitoringSubscription.MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus', props);
    return resource.getResponseField('MonitoringSubscription.RealtimeMetricsSubscriptionConfig.RealtimeMetricsSubscriptionStatus') as unknown as string;
  }

}

export class CloudFrontFetchOriginRequestPolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get originRequestPolicy(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicy {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicy(this, 'OriginRequestPolicy', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.Id'),
        outputPath: 'OriginRequestPolicy.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.Id', props);
    return resource.getResponseField('OriginRequestPolicy.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.LastModifiedTime'),
        outputPath: 'OriginRequestPolicy.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.LastModifiedTime', props);
    return resource.getResponseField('OriginRequestPolicy.LastModifiedTime') as unknown as string;
  }

  public get originRequestPolicyConfig(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig(this, 'OriginRequestPolicyConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Comment'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Comment', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Name'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Name', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.Name') as unknown as string;
  }

  public get headersConfig(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings {
    return new CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontFetchOriginRequestPolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get originRequestPolicyConfig(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfig {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfig(this, 'OriginRequestPolicyConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.Comment'),
        outputPath: 'OriginRequestPolicyConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.Comment', props);
    return resource.getResponseField('OriginRequestPolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.Name'),
        outputPath: 'OriginRequestPolicyConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.Name', props);
    return resource.getResponseField('OriginRequestPolicyConfig.Name') as unknown as string;
  }

  public get headersConfig(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigHeadersConfig {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigCookiesConfig {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigQueryStringsConfig {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior'),
        outputPath: 'OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigHeadersConfigHeaders {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity'),
        outputPath: 'OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.HeadersConfig.Headers.Items'),
        outputPath: 'OriginRequestPolicyConfig.HeadersConfig.Headers.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('OriginRequestPolicyConfig.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior'),
        outputPath: 'OriginRequestPolicyConfig.CookiesConfig.CookieBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('OriginRequestPolicyConfig.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigCookiesConfigCookies {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity'),
        outputPath: 'OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items'),
        outputPath: 'OriginRequestPolicyConfig.CookiesConfig.Cookies.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('OriginRequestPolicyConfig.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigQueryStringsConfigQueryStrings {
    return new CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontFetchOriginRequestPolicyConfigOriginRequestPolicyConfigQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetOriginRequestPolicyConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getOriginRequestPolicyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetOriginRequestPolicyConfig.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontFetchPublicKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetPublicKeyRequest) {
    super(scope, id);
  }

  public get publicKey(): CloudFrontFetchPublicKeyPublicKey {
    return new CloudFrontFetchPublicKeyPublicKey(this, 'PublicKey', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchPublicKeyPublicKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetPublicKeyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.PublicKey.Id'),
        outputPath: 'PublicKey.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.PublicKey.Id', props);
    return resource.getResponseField('PublicKey.Id') as unknown as string;
  }

  public get createdTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.PublicKey.CreatedTime'),
        outputPath: 'PublicKey.CreatedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.PublicKey.CreatedTime', props);
    return resource.getResponseField('PublicKey.CreatedTime') as unknown as string;
  }

  public get publicKeyConfig(): CloudFrontFetchPublicKeyPublicKeyPublicKeyConfig {
    return new CloudFrontFetchPublicKeyPublicKeyPublicKeyConfig(this, 'PublicKeyConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchPublicKeyPublicKeyPublicKeyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetPublicKeyRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.PublicKey.PublicKeyConfig.CallerReference'),
        outputPath: 'PublicKey.PublicKeyConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.PublicKey.PublicKeyConfig.CallerReference', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.CallerReference') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.PublicKey.PublicKeyConfig.Name'),
        outputPath: 'PublicKey.PublicKeyConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.PublicKey.PublicKeyConfig.Name', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.Name') as unknown as string;
  }

  public get encodedKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.PublicKey.PublicKeyConfig.EncodedKey'),
        outputPath: 'PublicKey.PublicKeyConfig.EncodedKey',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.PublicKey.PublicKeyConfig.EncodedKey', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.EncodedKey') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKey.PublicKey.PublicKeyConfig.Comment'),
        outputPath: 'PublicKey.PublicKeyConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKey.PublicKey.PublicKeyConfig.Comment', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.Comment') as unknown as string;
  }

}

export class CloudFrontFetchPublicKeyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetPublicKeyConfigRequest) {
    super(scope, id);
  }

  public get publicKeyConfig(): CloudFrontFetchPublicKeyConfigPublicKeyConfig {
    return new CloudFrontFetchPublicKeyConfigPublicKeyConfig(this, 'PublicKeyConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKeyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKeyConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKeyConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchPublicKeyConfigPublicKeyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetPublicKeyConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKeyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKeyConfig.PublicKeyConfig.CallerReference'),
        outputPath: 'PublicKeyConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKeyConfig.PublicKeyConfig.CallerReference', props);
    return resource.getResponseField('PublicKeyConfig.CallerReference') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKeyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKeyConfig.PublicKeyConfig.Name'),
        outputPath: 'PublicKeyConfig.Name',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKeyConfig.PublicKeyConfig.Name', props);
    return resource.getResponseField('PublicKeyConfig.Name') as unknown as string;
  }

  public get encodedKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKeyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKeyConfig.PublicKeyConfig.EncodedKey'),
        outputPath: 'PublicKeyConfig.EncodedKey',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKeyConfig.PublicKeyConfig.EncodedKey', props);
    return resource.getResponseField('PublicKeyConfig.EncodedKey') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPublicKeyConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetPublicKeyConfig.PublicKeyConfig.Comment'),
        outputPath: 'PublicKeyConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPublicKeyConfig.PublicKeyConfig.Comment', props);
    return resource.getResponseField('PublicKeyConfig.Comment') as unknown as string;
  }

}

export class CloudFrontFetchRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get realtimeLogConfig(): CloudFrontFetchRealtimeLogConfigRealtimeLogConfig {
    return new CloudFrontFetchRealtimeLogConfigRealtimeLogConfig(this, 'RealtimeLogConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchRealtimeLogConfigRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetRealtimeLogConfig.RealtimeLogConfig.ARN'),
        outputPath: 'RealtimeLogConfig.ARN',
        parameters: {
          Name: this.input.name,
          ARN: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetRealtimeLogConfig.RealtimeLogConfig.ARN', props);
    return resource.getResponseField('RealtimeLogConfig.ARN') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetRealtimeLogConfig.RealtimeLogConfig.Name'),
        outputPath: 'RealtimeLogConfig.Name',
        parameters: {
          Name: this.input.name,
          ARN: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetRealtimeLogConfig.RealtimeLogConfig.Name', props);
    return resource.getResponseField('RealtimeLogConfig.Name') as unknown as string;
  }

  public get samplingRate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetRealtimeLogConfig.RealtimeLogConfig.SamplingRate'),
        outputPath: 'RealtimeLogConfig.SamplingRate',
        parameters: {
          Name: this.input.name,
          ARN: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetRealtimeLogConfig.RealtimeLogConfig.SamplingRate', props);
    return resource.getResponseField('RealtimeLogConfig.SamplingRate') as unknown as number;
  }

  public get endPoints(): shapes.CloudFrontEndPoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetRealtimeLogConfig.RealtimeLogConfig.EndPoints'),
        outputPath: 'RealtimeLogConfig.EndPoints',
        parameters: {
          Name: this.input.name,
          ARN: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetRealtimeLogConfig.RealtimeLogConfig.EndPoints', props);
    return resource.getResponseField('RealtimeLogConfig.EndPoints') as unknown as shapes.CloudFrontEndPoint[];
  }

  public get fields(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetRealtimeLogConfig.RealtimeLogConfig.Fields'),
        outputPath: 'RealtimeLogConfig.Fields',
        parameters: {
          Name: this.input.name,
          ARN: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetRealtimeLogConfig.RealtimeLogConfig.Fields', props);
    return resource.getResponseField('RealtimeLogConfig.Fields') as unknown as string[];
  }

}

export class CloudFrontFetchStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get streamingDistribution(): CloudFrontFetchStreamingDistributionStreamingDistribution {
    return new CloudFrontFetchStreamingDistributionStreamingDistribution(this, 'StreamingDistribution', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.Id'),
        outputPath: 'StreamingDistribution.Id',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.Id', props);
    return resource.getResponseField('StreamingDistribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.ARN'),
        outputPath: 'StreamingDistribution.ARN',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.ARN', props);
    return resource.getResponseField('StreamingDistribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.Status'),
        outputPath: 'StreamingDistribution.Status',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.Status', props);
    return resource.getResponseField('StreamingDistribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.LastModifiedTime'),
        outputPath: 'StreamingDistribution.LastModifiedTime',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.LastModifiedTime', props);
    return resource.getResponseField('StreamingDistribution.LastModifiedTime') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.DomainName'),
        outputPath: 'StreamingDistribution.DomainName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.DomainName', props);
    return resource.getResponseField('StreamingDistribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontFetchStreamingDistributionStreamingDistributionActiveTrustedSigners {
    return new CloudFrontFetchStreamingDistributionStreamingDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get streamingDistributionConfig(): CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfig {
    return new CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfig(this, 'StreamingDistributionConfig', this.__resources, this.input);
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Items'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.CallerReference'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.CallerReference', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.CallerReference') as unknown as string;
  }

  public get s3Origin(): CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin {
    return new CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin(this, 'S3Origin', this.__resources, this.input);
  }

  public get aliases(): CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases {
    return new CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Comment'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Comment', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging {
    return new CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get trustedSigners(): CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners {
    return new CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.PriceClass'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.PriceClass',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.PriceClass', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Enabled') as unknown as boolean;
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName') as unknown as string;
  }

  public get originAccessIdentity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity') as unknown as string;
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Bucket',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Prefix',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontFetchStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontFetchStreamingDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionConfigRequest) {
    super(scope, id);
  }

  public get streamingDistributionConfig(): CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfig {
    return new CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfig(this, 'StreamingDistributionConfig', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.CallerReference'),
        outputPath: 'StreamingDistributionConfig.CallerReference',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.CallerReference', props);
    return resource.getResponseField('StreamingDistributionConfig.CallerReference') as unknown as string;
  }

  public get s3Origin(): CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigS3Origin {
    return new CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigS3Origin(this, 'S3Origin', this.__resources, this.input);
  }

  public get aliases(): CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigAliases {
    return new CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Comment'),
        outputPath: 'StreamingDistributionConfig.Comment',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Comment', props);
    return resource.getResponseField('StreamingDistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigLogging {
    return new CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get trustedSigners(): CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigTrustedSigners {
    return new CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.PriceClass'),
        outputPath: 'StreamingDistributionConfig.PriceClass',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.PriceClass', props);
    return resource.getResponseField('StreamingDistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Enabled'),
        outputPath: 'StreamingDistributionConfig.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Enabled', props);
    return resource.getResponseField('StreamingDistributionConfig.Enabled') as unknown as boolean;
  }

}

export class CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigS3Origin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionConfigRequest) {
    super(scope, id);
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.S3Origin.DomainName'),
        outputPath: 'StreamingDistributionConfig.S3Origin.DomainName',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.S3Origin.DomainName', props);
    return resource.getResponseField('StreamingDistributionConfig.S3Origin.DomainName') as unknown as string;
  }

  public get originAccessIdentity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.S3Origin.OriginAccessIdentity'),
        outputPath: 'StreamingDistributionConfig.S3Origin.OriginAccessIdentity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.S3Origin.OriginAccessIdentity', props);
    return resource.getResponseField('StreamingDistributionConfig.S3Origin.OriginAccessIdentity') as unknown as string;
  }

}

export class CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Aliases.Quantity'),
        outputPath: 'StreamingDistributionConfig.Aliases.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('StreamingDistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Aliases.Items'),
        outputPath: 'StreamingDistributionConfig.Aliases.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Aliases.Items', props);
    return resource.getResponseField('StreamingDistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Logging.Enabled'),
        outputPath: 'StreamingDistributionConfig.Logging.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('StreamingDistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Logging.Bucket'),
        outputPath: 'StreamingDistributionConfig.Logging.Bucket',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('StreamingDistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.Logging.Prefix'),
        outputPath: 'StreamingDistributionConfig.Logging.Prefix',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('StreamingDistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontFetchStreamingDistributionConfigStreamingDistributionConfigTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontGetStreamingDistributionConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.TrustedSigners.Enabled'),
        outputPath: 'StreamingDistributionConfig.TrustedSigners.Enabled',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.TrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistributionConfig.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.TrustedSigners.Quantity'),
        outputPath: 'StreamingDistributionConfig.TrustedSigners.Quantity',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.TrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistributionConfig.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getStreamingDistributionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.GetStreamingDistributionConfig.StreamingDistributionConfig.TrustedSigners.Items'),
        outputPath: 'StreamingDistributionConfig.TrustedSigners.Items',
        parameters: {
          Id: this.input.id,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetStreamingDistributionConfig.StreamingDistributionConfig.TrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistributionConfig.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontListCachePolicies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListCachePoliciesRequest) {
    super(scope, id);
  }

  public get cachePolicyList(): CloudFrontListCachePoliciesCachePolicyList {
    return new CloudFrontListCachePoliciesCachePolicyList(this, 'CachePolicyList', this.__resources, this.input);
  }

}

export class CloudFrontListCachePoliciesCachePolicyList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListCachePoliciesRequest) {
    super(scope, id);
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCachePolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCachePolicies.CachePolicyList.NextMarker'),
        outputPath: 'CachePolicyList.NextMarker',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCachePolicies.CachePolicyList.NextMarker', props);
    return resource.getResponseField('CachePolicyList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCachePolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCachePolicies.CachePolicyList.MaxItems'),
        outputPath: 'CachePolicyList.MaxItems',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCachePolicies.CachePolicyList.MaxItems', props);
    return resource.getResponseField('CachePolicyList.MaxItems') as unknown as number;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCachePolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCachePolicies.CachePolicyList.Quantity'),
        outputPath: 'CachePolicyList.Quantity',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCachePolicies.CachePolicyList.Quantity', props);
    return resource.getResponseField('CachePolicyList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCachePolicySummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCachePolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCachePolicies.CachePolicyList.Items'),
        outputPath: 'CachePolicyList.Items',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCachePolicies.CachePolicyList.Items', props);
    return resource.getResponseField('CachePolicyList.Items') as unknown as shapes.CloudFrontCachePolicySummary[];
  }

}

export class CloudFrontListCloudFrontOriginAccessIdentities extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListCloudFrontOriginAccessIdentitiesRequest) {
    super(scope, id);
  }

  public get cloudFrontOriginAccessIdentityList(): CloudFrontListCloudFrontOriginAccessIdentitiesCloudFrontOriginAccessIdentityList {
    return new CloudFrontListCloudFrontOriginAccessIdentitiesCloudFrontOriginAccessIdentityList(this, 'CloudFrontOriginAccessIdentityList', this.__resources, this.input);
  }

}

export class CloudFrontListCloudFrontOriginAccessIdentitiesCloudFrontOriginAccessIdentityList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListCloudFrontOriginAccessIdentitiesRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCloudFrontOriginAccessIdentities',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.Marker'),
        outputPath: 'CloudFrontOriginAccessIdentityList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.Marker', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCloudFrontOriginAccessIdentities',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.NextMarker'),
        outputPath: 'CloudFrontOriginAccessIdentityList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.NextMarker', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCloudFrontOriginAccessIdentities',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.MaxItems'),
        outputPath: 'CloudFrontOriginAccessIdentityList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.MaxItems', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCloudFrontOriginAccessIdentities',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.IsTruncated'),
        outputPath: 'CloudFrontOriginAccessIdentityList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.IsTruncated', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCloudFrontOriginAccessIdentities',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.Quantity'),
        outputPath: 'CloudFrontOriginAccessIdentityList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.Quantity', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCloudFrontOriginAccessIdentitySummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listCloudFrontOriginAccessIdentities',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.Items'),
        outputPath: 'CloudFrontOriginAccessIdentityList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListCloudFrontOriginAccessIdentities.CloudFrontOriginAccessIdentityList.Items', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentityList.Items') as unknown as shapes.CloudFrontCloudFrontOriginAccessIdentitySummary[];
  }

}

export class CloudFrontListDistributions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsRequest) {
    super(scope, id);
  }

  public get distributionList(): CloudFrontListDistributionsDistributionList {
    return new CloudFrontListDistributionsDistributionList(this, 'DistributionList', this.__resources, this.input);
  }

}

export class CloudFrontListDistributionsDistributionList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributions.DistributionList.Marker'),
        outputPath: 'DistributionList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributions.DistributionList.Marker', props);
    return resource.getResponseField('DistributionList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributions.DistributionList.NextMarker'),
        outputPath: 'DistributionList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributions.DistributionList.NextMarker', props);
    return resource.getResponseField('DistributionList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributions.DistributionList.MaxItems'),
        outputPath: 'DistributionList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributions.DistributionList.MaxItems', props);
    return resource.getResponseField('DistributionList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributions.DistributionList.IsTruncated'),
        outputPath: 'DistributionList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributions.DistributionList.IsTruncated', props);
    return resource.getResponseField('DistributionList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributions.DistributionList.Quantity'),
        outputPath: 'DistributionList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributions.DistributionList.Quantity', props);
    return resource.getResponseField('DistributionList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontDistributionSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributions.DistributionList.Items'),
        outputPath: 'DistributionList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributions.DistributionList.Items', props);
    return resource.getResponseField('DistributionList.Items') as unknown as shapes.CloudFrontDistributionSummary[];
  }

}

export class CloudFrontListDistributionsByCachePolicyId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByCachePolicyIdRequest) {
    super(scope, id);
  }

  public get distributionIdList(): CloudFrontListDistributionsByCachePolicyIdDistributionIdList {
    return new CloudFrontListDistributionsByCachePolicyIdDistributionIdList(this, 'DistributionIdList', this.__resources, this.input);
  }

}

export class CloudFrontListDistributionsByCachePolicyIdDistributionIdList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByCachePolicyIdRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByCachePolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByCachePolicyId.DistributionIdList.Marker'),
        outputPath: 'DistributionIdList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          CachePolicyId: this.input.cachePolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByCachePolicyId.DistributionIdList.Marker', props);
    return resource.getResponseField('DistributionIdList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByCachePolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByCachePolicyId.DistributionIdList.NextMarker'),
        outputPath: 'DistributionIdList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          CachePolicyId: this.input.cachePolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByCachePolicyId.DistributionIdList.NextMarker', props);
    return resource.getResponseField('DistributionIdList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByCachePolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByCachePolicyId.DistributionIdList.MaxItems'),
        outputPath: 'DistributionIdList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          CachePolicyId: this.input.cachePolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByCachePolicyId.DistributionIdList.MaxItems', props);
    return resource.getResponseField('DistributionIdList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByCachePolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByCachePolicyId.DistributionIdList.IsTruncated'),
        outputPath: 'DistributionIdList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          CachePolicyId: this.input.cachePolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByCachePolicyId.DistributionIdList.IsTruncated', props);
    return resource.getResponseField('DistributionIdList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByCachePolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByCachePolicyId.DistributionIdList.Quantity'),
        outputPath: 'DistributionIdList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          CachePolicyId: this.input.cachePolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByCachePolicyId.DistributionIdList.Quantity', props);
    return resource.getResponseField('DistributionIdList.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByCachePolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByCachePolicyId.DistributionIdList.Items'),
        outputPath: 'DistributionIdList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          CachePolicyId: this.input.cachePolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByCachePolicyId.DistributionIdList.Items', props);
    return resource.getResponseField('DistributionIdList.Items') as unknown as string[];
  }

}

export class CloudFrontListDistributionsByKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByKeyGroupRequest) {
    super(scope, id);
  }

  public get distributionIdList(): CloudFrontListDistributionsByKeyGroupDistributionIdList {
    return new CloudFrontListDistributionsByKeyGroupDistributionIdList(this, 'DistributionIdList', this.__resources, this.input);
  }

}

export class CloudFrontListDistributionsByKeyGroupDistributionIdList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByKeyGroupRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByKeyGroup.DistributionIdList.Marker'),
        outputPath: 'DistributionIdList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          KeyGroupId: this.input.keyGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByKeyGroup.DistributionIdList.Marker', props);
    return resource.getResponseField('DistributionIdList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByKeyGroup.DistributionIdList.NextMarker'),
        outputPath: 'DistributionIdList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          KeyGroupId: this.input.keyGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByKeyGroup.DistributionIdList.NextMarker', props);
    return resource.getResponseField('DistributionIdList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByKeyGroup.DistributionIdList.MaxItems'),
        outputPath: 'DistributionIdList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          KeyGroupId: this.input.keyGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByKeyGroup.DistributionIdList.MaxItems', props);
    return resource.getResponseField('DistributionIdList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByKeyGroup.DistributionIdList.IsTruncated'),
        outputPath: 'DistributionIdList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          KeyGroupId: this.input.keyGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByKeyGroup.DistributionIdList.IsTruncated', props);
    return resource.getResponseField('DistributionIdList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByKeyGroup.DistributionIdList.Quantity'),
        outputPath: 'DistributionIdList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          KeyGroupId: this.input.keyGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByKeyGroup.DistributionIdList.Quantity', props);
    return resource.getResponseField('DistributionIdList.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByKeyGroup.DistributionIdList.Items'),
        outputPath: 'DistributionIdList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          KeyGroupId: this.input.keyGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByKeyGroup.DistributionIdList.Items', props);
    return resource.getResponseField('DistributionIdList.Items') as unknown as string[];
  }

}

export class CloudFrontListDistributionsByOriginRequestPolicyId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByOriginRequestPolicyIdRequest) {
    super(scope, id);
  }

  public get distributionIdList(): CloudFrontListDistributionsByOriginRequestPolicyIdDistributionIdList {
    return new CloudFrontListDistributionsByOriginRequestPolicyIdDistributionIdList(this, 'DistributionIdList', this.__resources, this.input);
  }

}

export class CloudFrontListDistributionsByOriginRequestPolicyIdDistributionIdList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByOriginRequestPolicyIdRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByOriginRequestPolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByOriginRequestPolicyId.DistributionIdList.Marker'),
        outputPath: 'DistributionIdList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          OriginRequestPolicyId: this.input.originRequestPolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByOriginRequestPolicyId.DistributionIdList.Marker', props);
    return resource.getResponseField('DistributionIdList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByOriginRequestPolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByOriginRequestPolicyId.DistributionIdList.NextMarker'),
        outputPath: 'DistributionIdList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          OriginRequestPolicyId: this.input.originRequestPolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByOriginRequestPolicyId.DistributionIdList.NextMarker', props);
    return resource.getResponseField('DistributionIdList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByOriginRequestPolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByOriginRequestPolicyId.DistributionIdList.MaxItems'),
        outputPath: 'DistributionIdList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          OriginRequestPolicyId: this.input.originRequestPolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByOriginRequestPolicyId.DistributionIdList.MaxItems', props);
    return resource.getResponseField('DistributionIdList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByOriginRequestPolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByOriginRequestPolicyId.DistributionIdList.IsTruncated'),
        outputPath: 'DistributionIdList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          OriginRequestPolicyId: this.input.originRequestPolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByOriginRequestPolicyId.DistributionIdList.IsTruncated', props);
    return resource.getResponseField('DistributionIdList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByOriginRequestPolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByOriginRequestPolicyId.DistributionIdList.Quantity'),
        outputPath: 'DistributionIdList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          OriginRequestPolicyId: this.input.originRequestPolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByOriginRequestPolicyId.DistributionIdList.Quantity', props);
    return resource.getResponseField('DistributionIdList.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByOriginRequestPolicyId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByOriginRequestPolicyId.DistributionIdList.Items'),
        outputPath: 'DistributionIdList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          OriginRequestPolicyId: this.input.originRequestPolicyId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByOriginRequestPolicyId.DistributionIdList.Items', props);
    return resource.getResponseField('DistributionIdList.Items') as unknown as string[];
  }

}

export class CloudFrontListDistributionsByRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get distributionList(): CloudFrontListDistributionsByRealtimeLogConfigDistributionList {
    return new CloudFrontListDistributionsByRealtimeLogConfigDistributionList(this, 'DistributionList', this.__resources, this.input);
  }

}

export class CloudFrontListDistributionsByRealtimeLogConfigDistributionList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByRealtimeLogConfig.DistributionList.Marker'),
        outputPath: 'DistributionList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          RealtimeLogConfigName: this.input.realtimeLogConfigName,
          RealtimeLogConfigArn: this.input.realtimeLogConfigArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByRealtimeLogConfig.DistributionList.Marker', props);
    return resource.getResponseField('DistributionList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByRealtimeLogConfig.DistributionList.NextMarker'),
        outputPath: 'DistributionList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          RealtimeLogConfigName: this.input.realtimeLogConfigName,
          RealtimeLogConfigArn: this.input.realtimeLogConfigArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByRealtimeLogConfig.DistributionList.NextMarker', props);
    return resource.getResponseField('DistributionList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByRealtimeLogConfig.DistributionList.MaxItems'),
        outputPath: 'DistributionList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          RealtimeLogConfigName: this.input.realtimeLogConfigName,
          RealtimeLogConfigArn: this.input.realtimeLogConfigArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByRealtimeLogConfig.DistributionList.MaxItems', props);
    return resource.getResponseField('DistributionList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByRealtimeLogConfig.DistributionList.IsTruncated'),
        outputPath: 'DistributionList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          RealtimeLogConfigName: this.input.realtimeLogConfigName,
          RealtimeLogConfigArn: this.input.realtimeLogConfigArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByRealtimeLogConfig.DistributionList.IsTruncated', props);
    return resource.getResponseField('DistributionList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByRealtimeLogConfig.DistributionList.Quantity'),
        outputPath: 'DistributionList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          RealtimeLogConfigName: this.input.realtimeLogConfigName,
          RealtimeLogConfigArn: this.input.realtimeLogConfigArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByRealtimeLogConfig.DistributionList.Quantity', props);
    return resource.getResponseField('DistributionList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontDistributionSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByRealtimeLogConfig.DistributionList.Items'),
        outputPath: 'DistributionList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          RealtimeLogConfigName: this.input.realtimeLogConfigName,
          RealtimeLogConfigArn: this.input.realtimeLogConfigArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByRealtimeLogConfig.DistributionList.Items', props);
    return resource.getResponseField('DistributionList.Items') as unknown as shapes.CloudFrontDistributionSummary[];
  }

}

export class CloudFrontListDistributionsByWebAclId extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByWebAclIdRequest) {
    super(scope, id);
  }

  public get distributionList(): CloudFrontListDistributionsByWebAclIdDistributionList {
    return new CloudFrontListDistributionsByWebAclIdDistributionList(this, 'DistributionList', this.__resources, this.input);
  }

}

export class CloudFrontListDistributionsByWebAclIdDistributionList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListDistributionsByWebAclIdRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByWebAclId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByWebACLId.DistributionList.Marker'),
        outputPath: 'DistributionList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          WebACLId: this.input.webAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByWebACLId.DistributionList.Marker', props);
    return resource.getResponseField('DistributionList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByWebAclId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByWebACLId.DistributionList.NextMarker'),
        outputPath: 'DistributionList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          WebACLId: this.input.webAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByWebACLId.DistributionList.NextMarker', props);
    return resource.getResponseField('DistributionList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByWebAclId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByWebACLId.DistributionList.MaxItems'),
        outputPath: 'DistributionList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          WebACLId: this.input.webAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByWebACLId.DistributionList.MaxItems', props);
    return resource.getResponseField('DistributionList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByWebAclId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByWebACLId.DistributionList.IsTruncated'),
        outputPath: 'DistributionList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          WebACLId: this.input.webAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByWebACLId.DistributionList.IsTruncated', props);
    return resource.getResponseField('DistributionList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByWebAclId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByWebACLId.DistributionList.Quantity'),
        outputPath: 'DistributionList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          WebACLId: this.input.webAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByWebACLId.DistributionList.Quantity', props);
    return resource.getResponseField('DistributionList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontDistributionSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDistributionsByWebAclId',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListDistributionsByWebACLId.DistributionList.Items'),
        outputPath: 'DistributionList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
          WebACLId: this.input.webAclId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDistributionsByWebACLId.DistributionList.Items', props);
    return resource.getResponseField('DistributionList.Items') as unknown as shapes.CloudFrontDistributionSummary[];
  }

}

export class CloudFrontListFieldLevelEncryptionConfigs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListFieldLevelEncryptionConfigsRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionList(): CloudFrontListFieldLevelEncryptionConfigsFieldLevelEncryptionList {
    return new CloudFrontListFieldLevelEncryptionConfigsFieldLevelEncryptionList(this, 'FieldLevelEncryptionList', this.__resources, this.input);
  }

}

export class CloudFrontListFieldLevelEncryptionConfigsFieldLevelEncryptionList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListFieldLevelEncryptionConfigsRequest) {
    super(scope, id);
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.NextMarker'),
        outputPath: 'FieldLevelEncryptionList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.NextMarker', props);
    return resource.getResponseField('FieldLevelEncryptionList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.MaxItems'),
        outputPath: 'FieldLevelEncryptionList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.MaxItems', props);
    return resource.getResponseField('FieldLevelEncryptionList.MaxItems') as unknown as number;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.Quantity'),
        outputPath: 'FieldLevelEncryptionList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontFieldLevelEncryptionSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.Items'),
        outputPath: 'FieldLevelEncryptionList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionConfigs.FieldLevelEncryptionList.Items', props);
    return resource.getResponseField('FieldLevelEncryptionList.Items') as unknown as shapes.CloudFrontFieldLevelEncryptionSummary[];
  }

}

export class CloudFrontListFieldLevelEncryptionProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListFieldLevelEncryptionProfilesRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionProfileList(): CloudFrontListFieldLevelEncryptionProfilesFieldLevelEncryptionProfileList {
    return new CloudFrontListFieldLevelEncryptionProfilesFieldLevelEncryptionProfileList(this, 'FieldLevelEncryptionProfileList', this.__resources, this.input);
  }

}

export class CloudFrontListFieldLevelEncryptionProfilesFieldLevelEncryptionProfileList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListFieldLevelEncryptionProfilesRequest) {
    super(scope, id);
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionProfiles',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.NextMarker'),
        outputPath: 'FieldLevelEncryptionProfileList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.NextMarker', props);
    return resource.getResponseField('FieldLevelEncryptionProfileList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionProfiles',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.MaxItems'),
        outputPath: 'FieldLevelEncryptionProfileList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.MaxItems', props);
    return resource.getResponseField('FieldLevelEncryptionProfileList.MaxItems') as unknown as number;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionProfiles',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.Quantity'),
        outputPath: 'FieldLevelEncryptionProfileList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionProfileList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontFieldLevelEncryptionProfileSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listFieldLevelEncryptionProfiles',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.Items'),
        outputPath: 'FieldLevelEncryptionProfileList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListFieldLevelEncryptionProfiles.FieldLevelEncryptionProfileList.Items', props);
    return resource.getResponseField('FieldLevelEncryptionProfileList.Items') as unknown as shapes.CloudFrontFieldLevelEncryptionProfileSummary[];
  }

}

export class CloudFrontListInvalidations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListInvalidationsRequest) {
    super(scope, id);
  }

  public get invalidationList(): CloudFrontListInvalidationsInvalidationList {
    return new CloudFrontListInvalidationsInvalidationList(this, 'InvalidationList', this.__resources, this.input);
  }

}

export class CloudFrontListInvalidationsInvalidationList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListInvalidationsRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInvalidations',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListInvalidations.InvalidationList.Marker'),
        outputPath: 'InvalidationList.Marker',
        parameters: {
          DistributionId: this.input.distributionId,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListInvalidations.InvalidationList.Marker', props);
    return resource.getResponseField('InvalidationList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInvalidations',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListInvalidations.InvalidationList.NextMarker'),
        outputPath: 'InvalidationList.NextMarker',
        parameters: {
          DistributionId: this.input.distributionId,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListInvalidations.InvalidationList.NextMarker', props);
    return resource.getResponseField('InvalidationList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInvalidations',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListInvalidations.InvalidationList.MaxItems'),
        outputPath: 'InvalidationList.MaxItems',
        parameters: {
          DistributionId: this.input.distributionId,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListInvalidations.InvalidationList.MaxItems', props);
    return resource.getResponseField('InvalidationList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInvalidations',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListInvalidations.InvalidationList.IsTruncated'),
        outputPath: 'InvalidationList.IsTruncated',
        parameters: {
          DistributionId: this.input.distributionId,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListInvalidations.InvalidationList.IsTruncated', props);
    return resource.getResponseField('InvalidationList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInvalidations',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListInvalidations.InvalidationList.Quantity'),
        outputPath: 'InvalidationList.Quantity',
        parameters: {
          DistributionId: this.input.distributionId,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListInvalidations.InvalidationList.Quantity', props);
    return resource.getResponseField('InvalidationList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontInvalidationSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInvalidations',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListInvalidations.InvalidationList.Items'),
        outputPath: 'InvalidationList.Items',
        parameters: {
          DistributionId: this.input.distributionId,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListInvalidations.InvalidationList.Items', props);
    return resource.getResponseField('InvalidationList.Items') as unknown as shapes.CloudFrontInvalidationSummary[];
  }

}

export class CloudFrontListKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListKeyGroupsRequest) {
    super(scope, id);
  }

  public get keyGroupList(): CloudFrontListKeyGroupsKeyGroupList {
    return new CloudFrontListKeyGroupsKeyGroupList(this, 'KeyGroupList', this.__resources, this.input);
  }

}

export class CloudFrontListKeyGroupsKeyGroupList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListKeyGroupsRequest) {
    super(scope, id);
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listKeyGroups',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListKeyGroups.KeyGroupList.NextMarker'),
        outputPath: 'KeyGroupList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListKeyGroups.KeyGroupList.NextMarker', props);
    return resource.getResponseField('KeyGroupList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listKeyGroups',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListKeyGroups.KeyGroupList.MaxItems'),
        outputPath: 'KeyGroupList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListKeyGroups.KeyGroupList.MaxItems', props);
    return resource.getResponseField('KeyGroupList.MaxItems') as unknown as number;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listKeyGroups',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListKeyGroups.KeyGroupList.Quantity'),
        outputPath: 'KeyGroupList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListKeyGroups.KeyGroupList.Quantity', props);
    return resource.getResponseField('KeyGroupList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontKeyGroupSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listKeyGroups',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListKeyGroups.KeyGroupList.Items'),
        outputPath: 'KeyGroupList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListKeyGroups.KeyGroupList.Items', props);
    return resource.getResponseField('KeyGroupList.Items') as unknown as shapes.CloudFrontKeyGroupSummary[];
  }

}

export class CloudFrontListOriginRequestPolicies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListOriginRequestPoliciesRequest) {
    super(scope, id);
  }

  public get originRequestPolicyList(): CloudFrontListOriginRequestPoliciesOriginRequestPolicyList {
    return new CloudFrontListOriginRequestPoliciesOriginRequestPolicyList(this, 'OriginRequestPolicyList', this.__resources, this.input);
  }

}

export class CloudFrontListOriginRequestPoliciesOriginRequestPolicyList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListOriginRequestPoliciesRequest) {
    super(scope, id);
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOriginRequestPolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListOriginRequestPolicies.OriginRequestPolicyList.NextMarker'),
        outputPath: 'OriginRequestPolicyList.NextMarker',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListOriginRequestPolicies.OriginRequestPolicyList.NextMarker', props);
    return resource.getResponseField('OriginRequestPolicyList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOriginRequestPolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListOriginRequestPolicies.OriginRequestPolicyList.MaxItems'),
        outputPath: 'OriginRequestPolicyList.MaxItems',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListOriginRequestPolicies.OriginRequestPolicyList.MaxItems', props);
    return resource.getResponseField('OriginRequestPolicyList.MaxItems') as unknown as number;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOriginRequestPolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListOriginRequestPolicies.OriginRequestPolicyList.Quantity'),
        outputPath: 'OriginRequestPolicyList.Quantity',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListOriginRequestPolicies.OriginRequestPolicyList.Quantity', props);
    return resource.getResponseField('OriginRequestPolicyList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOriginRequestPolicySummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOriginRequestPolicies',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListOriginRequestPolicies.OriginRequestPolicyList.Items'),
        outputPath: 'OriginRequestPolicyList.Items',
        parameters: {
          Type: this.input.type,
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListOriginRequestPolicies.OriginRequestPolicyList.Items', props);
    return resource.getResponseField('OriginRequestPolicyList.Items') as unknown as shapes.CloudFrontOriginRequestPolicySummary[];
  }

}

export class CloudFrontListPublicKeys extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListPublicKeysRequest) {
    super(scope, id);
  }

  public get publicKeyList(): CloudFrontListPublicKeysPublicKeyList {
    return new CloudFrontListPublicKeysPublicKeyList(this, 'PublicKeyList', this.__resources, this.input);
  }

}

export class CloudFrontListPublicKeysPublicKeyList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListPublicKeysRequest) {
    super(scope, id);
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPublicKeys',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListPublicKeys.PublicKeyList.NextMarker'),
        outputPath: 'PublicKeyList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPublicKeys.PublicKeyList.NextMarker', props);
    return resource.getResponseField('PublicKeyList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPublicKeys',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListPublicKeys.PublicKeyList.MaxItems'),
        outputPath: 'PublicKeyList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPublicKeys.PublicKeyList.MaxItems', props);
    return resource.getResponseField('PublicKeyList.MaxItems') as unknown as number;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPublicKeys',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListPublicKeys.PublicKeyList.Quantity'),
        outputPath: 'PublicKeyList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPublicKeys.PublicKeyList.Quantity', props);
    return resource.getResponseField('PublicKeyList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontPublicKeySummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPublicKeys',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListPublicKeys.PublicKeyList.Items'),
        outputPath: 'PublicKeyList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPublicKeys.PublicKeyList.Items', props);
    return resource.getResponseField('PublicKeyList.Items') as unknown as shapes.CloudFrontPublicKeySummary[];
  }

}

export class CloudFrontListRealtimeLogConfigs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListRealtimeLogConfigsRequest) {
    super(scope, id);
  }

  public get realtimeLogConfigs(): CloudFrontListRealtimeLogConfigsRealtimeLogConfigs {
    return new CloudFrontListRealtimeLogConfigsRealtimeLogConfigs(this, 'RealtimeLogConfigs', this.__resources, this.input);
  }

}

export class CloudFrontListRealtimeLogConfigsRealtimeLogConfigs extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListRealtimeLogConfigsRequest) {
    super(scope, id);
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listRealtimeLogConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListRealtimeLogConfigs.RealtimeLogConfigs.MaxItems'),
        outputPath: 'RealtimeLogConfigs.MaxItems',
        parameters: {
          MaxItems: this.input.maxItems,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListRealtimeLogConfigs.RealtimeLogConfigs.MaxItems', props);
    return resource.getResponseField('RealtimeLogConfigs.MaxItems') as unknown as number;
  }

  public get items(): shapes.CloudFrontRealtimeLogConfig[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listRealtimeLogConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListRealtimeLogConfigs.RealtimeLogConfigs.Items'),
        outputPath: 'RealtimeLogConfigs.Items',
        parameters: {
          MaxItems: this.input.maxItems,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListRealtimeLogConfigs.RealtimeLogConfigs.Items', props);
    return resource.getResponseField('RealtimeLogConfigs.Items') as unknown as shapes.CloudFrontRealtimeLogConfig[];
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listRealtimeLogConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListRealtimeLogConfigs.RealtimeLogConfigs.IsTruncated'),
        outputPath: 'RealtimeLogConfigs.IsTruncated',
        parameters: {
          MaxItems: this.input.maxItems,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListRealtimeLogConfigs.RealtimeLogConfigs.IsTruncated', props);
    return resource.getResponseField('RealtimeLogConfigs.IsTruncated') as unknown as boolean;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listRealtimeLogConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListRealtimeLogConfigs.RealtimeLogConfigs.Marker'),
        outputPath: 'RealtimeLogConfigs.Marker',
        parameters: {
          MaxItems: this.input.maxItems,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListRealtimeLogConfigs.RealtimeLogConfigs.Marker', props);
    return resource.getResponseField('RealtimeLogConfigs.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listRealtimeLogConfigs',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListRealtimeLogConfigs.RealtimeLogConfigs.NextMarker'),
        outputPath: 'RealtimeLogConfigs.NextMarker',
        parameters: {
          MaxItems: this.input.maxItems,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListRealtimeLogConfigs.RealtimeLogConfigs.NextMarker', props);
    return resource.getResponseField('RealtimeLogConfigs.NextMarker') as unknown as string;
  }

}

export class CloudFrontListStreamingDistributions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListStreamingDistributionsRequest) {
    super(scope, id);
  }

  public get streamingDistributionList(): CloudFrontListStreamingDistributionsStreamingDistributionList {
    return new CloudFrontListStreamingDistributionsStreamingDistributionList(this, 'StreamingDistributionList', this.__resources, this.input);
  }

}

export class CloudFrontListStreamingDistributionsStreamingDistributionList extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListStreamingDistributionsRequest) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listStreamingDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListStreamingDistributions.StreamingDistributionList.Marker'),
        outputPath: 'StreamingDistributionList.Marker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListStreamingDistributions.StreamingDistributionList.Marker', props);
    return resource.getResponseField('StreamingDistributionList.Marker') as unknown as string;
  }

  public get nextMarker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listStreamingDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListStreamingDistributions.StreamingDistributionList.NextMarker'),
        outputPath: 'StreamingDistributionList.NextMarker',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListStreamingDistributions.StreamingDistributionList.NextMarker', props);
    return resource.getResponseField('StreamingDistributionList.NextMarker') as unknown as string;
  }

  public get maxItems(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listStreamingDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListStreamingDistributions.StreamingDistributionList.MaxItems'),
        outputPath: 'StreamingDistributionList.MaxItems',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListStreamingDistributions.StreamingDistributionList.MaxItems', props);
    return resource.getResponseField('StreamingDistributionList.MaxItems') as unknown as number;
  }

  public get isTruncated(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listStreamingDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListStreamingDistributions.StreamingDistributionList.IsTruncated'),
        outputPath: 'StreamingDistributionList.IsTruncated',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListStreamingDistributions.StreamingDistributionList.IsTruncated', props);
    return resource.getResponseField('StreamingDistributionList.IsTruncated') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listStreamingDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListStreamingDistributions.StreamingDistributionList.Quantity'),
        outputPath: 'StreamingDistributionList.Quantity',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListStreamingDistributions.StreamingDistributionList.Quantity', props);
    return resource.getResponseField('StreamingDistributionList.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontStreamingDistributionSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listStreamingDistributions',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListStreamingDistributions.StreamingDistributionList.Items'),
        outputPath: 'StreamingDistributionList.Items',
        parameters: {
          Marker: this.input.marker,
          MaxItems: this.input.maxItems,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListStreamingDistributions.StreamingDistributionList.Items', props);
    return resource.getResponseField('StreamingDistributionList.Items') as unknown as shapes.CloudFrontStreamingDistributionSummary[];
  }

}

export class CloudFrontListTagsForResource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListTagsForResourceRequest) {
    super(scope, id);
  }

  public get tags(): CloudFrontListTagsForResourceTags {
    return new CloudFrontListTagsForResourceTags(this, 'Tags', this.__resources, this.input);
  }

}

export class CloudFrontListTagsForResourceTags extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontListTagsForResourceRequest) {
    super(scope, id);
  }

  public get items(): shapes.CloudFrontTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTagsForResource',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.ListTagsForResource.Tags.Items'),
        outputPath: 'Tags.Items',
        parameters: {
          Resource: this.input.resource,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTagsForResource.Tags.Items', props);
    return resource.getResponseField('Tags.Items') as unknown as shapes.CloudFrontTag[];
  }

}

export class CloudFrontUpdateCachePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get cachePolicy(): CloudFrontUpdateCachePolicyCachePolicy {
    return new CloudFrontUpdateCachePolicyCachePolicy(this, 'CachePolicy', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.ETag'),
        outputPath: 'ETag',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateCachePolicyCachePolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.Id'),
        outputPath: 'CachePolicy.Id',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.Id', props);
    return resource.getResponseField('CachePolicy.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.LastModifiedTime'),
        outputPath: 'CachePolicy.LastModifiedTime',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.LastModifiedTime', props);
    return resource.getResponseField('CachePolicy.LastModifiedTime') as unknown as string;
  }

  public get cachePolicyConfig(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfig {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfig(this, 'CachePolicyConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.Comment'),
        outputPath: 'CachePolicy.CachePolicyConfig.Comment',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.Comment', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.Name'),
        outputPath: 'CachePolicy.CachePolicyConfig.Name',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.Name', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.Name') as unknown as string;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.DefaultTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.DefaultTTL',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.DefaultTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.MaxTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.MaxTTL',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.MaxTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.MaxTTL') as unknown as number;
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.MinTTL'),
        outputPath: 'CachePolicy.CachePolicyConfig.MinTTL',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.MinTTL', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.MinTTL') as unknown as number;
  }

  public get parametersInCacheKeyAndForwardedToOrigin(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(this, 'ParametersInCacheKeyAndForwardedToOrigin', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get enableAcceptEncodingGzip(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingGzip') as unknown as boolean;
  }

  public get enableAcceptEncodingBrotli(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.EnableAcceptEncodingBrotli') as unknown as boolean;
  }

  public get headersConfig(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings {
    return new CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCachePolicyCachePolicyCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCachePolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCachePolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          CachePolicyConfig: {
            Comment: this.input.cachePolicyConfig.comment,
            Name: this.input.cachePolicyConfig.name,
            DefaultTTL: this.input.cachePolicyConfig.defaultTtl,
            MaxTTL: this.input.cachePolicyConfig.maxTtl,
            MinTTL: this.input.cachePolicyConfig.minTtl,
            ParametersInCacheKeyAndForwardedToOrigin: {
              EnableAcceptEncodingGzip: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingGzip,
              EnableAcceptEncodingBrotli: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.enableAcceptEncodingBrotli,
              HeadersConfig: {
                HeaderBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headerBehavior,
                Headers: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.headersConfig.headers?.items,
                },
              },
              CookiesConfig: {
                CookieBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookieBehavior,
                Cookies: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.cookiesConfig.cookies?.items,
                },
              },
              QueryStringsConfig: {
                QueryStringBehavior: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStringBehavior,
                QueryStrings: {
                  Quantity: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.quantity,
                  Items: this.input.cachePolicyConfig.parametersInCacheKeyAndForwardedToOrigin?.queryStringsConfig.queryStrings?.items,
                },
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCachePolicy.CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('CachePolicy.CachePolicyConfig.ParametersInCacheKeyAndForwardedToOrigin.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateCloudFrontOriginAccessIdentity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get cloudFrontOriginAccessIdentity(): CloudFrontUpdateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity {
    return new CloudFrontUpdateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity(this, 'CloudFrontOriginAccessIdentity', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCloudFrontOriginAccessIdentity.ETag'),
        outputPath: 'ETag',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCloudFrontOriginAccessIdentity.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.Id'),
        outputPath: 'CloudFrontOriginAccessIdentity.Id',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.Id', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.Id') as unknown as string;
  }

  public get s3CanonicalUserId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.S3CanonicalUserId'),
        outputPath: 'CloudFrontOriginAccessIdentity.S3CanonicalUserId',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.S3CanonicalUserId', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.S3CanonicalUserId') as unknown as string;
  }

  public get cloudFrontOriginAccessIdentityConfig(): CloudFrontUpdateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig {
    return new CloudFrontUpdateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig(this, 'CloudFrontOriginAccessIdentityConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityCloudFrontOriginAccessIdentityConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateCloudFrontOriginAccessIdentityRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference'),
        outputPath: 'CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateCloudFrontOriginAccessIdentity',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment'),
        outputPath: 'CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment',
        parameters: {
          CloudFrontOriginAccessIdentityConfig: {
            CallerReference: this.input.cloudFrontOriginAccessIdentityConfig.callerReference,
            Comment: this.input.cloudFrontOriginAccessIdentityConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateCloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment', props);
    return resource.getResponseField('CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig.Comment') as unknown as string;
  }

}

export class CloudFrontUpdateDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get distribution(): CloudFrontUpdateDistributionDistribution {
    return new CloudFrontUpdateDistributionDistribution(this, 'Distribution', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.ETag'),
        outputPath: 'ETag',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateDistributionDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.Id'),
        outputPath: 'Distribution.Id',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.Id', props);
    return resource.getResponseField('Distribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ARN'),
        outputPath: 'Distribution.ARN',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ARN', props);
    return resource.getResponseField('Distribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.Status'),
        outputPath: 'Distribution.Status',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.Status', props);
    return resource.getResponseField('Distribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.LastModifiedTime'),
        outputPath: 'Distribution.LastModifiedTime',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.LastModifiedTime', props);
    return resource.getResponseField('Distribution.LastModifiedTime') as unknown as string;
  }

  public get inProgressInvalidationBatches(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.InProgressInvalidationBatches'),
        outputPath: 'Distribution.InProgressInvalidationBatches',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.InProgressInvalidationBatches', props);
    return resource.getResponseField('Distribution.InProgressInvalidationBatches') as unknown as number;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DomainName'),
        outputPath: 'Distribution.DomainName',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DomainName', props);
    return resource.getResponseField('Distribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontUpdateDistributionDistributionActiveTrustedSigners {
    return new CloudFrontUpdateDistributionDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get activeTrustedKeyGroups(): CloudFrontUpdateDistributionDistributionActiveTrustedKeyGroups {
    return new CloudFrontUpdateDistributionDistributionActiveTrustedKeyGroups(this, 'ActiveTrustedKeyGroups', this.__resources, this.input);
  }

  public get distributionConfig(): CloudFrontUpdateDistributionDistributionDistributionConfig {
    return new CloudFrontUpdateDistributionDistributionDistributionConfig(this, 'DistributionConfig', this.__resources, this.input);
  }

  public get aliasIcpRecordals(): shapes.CloudFrontAliasIcpRecordal[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.AliasICPRecordals'),
        outputPath: 'Distribution.AliasICPRecordals',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.AliasICPRecordals', props);
    return resource.getResponseField('Distribution.AliasICPRecordals') as unknown as shapes.CloudFrontAliasIcpRecordal[];
  }

}

export class CloudFrontUpdateDistributionDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'Distribution.ActiveTrustedSigners.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'Distribution.ActiveTrustedSigners.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ActiveTrustedSigners.Items'),
        outputPath: 'Distribution.ActiveTrustedSigners.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontUpdateDistributionDistributionActiveTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ActiveTrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ActiveTrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ActiveTrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ActiveTrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontKgKeyPairIds[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.ActiveTrustedKeyGroups.Items'),
        outputPath: 'Distribution.ActiveTrustedKeyGroups.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.ActiveTrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.ActiveTrustedKeyGroups.Items') as unknown as shapes.CloudFrontKgKeyPairIds[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.CallerReference'),
        outputPath: 'Distribution.DistributionConfig.CallerReference',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.CallerReference', props);
    return resource.getResponseField('Distribution.DistributionConfig.CallerReference') as unknown as string;
  }

  public get aliases(): CloudFrontUpdateDistributionDistributionDistributionConfigAliases {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get defaultRootObject(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultRootObject'),
        outputPath: 'Distribution.DistributionConfig.DefaultRootObject',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultRootObject', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultRootObject') as unknown as string;
  }

  public get origins(): CloudFrontUpdateDistributionDistributionDistributionConfigOrigins {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigOrigins(this, 'Origins', this.__resources, this.input);
  }

  public get originGroups(): CloudFrontUpdateDistributionDistributionDistributionConfigOriginGroups {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigOriginGroups(this, 'OriginGroups', this.__resources, this.input);
  }

  public get defaultCacheBehavior(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehavior {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehavior(this, 'DefaultCacheBehavior', this.__resources, this.input);
  }

  public get cacheBehaviors(): CloudFrontUpdateDistributionDistributionDistributionConfigCacheBehaviors {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigCacheBehaviors(this, 'CacheBehaviors', this.__resources, this.input);
  }

  public get customErrorResponses(): CloudFrontUpdateDistributionDistributionDistributionConfigCustomErrorResponses {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigCustomErrorResponses(this, 'CustomErrorResponses', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Comment'),
        outputPath: 'Distribution.DistributionConfig.Comment',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Comment', props);
    return resource.getResponseField('Distribution.DistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontUpdateDistributionDistributionDistributionConfigLogging {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.PriceClass'),
        outputPath: 'Distribution.DistributionConfig.PriceClass',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.PriceClass', props);
    return resource.getResponseField('Distribution.DistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Enabled') as unknown as boolean;
  }

  public get viewerCertificate(): CloudFrontUpdateDistributionDistributionDistributionConfigViewerCertificate {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigViewerCertificate(this, 'ViewerCertificate', this.__resources, this.input);
  }

  public get restrictions(): CloudFrontUpdateDistributionDistributionDistributionConfigRestrictions {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigRestrictions(this, 'Restrictions', this.__resources, this.input);
  }

  public get webAclId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.WebACLId'),
        outputPath: 'Distribution.DistributionConfig.WebACLId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.WebACLId', props);
    return resource.getResponseField('Distribution.DistributionConfig.WebACLId') as unknown as string;
  }

  public get httpVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.HttpVersion'),
        outputPath: 'Distribution.DistributionConfig.HttpVersion',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.HttpVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.HttpVersion') as unknown as string;
  }

  public get isIpv6Enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.IsIPV6Enabled'),
        outputPath: 'Distribution.DistributionConfig.IsIPV6Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.IsIPV6Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.IsIPV6Enabled') as unknown as boolean;
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Aliases.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Aliases.Items'),
        outputPath: 'Distribution.DistributionConfig.Aliases.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Aliases.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigOrigins extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Origins.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Origins.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Origins.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOrigin[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Origins.Items'),
        outputPath: 'Distribution.DistributionConfig.Origins.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Origins.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Origins.Items') as unknown as shapes.CloudFrontOrigin[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigOriginGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.OriginGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.OriginGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontOriginGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.OriginGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.OriginGroups.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.OriginGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.OriginGroups.Items') as unknown as shapes.CloudFrontOriginGroup[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehavior extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get targetOriginId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId') as unknown as string;
  }

  public get trustedSigners(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get trustedKeyGroups(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(this, 'TrustedKeyGroups', this.__resources, this.input);
  }

  public get viewerProtocolPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy') as unknown as string;
  }

  public get allowedMethods(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods(this, 'AllowedMethods', this.__resources, this.input);
  }

  public get smoothStreaming(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming') as unknown as boolean;
  }

  public get compress(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.Compress'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.Compress',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.Compress', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.Compress') as unknown as boolean;
  }

  public get lambdaFunctionAssociations(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(this, 'LambdaFunctionAssociations', this.__resources, this.input);
  }

  public get fieldLevelEncryptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId') as unknown as string;
  }

  public get realtimeLogConfigArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn') as unknown as string;
  }

  public get cachePolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId') as unknown as string;
  }

  public get originRequestPolicyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId') as unknown as string;
  }

  public get forwardedValues(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues(this, 'ForwardedValues', this.__resources, this.input);
  }

  public get minTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL') as unknown as number;
  }

  public get defaultTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL') as unknown as number;
  }

  public get maxTtl(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL') as unknown as number;
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorTrustedKeyGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items') as unknown as string[];
  }

  public get cachedMethods(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(this, 'CachedMethods', this.__resources, this.input);
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontLambdaFunctionAssociation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items') as unknown as shapes.CloudFrontLambdaFunctionAssociation[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get queryString(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString') as unknown as boolean;
  }

  public get cookies(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(this, 'Cookies', this.__resources, this.input);
  }

  public get headers(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(this, 'Headers', this.__resources, this.input);
  }

  public get queryStringCacheKeys(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(this, 'QueryStringCacheKeys', this.__resources, this.input);
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get forward(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward') as unknown as string;
  }

  public get whitelistedNames(): CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(this, 'WhitelistedNames', this.__resources, this.input);
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items'),
        outputPath: 'Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigCacheBehaviors extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.CacheBehaviors.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.CacheBehaviors.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCacheBehavior[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.CacheBehaviors.Items'),
        outputPath: 'Distribution.DistributionConfig.CacheBehaviors.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.CacheBehaviors.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CacheBehaviors.Items') as unknown as shapes.CloudFrontCacheBehavior[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigCustomErrorResponses extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Quantity'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontCustomErrorResponse[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Items'),
        outputPath: 'Distribution.DistributionConfig.CustomErrorResponses.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.CustomErrorResponses.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.CustomErrorResponses.Items') as unknown as shapes.CloudFrontCustomErrorResponse[];
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Logging.Enabled'),
        outputPath: 'Distribution.DistributionConfig.Logging.Enabled',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get includeCookies(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Logging.IncludeCookies'),
        outputPath: 'Distribution.DistributionConfig.Logging.IncludeCookies',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Logging.IncludeCookies', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.IncludeCookies') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Logging.Bucket'),
        outputPath: 'Distribution.DistributionConfig.Logging.Bucket',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Logging.Prefix'),
        outputPath: 'Distribution.DistributionConfig.Logging.Prefix',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('Distribution.DistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigViewerCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get cloudFrontDefaultCertificate(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate') as unknown as boolean;
  }

  public get iamCertificateId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId') as unknown as string;
  }

  public get acmCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn') as unknown as string;
  }

  public get sslSupportMethod(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod') as unknown as string;
  }

  public get minimumProtocolVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion') as unknown as string;
  }

  public get certificate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.Certificate'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.Certificate',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.Certificate', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.Certificate') as unknown as string;
  }

  public get certificateSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.CertificateSource'),
        outputPath: 'Distribution.DistributionConfig.ViewerCertificate.CertificateSource',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.ViewerCertificate.CertificateSource', props);
    return resource.getResponseField('Distribution.DistributionConfig.ViewerCertificate.CertificateSource') as unknown as string;
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigRestrictions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get geoRestriction(): CloudFrontUpdateDistributionDistributionDistributionConfigRestrictionsGeoRestriction {
    return new CloudFrontUpdateDistributionDistributionDistributionConfigRestrictionsGeoRestriction(this, 'GeoRestriction', this.__resources, this.input);
  }

}

export class CloudFrontUpdateDistributionDistributionDistributionConfigRestrictionsGeoRestriction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateDistributionRequest) {
    super(scope, id);
  }

  public get restrictionType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType') as unknown as string;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items'),
        outputPath: 'Distribution.DistributionConfig.Restrictions.GeoRestriction.Items',
        parameters: {
          DistributionConfig: {
            CallerReference: this.input.distributionConfig.callerReference,
            Aliases: {
              Quantity: this.input.distributionConfig.aliases?.quantity,
              Items: this.input.distributionConfig.aliases?.items,
            },
            DefaultRootObject: this.input.distributionConfig.defaultRootObject,
            Origins: {
              Quantity: this.input.distributionConfig.origins.quantity,
              Items: this.input.distributionConfig.origins.items,
            },
            OriginGroups: {
              Quantity: this.input.distributionConfig.originGroups?.quantity,
              Items: this.input.distributionConfig.originGroups?.items,
            },
            DefaultCacheBehavior: {
              TargetOriginId: this.input.distributionConfig.defaultCacheBehavior.targetOriginId,
              TrustedSigners: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedSigners?.items,
              },
              TrustedKeyGroups: {
                Enabled: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.enabled,
                Quantity: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.trustedKeyGroups?.items,
              },
              ViewerProtocolPolicy: this.input.distributionConfig.defaultCacheBehavior.viewerProtocolPolicy,
              AllowedMethods: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.items,
                CachedMethods: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.allowedMethods?.cachedMethods?.items,
                },
              },
              SmoothStreaming: this.input.distributionConfig.defaultCacheBehavior.smoothStreaming,
              Compress: this.input.distributionConfig.defaultCacheBehavior.compress,
              LambdaFunctionAssociations: {
                Quantity: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.quantity,
                Items: this.input.distributionConfig.defaultCacheBehavior.lambdaFunctionAssociations?.items,
              },
              FieldLevelEncryptionId: this.input.distributionConfig.defaultCacheBehavior.fieldLevelEncryptionId,
              RealtimeLogConfigArn: this.input.distributionConfig.defaultCacheBehavior.realtimeLogConfigArn,
              CachePolicyId: this.input.distributionConfig.defaultCacheBehavior.cachePolicyId,
              OriginRequestPolicyId: this.input.distributionConfig.defaultCacheBehavior.originRequestPolicyId,
              ForwardedValues: {
                QueryString: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryString,
                Cookies: {
                  Forward: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.forward,
                  WhitelistedNames: {
                    Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.quantity,
                    Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.cookies.whitelistedNames?.items,
                  },
                },
                Headers: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.headers?.items,
                },
                QueryStringCacheKeys: {
                  Quantity: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.quantity,
                  Items: this.input.distributionConfig.defaultCacheBehavior.forwardedValues?.queryStringCacheKeys?.items,
                },
              },
              MinTTL: this.input.distributionConfig.defaultCacheBehavior.minTtl,
              DefaultTTL: this.input.distributionConfig.defaultCacheBehavior.defaultTtl,
              MaxTTL: this.input.distributionConfig.defaultCacheBehavior.maxTtl,
            },
            CacheBehaviors: {
              Quantity: this.input.distributionConfig.cacheBehaviors?.quantity,
              Items: this.input.distributionConfig.cacheBehaviors?.items,
            },
            CustomErrorResponses: {
              Quantity: this.input.distributionConfig.customErrorResponses?.quantity,
              Items: this.input.distributionConfig.customErrorResponses?.items,
            },
            Comment: this.input.distributionConfig.comment,
            Logging: {
              Enabled: this.input.distributionConfig.logging?.enabled,
              IncludeCookies: this.input.distributionConfig.logging?.includeCookies,
              Bucket: this.input.distributionConfig.logging?.bucket,
              Prefix: this.input.distributionConfig.logging?.prefix,
            },
            PriceClass: this.input.distributionConfig.priceClass,
            Enabled: this.input.distributionConfig.enabled,
            ViewerCertificate: {
              CloudFrontDefaultCertificate: this.input.distributionConfig.viewerCertificate?.cloudFrontDefaultCertificate,
              IAMCertificateId: this.input.distributionConfig.viewerCertificate?.iamCertificateId,
              ACMCertificateArn: this.input.distributionConfig.viewerCertificate?.acmCertificateArn,
              SSLSupportMethod: this.input.distributionConfig.viewerCertificate?.sslSupportMethod,
              MinimumProtocolVersion: this.input.distributionConfig.viewerCertificate?.minimumProtocolVersion,
              Certificate: this.input.distributionConfig.viewerCertificate?.certificate,
              CertificateSource: this.input.distributionConfig.viewerCertificate?.certificateSource,
            },
            Restrictions: {
              GeoRestriction: {
                RestrictionType: this.input.distributionConfig.restrictions?.geoRestriction.restrictionType,
                Quantity: this.input.distributionConfig.restrictions?.geoRestriction.quantity,
                Items: this.input.distributionConfig.restrictions?.geoRestriction.items,
              },
            },
            WebACLId: this.input.distributionConfig.webAclId,
            HttpVersion: this.input.distributionConfig.httpVersion,
            IsIPV6Enabled: this.input.distributionConfig.isIpv6Enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateDistribution.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items', props);
    return resource.getResponseField('Distribution.DistributionConfig.Restrictions.GeoRestriction.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryption(): CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryption {
    return new CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryption(this, 'FieldLevelEncryption', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.ETag'),
        outputPath: 'ETag',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryption extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.Id'),
        outputPath: 'FieldLevelEncryption.Id',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.Id', props);
    return resource.getResponseField('FieldLevelEncryption.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.LastModifiedTime'),
        outputPath: 'FieldLevelEncryption.LastModifiedTime',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.LastModifiedTime', props);
    return resource.getResponseField('FieldLevelEncryption.LastModifiedTime') as unknown as string;
  }

  public get fieldLevelEncryptionConfig(): CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfig {
    return new CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfig(this, 'FieldLevelEncryptionConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.Comment'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.Comment',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.Comment') as unknown as string;
  }

  public get queryArgProfileConfig(): CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig {
    return new CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig(this, 'QueryArgProfileConfig', this.__resources, this.input);
  }

  public get contentTypeProfileConfig(): CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig {
    return new CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig(this, 'ContentTypeProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get forwardWhenQueryArgProfileIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.ForwardWhenQueryArgProfileIsUnknown') as unknown as boolean;
  }

  public get queryArgProfiles(): CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles {
    return new CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles(this, 'QueryArgProfiles', this.__resources, this.input);
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontQueryArgProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.QueryArgProfileConfig.QueryArgProfiles.Items') as unknown as shapes.CloudFrontQueryArgProfile[];
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get forwardWhenContentTypeIsUnknown(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ForwardWhenContentTypeIsUnknown') as unknown as boolean;
  }

  public get contentTypeProfiles(): CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles {
    return new CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles(this, 'ContentTypeProfiles', this.__resources, this.input);
  }

}

export class CloudFrontUpdateFieldLevelEncryptionConfigFieldLevelEncryptionFieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionConfigRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontContentTypeProfile[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items'),
        outputPath: 'FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items',
        parameters: {
          FieldLevelEncryptionConfig: {
            CallerReference: this.input.fieldLevelEncryptionConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionConfig.comment,
            QueryArgProfileConfig: {
              ForwardWhenQueryArgProfileIsUnknown: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.forwardWhenQueryArgProfileIsUnknown,
              QueryArgProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.queryArgProfileConfig?.queryArgProfiles?.items,
              },
            },
            ContentTypeProfileConfig: {
              ForwardWhenContentTypeIsUnknown: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.forwardWhenContentTypeIsUnknown,
              ContentTypeProfiles: {
                Quantity: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.quantity,
                Items: this.input.fieldLevelEncryptionConfig.contentTypeProfileConfig?.contentTypeProfiles?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionConfig.FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items', props);
    return resource.getResponseField('FieldLevelEncryption.FieldLevelEncryptionConfig.ContentTypeProfileConfig.ContentTypeProfiles.Items') as unknown as shapes.CloudFrontContentTypeProfile[];
  }

}

export class CloudFrontUpdateFieldLevelEncryptionProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get fieldLevelEncryptionProfile(): CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfile {
    return new CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfile(this, 'FieldLevelEncryptionProfile', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.ETag'),
        outputPath: 'ETag',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfile extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.Id'),
        outputPath: 'FieldLevelEncryptionProfile.Id',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.Id', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.LastModifiedTime'),
        outputPath: 'FieldLevelEncryptionProfile.LastModifiedTime',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.LastModifiedTime', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.LastModifiedTime') as unknown as string;
  }

  public get fieldLevelEncryptionProfileConfig(): CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig {
    return new CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig(this, 'FieldLevelEncryptionProfileConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Name') as unknown as string;
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.CallerReference') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.Comment') as unknown as string;
  }

  public get encryptionEntities(): CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities {
    return new CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities(this, 'EncryptionEntities', this.__resources, this.input);
  }

}

export class CloudFrontUpdateFieldLevelEncryptionProfileFieldLevelEncryptionProfileFieldLevelEncryptionProfileConfigEncryptionEntities extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateFieldLevelEncryptionProfileRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontEncryptionEntity[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateFieldLevelEncryptionProfile',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items'),
        outputPath: 'FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items',
        parameters: {
          FieldLevelEncryptionProfileConfig: {
            Name: this.input.fieldLevelEncryptionProfileConfig.name,
            CallerReference: this.input.fieldLevelEncryptionProfileConfig.callerReference,
            Comment: this.input.fieldLevelEncryptionProfileConfig.comment,
            EncryptionEntities: {
              Quantity: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.quantity,
              Items: this.input.fieldLevelEncryptionProfileConfig.encryptionEntities.items,
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateFieldLevelEncryptionProfile.FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items', props);
    return resource.getResponseField('FieldLevelEncryptionProfile.FieldLevelEncryptionProfileConfig.EncryptionEntities.Items') as unknown as shapes.CloudFrontEncryptionEntity[];
  }

}

export class CloudFrontUpdateKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateKeyGroupRequest) {
    super(scope, id);
  }

  public get keyGroup(): CloudFrontUpdateKeyGroupKeyGroup {
    return new CloudFrontUpdateKeyGroupKeyGroup(this, 'KeyGroup', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateKeyGroup.ETag'),
        outputPath: 'ETag',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateKeyGroup.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateKeyGroupKeyGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateKeyGroupRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateKeyGroup.KeyGroup.Id'),
        outputPath: 'KeyGroup.Id',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateKeyGroup.KeyGroup.Id', props);
    return resource.getResponseField('KeyGroup.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateKeyGroup.KeyGroup.LastModifiedTime'),
        outputPath: 'KeyGroup.LastModifiedTime',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateKeyGroup.KeyGroup.LastModifiedTime', props);
    return resource.getResponseField('KeyGroup.LastModifiedTime') as unknown as string;
  }

  public get keyGroupConfig(): CloudFrontUpdateKeyGroupKeyGroupKeyGroupConfig {
    return new CloudFrontUpdateKeyGroupKeyGroupKeyGroupConfig(this, 'KeyGroupConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateKeyGroupKeyGroupKeyGroupConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateKeyGroupRequest) {
    super(scope, id);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateKeyGroup.KeyGroup.KeyGroupConfig.Name'),
        outputPath: 'KeyGroup.KeyGroupConfig.Name',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateKeyGroup.KeyGroup.KeyGroupConfig.Name', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Name') as unknown as string;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateKeyGroup.KeyGroup.KeyGroupConfig.Items'),
        outputPath: 'KeyGroup.KeyGroupConfig.Items',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateKeyGroup.KeyGroup.KeyGroupConfig.Items', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Items') as unknown as string[];
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateKeyGroup',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateKeyGroup.KeyGroup.KeyGroupConfig.Comment'),
        outputPath: 'KeyGroup.KeyGroupConfig.Comment',
        parameters: {
          KeyGroupConfig: {
            Name: this.input.keyGroupConfig.name,
            Items: this.input.keyGroupConfig.items,
            Comment: this.input.keyGroupConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateKeyGroup.KeyGroup.KeyGroupConfig.Comment', props);
    return resource.getResponseField('KeyGroup.KeyGroupConfig.Comment') as unknown as string;
  }

}

export class CloudFrontUpdateOriginRequestPolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get originRequestPolicy(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicy {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicy(this, 'OriginRequestPolicy', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.ETag'),
        outputPath: 'ETag',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.Id'),
        outputPath: 'OriginRequestPolicy.Id',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.Id', props);
    return resource.getResponseField('OriginRequestPolicy.Id') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.LastModifiedTime'),
        outputPath: 'OriginRequestPolicy.LastModifiedTime',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.LastModifiedTime', props);
    return resource.getResponseField('OriginRequestPolicy.LastModifiedTime') as unknown as string;
  }

  public get originRequestPolicyConfig(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig(this, 'OriginRequestPolicyConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Comment'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.Comment',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Comment', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.Comment') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Name'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.Name',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.Name', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.Name') as unknown as string;
  }

  public get headersConfig(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig(this, 'HeadersConfig', this.__resources, this.input);
  }

  public get cookiesConfig(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig(this, 'CookiesConfig', this.__resources, this.input);
  }

  public get queryStringsConfig(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig(this, 'QueryStringsConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get headerBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.HeaderBehavior') as unknown as string;
  }

  public get headers(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders(this, 'Headers', this.__resources, this.input);
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigHeadersConfigHeaders extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.HeadersConfig.Headers.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get cookieBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.CookieBehavior') as unknown as string;
  }

  public get cookies(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies(this, 'Cookies', this.__resources, this.input);
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigCookiesConfigCookies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.CookiesConfig.Cookies.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get queryStringBehavior(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStringBehavior') as unknown as string;
  }

  public get queryStrings(): CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings {
    return new CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings(this, 'QueryStrings', this.__resources, this.input);
  }

}

export class CloudFrontUpdateOriginRequestPolicyOriginRequestPolicyOriginRequestPolicyConfigQueryStringsConfigQueryStrings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateOriginRequestPolicyRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateOriginRequestPolicy',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items'),
        outputPath: 'OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items',
        parameters: {
          OriginRequestPolicyConfig: {
            Comment: this.input.originRequestPolicyConfig.comment,
            Name: this.input.originRequestPolicyConfig.name,
            HeadersConfig: {
              HeaderBehavior: this.input.originRequestPolicyConfig.headersConfig.headerBehavior,
              Headers: {
                Quantity: this.input.originRequestPolicyConfig.headersConfig.headers?.quantity,
                Items: this.input.originRequestPolicyConfig.headersConfig.headers?.items,
              },
            },
            CookiesConfig: {
              CookieBehavior: this.input.originRequestPolicyConfig.cookiesConfig.cookieBehavior,
              Cookies: {
                Quantity: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.quantity,
                Items: this.input.originRequestPolicyConfig.cookiesConfig.cookies?.items,
              },
            },
            QueryStringsConfig: {
              QueryStringBehavior: this.input.originRequestPolicyConfig.queryStringsConfig.queryStringBehavior,
              QueryStrings: {
                Quantity: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.quantity,
                Items: this.input.originRequestPolicyConfig.queryStringsConfig.queryStrings?.items,
              },
            },
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateOriginRequestPolicy.OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items', props);
    return resource.getResponseField('OriginRequestPolicy.OriginRequestPolicyConfig.QueryStringsConfig.QueryStrings.Items') as unknown as string[];
  }

}

export class CloudFrontUpdatePublicKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdatePublicKeyRequest) {
    super(scope, id);
  }

  public get publicKey(): CloudFrontUpdatePublicKeyPublicKey {
    return new CloudFrontUpdatePublicKeyPublicKey(this, 'PublicKey', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.ETag'),
        outputPath: 'ETag',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdatePublicKeyPublicKey extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdatePublicKeyRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.PublicKey.Id'),
        outputPath: 'PublicKey.Id',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.PublicKey.Id', props);
    return resource.getResponseField('PublicKey.Id') as unknown as string;
  }

  public get createdTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.PublicKey.CreatedTime'),
        outputPath: 'PublicKey.CreatedTime',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.PublicKey.CreatedTime', props);
    return resource.getResponseField('PublicKey.CreatedTime') as unknown as string;
  }

  public get publicKeyConfig(): CloudFrontUpdatePublicKeyPublicKeyPublicKeyConfig {
    return new CloudFrontUpdatePublicKeyPublicKeyPublicKeyConfig(this, 'PublicKeyConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdatePublicKeyPublicKeyPublicKeyConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdatePublicKeyRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.PublicKey.PublicKeyConfig.CallerReference'),
        outputPath: 'PublicKey.PublicKeyConfig.CallerReference',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.PublicKey.PublicKeyConfig.CallerReference', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.CallerReference') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.PublicKey.PublicKeyConfig.Name'),
        outputPath: 'PublicKey.PublicKeyConfig.Name',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.PublicKey.PublicKeyConfig.Name', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.Name') as unknown as string;
  }

  public get encodedKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.PublicKey.PublicKeyConfig.EncodedKey'),
        outputPath: 'PublicKey.PublicKeyConfig.EncodedKey',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.PublicKey.PublicKeyConfig.EncodedKey', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.EncodedKey') as unknown as string;
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePublicKey',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdatePublicKey.PublicKey.PublicKeyConfig.Comment'),
        outputPath: 'PublicKey.PublicKeyConfig.Comment',
        parameters: {
          PublicKeyConfig: {
            CallerReference: this.input.publicKeyConfig.callerReference,
            Name: this.input.publicKeyConfig.name,
            EncodedKey: this.input.publicKeyConfig.encodedKey,
            Comment: this.input.publicKeyConfig.comment,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePublicKey.PublicKey.PublicKeyConfig.Comment', props);
    return resource.getResponseField('PublicKey.PublicKeyConfig.Comment') as unknown as string;
  }

}

export class CloudFrontUpdateRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get realtimeLogConfig(): CloudFrontUpdateRealtimeLogConfigRealtimeLogConfig {
    return new CloudFrontUpdateRealtimeLogConfigRealtimeLogConfig(this, 'RealtimeLogConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateRealtimeLogConfigRealtimeLogConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateRealtimeLogConfigRequest) {
    super(scope, id);
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateRealtimeLogConfig.RealtimeLogConfig.ARN'),
        outputPath: 'RealtimeLogConfig.ARN',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          ARN: this.input.arn,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateRealtimeLogConfig.RealtimeLogConfig.ARN', props);
    return resource.getResponseField('RealtimeLogConfig.ARN') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateRealtimeLogConfig.RealtimeLogConfig.Name'),
        outputPath: 'RealtimeLogConfig.Name',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          ARN: this.input.arn,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateRealtimeLogConfig.RealtimeLogConfig.Name', props);
    return resource.getResponseField('RealtimeLogConfig.Name') as unknown as string;
  }

  public get samplingRate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateRealtimeLogConfig.RealtimeLogConfig.SamplingRate'),
        outputPath: 'RealtimeLogConfig.SamplingRate',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          ARN: this.input.arn,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateRealtimeLogConfig.RealtimeLogConfig.SamplingRate', props);
    return resource.getResponseField('RealtimeLogConfig.SamplingRate') as unknown as number;
  }

  public get endPoints(): shapes.CloudFrontEndPoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateRealtimeLogConfig.RealtimeLogConfig.EndPoints'),
        outputPath: 'RealtimeLogConfig.EndPoints',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          ARN: this.input.arn,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateRealtimeLogConfig.RealtimeLogConfig.EndPoints', props);
    return resource.getResponseField('RealtimeLogConfig.EndPoints') as unknown as shapes.CloudFrontEndPoint[];
  }

  public get fields(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateRealtimeLogConfig',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateRealtimeLogConfig.RealtimeLogConfig.Fields'),
        outputPath: 'RealtimeLogConfig.Fields',
        parameters: {
          EndPoints: this.input.endPoints,
          Fields: this.input.fields,
          Name: this.input.name,
          ARN: this.input.arn,
          SamplingRate: this.input.samplingRate,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateRealtimeLogConfig.RealtimeLogConfig.Fields', props);
    return resource.getResponseField('RealtimeLogConfig.Fields') as unknown as string[];
  }

}

export class CloudFrontUpdateStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get streamingDistribution(): CloudFrontUpdateStreamingDistributionStreamingDistribution {
    return new CloudFrontUpdateStreamingDistributionStreamingDistribution(this, 'StreamingDistribution', this.__resources, this.input);
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.ETag'),
        outputPath: 'ETag',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistribution extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.Id'),
        outputPath: 'StreamingDistribution.Id',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.Id', props);
    return resource.getResponseField('StreamingDistribution.Id') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.ARN'),
        outputPath: 'StreamingDistribution.ARN',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.ARN', props);
    return resource.getResponseField('StreamingDistribution.ARN') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.Status'),
        outputPath: 'StreamingDistribution.Status',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.Status', props);
    return resource.getResponseField('StreamingDistribution.Status') as unknown as string;
  }

  public get lastModifiedTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.LastModifiedTime'),
        outputPath: 'StreamingDistribution.LastModifiedTime',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.LastModifiedTime', props);
    return resource.getResponseField('StreamingDistribution.LastModifiedTime') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.DomainName'),
        outputPath: 'StreamingDistribution.DomainName',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.DomainName', props);
    return resource.getResponseField('StreamingDistribution.DomainName') as unknown as string;
  }

  public get activeTrustedSigners(): CloudFrontUpdateStreamingDistributionStreamingDistributionActiveTrustedSigners {
    return new CloudFrontUpdateStreamingDistributionStreamingDistributionActiveTrustedSigners(this, 'ActiveTrustedSigners', this.__resources, this.input);
  }

  public get streamingDistributionConfig(): CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfig {
    return new CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfig(this, 'StreamingDistributionConfig', this.__resources, this.input);
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistributionActiveTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Quantity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Quantity') as unknown as number;
  }

  public get items(): shapes.CloudFrontSigner[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Items'),
        outputPath: 'StreamingDistribution.ActiveTrustedSigners.Items',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.ActiveTrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.ActiveTrustedSigners.Items') as unknown as shapes.CloudFrontSigner[];
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get callerReference(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.CallerReference'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.CallerReference',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.CallerReference', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.CallerReference') as unknown as string;
  }

  public get s3Origin(): CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin {
    return new CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin(this, 'S3Origin', this.__resources, this.input);
  }

  public get aliases(): CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases {
    return new CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases(this, 'Aliases', this.__resources, this.input);
  }

  public get comment(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Comment'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Comment',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Comment', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Comment') as unknown as string;
  }

  public get logging(): CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging {
    return new CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging(this, 'Logging', this.__resources, this.input);
  }

  public get trustedSigners(): CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners {
    return new CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners(this, 'TrustedSigners', this.__resources, this.input);
  }

  public get priceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.PriceClass'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.PriceClass',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.PriceClass', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.PriceClass') as unknown as string;
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Enabled') as unknown as boolean;
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigS3Origin extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.DomainName') as unknown as string;
  }

  public get originAccessIdentity(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.S3Origin.OriginAccessIdentity') as unknown as string;
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigAliases extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Aliases.Items',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Aliases.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Aliases.Items') as unknown as string[];
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigLogging extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Enabled') as unknown as boolean;
  }

  public get bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Bucket',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Bucket', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Bucket') as unknown as string;
  }

  public get prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.Logging.Prefix',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.Logging.Prefix', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.Logging.Prefix') as unknown as string;
  }

}

export class CloudFrontUpdateStreamingDistributionStreamingDistributionStreamingDistributionConfigTrustedSigners extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.CloudFrontUpdateStreamingDistributionRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Enabled') as unknown as boolean;
  }

  public get quantity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Quantity') as unknown as number;
  }

  public get items(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateStreamingDistribution',
        service: 'CloudFront',
        physicalResourceId: cr.PhysicalResourceId.of('CloudFront.UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items'),
        outputPath: 'StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items',
        parameters: {
          StreamingDistributionConfig: {
            CallerReference: this.input.streamingDistributionConfig.callerReference,
            S3Origin: {
              DomainName: this.input.streamingDistributionConfig.s3Origin.domainName,
              OriginAccessIdentity: this.input.streamingDistributionConfig.s3Origin.originAccessIdentity,
            },
            Aliases: {
              Quantity: this.input.streamingDistributionConfig.aliases?.quantity,
              Items: this.input.streamingDistributionConfig.aliases?.items,
            },
            Comment: this.input.streamingDistributionConfig.comment,
            Logging: {
              Enabled: this.input.streamingDistributionConfig.logging?.enabled,
              Bucket: this.input.streamingDistributionConfig.logging?.bucket,
              Prefix: this.input.streamingDistributionConfig.logging?.prefix,
            },
            TrustedSigners: {
              Enabled: this.input.streamingDistributionConfig.trustedSigners.enabled,
              Quantity: this.input.streamingDistributionConfig.trustedSigners.quantity,
              Items: this.input.streamingDistributionConfig.trustedSigners.items,
            },
            PriceClass: this.input.streamingDistributionConfig.priceClass,
            Enabled: this.input.streamingDistributionConfig.enabled,
          },
          Id: this.input.id,
          IfMatch: this.input.ifMatch,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateStreamingDistribution.StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items', props);
    return resource.getResponseField('StreamingDistribution.StreamingDistributionConfig.TrustedSigners.Items') as unknown as string[];
  }

}

