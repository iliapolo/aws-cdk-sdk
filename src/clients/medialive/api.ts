import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class MediaLiveClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptInputDeviceTransfer(input: shapes.MediaLiveAcceptInputDeviceTransferRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInputDeviceTransfer',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.AcceptInputDeviceTransfer'),
        parameters: {
          InputDeviceId: input.inputDeviceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AcceptInputDeviceTransfer', props);
  }

  public batchDelete(input: shapes.MediaLiveBatchDeleteRequest): MediaLiveResponsesBatchDelete {
    return new MediaLiveResponsesBatchDelete(this, this.__resources, input);
  }

  public batchStart(input: shapes.MediaLiveBatchStartRequest): MediaLiveResponsesBatchStart {
    return new MediaLiveResponsesBatchStart(this, this.__resources, input);
  }

  public batchStop(input: shapes.MediaLiveBatchStopRequest): MediaLiveResponsesBatchStop {
    return new MediaLiveResponsesBatchStop(this, this.__resources, input);
  }

  public batchUpdateSchedule(input: shapes.MediaLiveBatchUpdateScheduleRequest): MediaLiveResponsesBatchUpdateSchedule {
    return new MediaLiveResponsesBatchUpdateSchedule(this, this.__resources, input);
  }

  public cancelInputDeviceTransfer(input: shapes.MediaLiveCancelInputDeviceTransferRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelInputDeviceTransfer',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CancelInputDeviceTransfer'),
        parameters: {
          InputDeviceId: input.inputDeviceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CancelInputDeviceTransfer', props);
  }

  public createChannel(input: shapes.MediaLiveCreateChannelRequest): MediaLiveResponsesCreateChannel {
    return new MediaLiveResponsesCreateChannel(this, this.__resources, input);
  }

  public createInput(input: shapes.MediaLiveCreateInputRequest): MediaLiveResponsesCreateInput {
    return new MediaLiveResponsesCreateInput(this, this.__resources, input);
  }

  public createInputSecurityGroup(input: shapes.MediaLiveCreateInputSecurityGroupRequest): MediaLiveResponsesCreateInputSecurityGroup {
    return new MediaLiveResponsesCreateInputSecurityGroup(this, this.__resources, input);
  }

  public createMultiplex(input: shapes.MediaLiveCreateMultiplexRequest): MediaLiveResponsesCreateMultiplex {
    return new MediaLiveResponsesCreateMultiplex(this, this.__resources, input);
  }

  public createMultiplexProgram(input: shapes.MediaLiveCreateMultiplexProgramRequest): MediaLiveResponsesCreateMultiplexProgram {
    return new MediaLiveResponsesCreateMultiplexProgram(this, this.__resources, input);
  }

  public createTags(input: shapes.MediaLiveCreateTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createTags',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateTags'),
        parameters: {
          ResourceArn: input.resourceArn,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'CreateTags', props);
  }

  public deleteChannel(input: shapes.MediaLiveDeleteChannelRequest): MediaLiveResponsesDeleteChannel {
    return new MediaLiveResponsesDeleteChannel(this, this.__resources, input);
  }

  public deleteInput(input: shapes.MediaLiveDeleteInputRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteInput'),
        parameters: {
          InputId: input.inputId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteInput', props);
  }

  public deleteInputSecurityGroup(input: shapes.MediaLiveDeleteInputSecurityGroupRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteInputSecurityGroup'),
        parameters: {
          InputSecurityGroupId: input.inputSecurityGroupId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteInputSecurityGroup', props);
  }

  public deleteMultiplex(input: shapes.MediaLiveDeleteMultiplexRequest): MediaLiveResponsesDeleteMultiplex {
    return new MediaLiveResponsesDeleteMultiplex(this, this.__resources, input);
  }

  public deleteMultiplexProgram(input: shapes.MediaLiveDeleteMultiplexProgramRequest): MediaLiveResponsesDeleteMultiplexProgram {
    return new MediaLiveResponsesDeleteMultiplexProgram(this, this.__resources, input);
  }

  public deleteReservation(input: shapes.MediaLiveDeleteReservationRequest): MediaLiveResponsesDeleteReservation {
    return new MediaLiveResponsesDeleteReservation(this, this.__resources, input);
  }

  public deleteSchedule(input: shapes.MediaLiveDeleteScheduleRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteSchedule',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteSchedule'),
        parameters: {
          ChannelId: input.channelId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteSchedule', props);
  }

  public deleteTags(input: shapes.MediaLiveDeleteTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteTags',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteTags'),
        parameters: {
          ResourceArn: input.resourceArn,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteTags', props);
  }

  public describeChannel(input: shapes.MediaLiveDescribeChannelRequest): MediaLiveResponsesDescribeChannel {
    return new MediaLiveResponsesDescribeChannel(this, this.__resources, input);
  }

  public describeInput(input: shapes.MediaLiveDescribeInputRequest): MediaLiveResponsesDescribeInput {
    return new MediaLiveResponsesDescribeInput(this, this.__resources, input);
  }

  public describeInputDevice(input: shapes.MediaLiveDescribeInputDeviceRequest): MediaLiveResponsesDescribeInputDevice {
    return new MediaLiveResponsesDescribeInputDevice(this, this.__resources, input);
  }

  public describeInputDeviceThumbnail(input: shapes.MediaLiveDescribeInputDeviceThumbnailRequest): MediaLiveResponsesDescribeInputDeviceThumbnail {
    return new MediaLiveResponsesDescribeInputDeviceThumbnail(this, this.__resources, input);
  }

  public describeInputSecurityGroup(input: shapes.MediaLiveDescribeInputSecurityGroupRequest): MediaLiveResponsesDescribeInputSecurityGroup {
    return new MediaLiveResponsesDescribeInputSecurityGroup(this, this.__resources, input);
  }

  public describeMultiplex(input: shapes.MediaLiveDescribeMultiplexRequest): MediaLiveResponsesDescribeMultiplex {
    return new MediaLiveResponsesDescribeMultiplex(this, this.__resources, input);
  }

  public describeMultiplexProgram(input: shapes.MediaLiveDescribeMultiplexProgramRequest): MediaLiveResponsesDescribeMultiplexProgram {
    return new MediaLiveResponsesDescribeMultiplexProgram(this, this.__resources, input);
  }

  public describeOffering(input: shapes.MediaLiveDescribeOfferingRequest): MediaLiveResponsesDescribeOffering {
    return new MediaLiveResponsesDescribeOffering(this, this.__resources, input);
  }

  public describeReservation(input: shapes.MediaLiveDescribeReservationRequest): MediaLiveResponsesDescribeReservation {
    return new MediaLiveResponsesDescribeReservation(this, this.__resources, input);
  }

  public describeSchedule(input: shapes.MediaLiveDescribeScheduleRequest): MediaLiveResponsesDescribeSchedule {
    return new MediaLiveResponsesDescribeSchedule(this, this.__resources, input);
  }

  public listChannels(input: shapes.MediaLiveListChannelsRequest): MediaLiveResponsesListChannels {
    return new MediaLiveResponsesListChannels(this, this.__resources, input);
  }

  public listInputDeviceTransfers(input: shapes.MediaLiveListInputDeviceTransfersRequest): MediaLiveResponsesListInputDeviceTransfers {
    return new MediaLiveResponsesListInputDeviceTransfers(this, this.__resources, input);
  }

  public listInputDevices(input: shapes.MediaLiveListInputDevicesRequest): MediaLiveResponsesListInputDevices {
    return new MediaLiveResponsesListInputDevices(this, this.__resources, input);
  }

  public listInputSecurityGroups(input: shapes.MediaLiveListInputSecurityGroupsRequest): MediaLiveResponsesListInputSecurityGroups {
    return new MediaLiveResponsesListInputSecurityGroups(this, this.__resources, input);
  }

  public listInputs(input: shapes.MediaLiveListInputsRequest): MediaLiveResponsesListInputs {
    return new MediaLiveResponsesListInputs(this, this.__resources, input);
  }

  public listMultiplexPrograms(input: shapes.MediaLiveListMultiplexProgramsRequest): MediaLiveResponsesListMultiplexPrograms {
    return new MediaLiveResponsesListMultiplexPrograms(this, this.__resources, input);
  }

  public listMultiplexes(input: shapes.MediaLiveListMultiplexesRequest): MediaLiveResponsesListMultiplexes {
    return new MediaLiveResponsesListMultiplexes(this, this.__resources, input);
  }

  public listOfferings(input: shapes.MediaLiveListOfferingsRequest): MediaLiveResponsesListOfferings {
    return new MediaLiveResponsesListOfferings(this, this.__resources, input);
  }

  public listReservations(input: shapes.MediaLiveListReservationsRequest): MediaLiveResponsesListReservations {
    return new MediaLiveResponsesListReservations(this, this.__resources, input);
  }

  public listTagsForResource(input: shapes.MediaLiveListTagsForResourceRequest): MediaLiveResponsesListTagsForResource {
    return new MediaLiveResponsesListTagsForResource(this, this.__resources, input);
  }

  public purchaseOffering(input: shapes.MediaLivePurchaseOfferingRequest): MediaLiveResponsesPurchaseOffering {
    return new MediaLiveResponsesPurchaseOffering(this, this.__resources, input);
  }

  public rejectInputDeviceTransfer(input: shapes.MediaLiveRejectInputDeviceTransferRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInputDeviceTransfer',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.RejectInputDeviceTransfer'),
        parameters: {
          InputDeviceId: input.inputDeviceId,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RejectInputDeviceTransfer', props);
  }

  public startChannel(input: shapes.MediaLiveStartChannelRequest): MediaLiveResponsesStartChannel {
    return new MediaLiveResponsesStartChannel(this, this.__resources, input);
  }

  public startMultiplex(input: shapes.MediaLiveStartMultiplexRequest): MediaLiveResponsesStartMultiplex {
    return new MediaLiveResponsesStartMultiplex(this, this.__resources, input);
  }

  public stopChannel(input: shapes.MediaLiveStopChannelRequest): MediaLiveResponsesStopChannel {
    return new MediaLiveResponsesStopChannel(this, this.__resources, input);
  }

  public stopMultiplex(input: shapes.MediaLiveStopMultiplexRequest): MediaLiveResponsesStopMultiplex {
    return new MediaLiveResponsesStopMultiplex(this, this.__resources, input);
  }

  public transferInputDevice(input: shapes.MediaLiveTransferInputDeviceRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'transferInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.TransferInputDevice'),
        parameters: {
          InputDeviceId: input.inputDeviceId,
          TargetCustomerId: input.targetCustomerId,
          TransferMessage: input.transferMessage,
        },
      },
    };
    new cr.AwsCustomResource(this, 'TransferInputDevice', props);
  }

  public updateChannel(input: shapes.MediaLiveUpdateChannelRequest): MediaLiveResponsesUpdateChannel {
    return new MediaLiveResponsesUpdateChannel(this, this.__resources, input);
  }

  public updateChannelClass(input: shapes.MediaLiveUpdateChannelClassRequest): MediaLiveResponsesUpdateChannelClass {
    return new MediaLiveResponsesUpdateChannelClass(this, this.__resources, input);
  }

  public updateInput(input: shapes.MediaLiveUpdateInputRequest): MediaLiveResponsesUpdateInput {
    return new MediaLiveResponsesUpdateInput(this, this.__resources, input);
  }

  public updateInputDevice(input: shapes.MediaLiveUpdateInputDeviceRequest): MediaLiveResponsesUpdateInputDevice {
    return new MediaLiveResponsesUpdateInputDevice(this, this.__resources, input);
  }

  public updateInputSecurityGroup(input: shapes.MediaLiveUpdateInputSecurityGroupRequest): MediaLiveResponsesUpdateInputSecurityGroup {
    return new MediaLiveResponsesUpdateInputSecurityGroup(this, this.__resources, input);
  }

  public updateMultiplex(input: shapes.MediaLiveUpdateMultiplexRequest): MediaLiveResponsesUpdateMultiplex {
    return new MediaLiveResponsesUpdateMultiplex(this, this.__resources, input);
  }

  public updateMultiplexProgram(input: shapes.MediaLiveUpdateMultiplexProgramRequest): MediaLiveResponsesUpdateMultiplexProgram {
    return new MediaLiveResponsesUpdateMultiplexProgram(this, this.__resources, input);
  }

  public updateReservation(input: shapes.MediaLiveUpdateReservationRequest): MediaLiveResponsesUpdateReservation {
    return new MediaLiveResponsesUpdateReservation(this, this.__resources, input);
  }

}

export class MediaLiveResponsesBatchDelete {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveBatchDeleteRequest) {
  }

  public get failed(): shapes.MediaLiveBatchFailedResultModel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDelete',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchDelete.Failed'),
        outputPath: 'Failed',
        parameters: {
          ChannelIds: this.__input.channelIds,
          InputIds: this.__input.inputIds,
          InputSecurityGroupIds: this.__input.inputSecurityGroupIds,
          MultiplexIds: this.__input.multiplexIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchDelete.Failed', props);
    return resource.getResponseField('Failed') as unknown as shapes.MediaLiveBatchFailedResultModel[];
  }

  public get successful(): shapes.MediaLiveBatchSuccessfulResultModel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchDelete',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchDelete.Successful'),
        outputPath: 'Successful',
        parameters: {
          ChannelIds: this.__input.channelIds,
          InputIds: this.__input.inputIds,
          InputSecurityGroupIds: this.__input.inputSecurityGroupIds,
          MultiplexIds: this.__input.multiplexIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchDelete.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.MediaLiveBatchSuccessfulResultModel[];
  }

}

export class MediaLiveResponsesBatchStart {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveBatchStartRequest) {
  }

  public get failed(): shapes.MediaLiveBatchFailedResultModel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchStart',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchStart.Failed'),
        outputPath: 'Failed',
        parameters: {
          ChannelIds: this.__input.channelIds,
          MultiplexIds: this.__input.multiplexIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchStart.Failed', props);
    return resource.getResponseField('Failed') as unknown as shapes.MediaLiveBatchFailedResultModel[];
  }

  public get successful(): shapes.MediaLiveBatchSuccessfulResultModel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchStart',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchStart.Successful'),
        outputPath: 'Successful',
        parameters: {
          ChannelIds: this.__input.channelIds,
          MultiplexIds: this.__input.multiplexIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchStart.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.MediaLiveBatchSuccessfulResultModel[];
  }

}

export class MediaLiveResponsesBatchStop {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveBatchStopRequest) {
  }

  public get failed(): shapes.MediaLiveBatchFailedResultModel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchStop',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchStop.Failed'),
        outputPath: 'Failed',
        parameters: {
          ChannelIds: this.__input.channelIds,
          MultiplexIds: this.__input.multiplexIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchStop.Failed', props);
    return resource.getResponseField('Failed') as unknown as shapes.MediaLiveBatchFailedResultModel[];
  }

  public get successful(): shapes.MediaLiveBatchSuccessfulResultModel[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchStop',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchStop.Successful'),
        outputPath: 'Successful',
        parameters: {
          ChannelIds: this.__input.channelIds,
          MultiplexIds: this.__input.multiplexIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchStop.Successful', props);
    return resource.getResponseField('Successful') as unknown as shapes.MediaLiveBatchSuccessfulResultModel[];
  }

}

export class MediaLiveResponsesBatchUpdateSchedule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveBatchUpdateScheduleRequest) {
  }

  public get creates(): MediaLiveResponsesBatchUpdateScheduleCreates {
    return new MediaLiveResponsesBatchUpdateScheduleCreates(this.__scope, this.__resources, this.__input);
  }

  public get deletes(): MediaLiveResponsesBatchUpdateScheduleDeletes {
    return new MediaLiveResponsesBatchUpdateScheduleDeletes(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesBatchUpdateScheduleCreates {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveBatchUpdateScheduleRequest) {
  }

  public get scheduleActions(): shapes.MediaLiveScheduleAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchUpdateSchedule',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchUpdateSchedule.Creates.ScheduleActions'),
        outputPath: 'Creates.ScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
          Creates: {
            ScheduleActions: this.__input.creates?.scheduleActions,
          },
          Deletes: {
            ActionNames: this.__input.deletes?.actionNames,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchUpdateSchedule.Creates.ScheduleActions', props);
    return resource.getResponseField('Creates.ScheduleActions') as unknown as shapes.MediaLiveScheduleAction[];
  }

}

export class MediaLiveResponsesBatchUpdateScheduleDeletes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveBatchUpdateScheduleRequest) {
  }

  public get scheduleActions(): shapes.MediaLiveScheduleAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'batchUpdateSchedule',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.BatchUpdateSchedule.Deletes.ScheduleActions'),
        outputPath: 'Deletes.ScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
          Creates: {
            ScheduleActions: this.__input.creates?.scheduleActions,
          },
          Deletes: {
            ActionNames: this.__input.deletes?.actionNames,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BatchUpdateSchedule.Deletes.ScheduleActions', props);
    return resource.getResponseField('Deletes.ScheduleActions') as unknown as shapes.MediaLiveScheduleAction[];
  }

}

export class MediaLiveResponsesCreateChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get channel(): MediaLiveResponsesCreateChannelChannel {
    return new MediaLiveResponsesCreateChannelChannel(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateChannelChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.Arn'),
        outputPath: 'Channel.Arn',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.Arn', props);
    return resource.getResponseField('Channel.Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesCreateChannelChannelCdiInputSpecification {
    return new MediaLiveResponsesCreateChannelChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.ChannelClass'),
        outputPath: 'Channel.ChannelClass',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.ChannelClass', props);
    return resource.getResponseField('Channel.ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.Destinations'),
        outputPath: 'Channel.Destinations',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.Destinations', props);
    return resource.getResponseField('Channel.Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EgressEndpoints'),
        outputPath: 'Channel.EgressEndpoints',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EgressEndpoints', props);
    return resource.getResponseField('Channel.EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesCreateChannelChannelEncoderSettings {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.Id'),
        outputPath: 'Channel.Id',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.Id', props);
    return resource.getResponseField('Channel.Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.InputAttachments'),
        outputPath: 'Channel.InputAttachments',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.InputAttachments', props);
    return resource.getResponseField('Channel.InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesCreateChannelChannelInputSpecification {
    return new MediaLiveResponsesCreateChannelChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.LogLevel'),
        outputPath: 'Channel.LogLevel',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.LogLevel', props);
    return resource.getResponseField('Channel.LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.Name'),
        outputPath: 'Channel.Name',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.Name', props);
    return resource.getResponseField('Channel.Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.PipelineDetails'),
        outputPath: 'Channel.PipelineDetails',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.PipelineDetails', props);
    return resource.getResponseField('Channel.PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.PipelinesRunningCount'),
        outputPath: 'Channel.PipelinesRunningCount',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.PipelinesRunningCount', props);
    return resource.getResponseField('Channel.PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.RoleArn'),
        outputPath: 'Channel.RoleArn',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.RoleArn', props);
    return resource.getResponseField('Channel.RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.State'),
        outputPath: 'Channel.State',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.State', props);
    return resource.getResponseField('Channel.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.Tags'),
        outputPath: 'Channel.Tags',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.Tags', props);
    return resource.getResponseField('Channel.Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesCreateChannelChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.CdiInputSpecification.Resolution'),
        outputPath: 'Channel.CdiInputSpecification.Resolution',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('Channel.CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AudioDescriptions'),
        outputPath: 'Channel.EncoderSettings.AudioDescriptions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'Channel.EncoderSettings.CaptionDescriptions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesCreateChannelChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesCreateChannelChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.OutputGroups'),
        outputPath: 'Channel.EncoderSettings.OutputGroups',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('Channel.EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesCreateChannelChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.VideoDescriptions'),
        outputPath: 'Channel.EncoderSettings.VideoDescriptions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.State',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get availSettings(): MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.State',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'Channel.EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('Channel.EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesCreateChannelChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'Channel.EncoderSettings.TimecodeConfig.Source',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('Channel.EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'Channel.EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('Channel.EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesCreateChannelChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateChannelRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.InputSpecification.Codec'),
        outputPath: 'Channel.InputSpecification.Codec',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.InputSpecification.Codec', props);
    return resource.getResponseField('Channel.InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.InputSpecification.MaximumBitrate'),
        outputPath: 'Channel.InputSpecification.MaximumBitrate',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('Channel.InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateChannel.Channel.InputSpecification.Resolution'),
        outputPath: 'Channel.InputSpecification.Resolution',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelClass: this.__input.channelClass,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Reserved: this.__input.reserved,
          RoleArn: this.__input.roleArn,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateChannel.Channel.InputSpecification.Resolution', props);
    return resource.getResponseField('Channel.InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesCreateInput {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateInputRequest) {
  }

  public get input(): MediaLiveResponsesCreateInputInput {
    return new MediaLiveResponsesCreateInputInput(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateInputInput {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateInputRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Arn'),
        outputPath: 'Input.Arn',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Arn', props);
    return resource.getResponseField('Input.Arn') as unknown as string;
  }

  public get attachedChannels(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.AttachedChannels'),
        outputPath: 'Input.AttachedChannels',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.AttachedChannels', props);
    return resource.getResponseField('Input.AttachedChannels') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveInputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Destinations'),
        outputPath: 'Input.Destinations',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Destinations', props);
    return resource.getResponseField('Input.Destinations') as unknown as shapes.MediaLiveInputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Id'),
        outputPath: 'Input.Id',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Id', props);
    return resource.getResponseField('Input.Id') as unknown as string;
  }

  public get inputClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.InputClass'),
        outputPath: 'Input.InputClass',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.InputClass', props);
    return resource.getResponseField('Input.InputClass') as unknown as string;
  }

  public get inputDevices(): shapes.MediaLiveInputDeviceSettings[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.InputDevices'),
        outputPath: 'Input.InputDevices',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.InputDevices', props);
    return resource.getResponseField('Input.InputDevices') as unknown as shapes.MediaLiveInputDeviceSettings[];
  }

  public get inputSourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.InputSourceType'),
        outputPath: 'Input.InputSourceType',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.InputSourceType', props);
    return resource.getResponseField('Input.InputSourceType') as unknown as string;
  }

  public get mediaConnectFlows(): shapes.MediaLiveMediaConnectFlow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.MediaConnectFlows'),
        outputPath: 'Input.MediaConnectFlows',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.MediaConnectFlows', props);
    return resource.getResponseField('Input.MediaConnectFlows') as unknown as shapes.MediaLiveMediaConnectFlow[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Name'),
        outputPath: 'Input.Name',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Name', props);
    return resource.getResponseField('Input.Name') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.RoleArn'),
        outputPath: 'Input.RoleArn',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.RoleArn', props);
    return resource.getResponseField('Input.RoleArn') as unknown as string;
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.SecurityGroups'),
        outputPath: 'Input.SecurityGroups',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.SecurityGroups', props);
    return resource.getResponseField('Input.SecurityGroups') as unknown as string[];
  }

  public get sources(): shapes.MediaLiveInputSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Sources'),
        outputPath: 'Input.Sources',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Sources', props);
    return resource.getResponseField('Input.Sources') as unknown as shapes.MediaLiveInputSource[];
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.State'),
        outputPath: 'Input.State',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.State', props);
    return resource.getResponseField('Input.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Tags'),
        outputPath: 'Input.Tags',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Tags', props);
    return resource.getResponseField('Input.Tags') as unknown as Record<string, string>;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInput.Input.Type'),
        outputPath: 'Input.Type',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
          Tags: this.__input.tags,
          Type: this.__input.type,
          Vpc: {
            SecurityGroupIds: this.__input.vpc?.securityGroupIds,
            SubnetIds: this.__input.vpc?.subnetIds,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInput.Input.Type', props);
    return resource.getResponseField('Input.Type') as unknown as string;
  }

}

export class MediaLiveResponsesCreateInputSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateInputSecurityGroupRequest) {
  }

  public get securityGroup(): MediaLiveResponsesCreateInputSecurityGroupSecurityGroup {
    return new MediaLiveResponsesCreateInputSecurityGroupSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateInputSecurityGroupSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateInputSecurityGroupRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInputSecurityGroup.SecurityGroup.Arn'),
        outputPath: 'SecurityGroup.Arn',
        parameters: {
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInputSecurityGroup.SecurityGroup.Arn', props);
    return resource.getResponseField('SecurityGroup.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInputSecurityGroup.SecurityGroup.Id'),
        outputPath: 'SecurityGroup.Id',
        parameters: {
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInputSecurityGroup.SecurityGroup.Id', props);
    return resource.getResponseField('SecurityGroup.Id') as unknown as string;
  }

  public get inputs(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInputSecurityGroup.SecurityGroup.Inputs'),
        outputPath: 'SecurityGroup.Inputs',
        parameters: {
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInputSecurityGroup.SecurityGroup.Inputs', props);
    return resource.getResponseField('SecurityGroup.Inputs') as unknown as string[];
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInputSecurityGroup.SecurityGroup.State'),
        outputPath: 'SecurityGroup.State',
        parameters: {
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInputSecurityGroup.SecurityGroup.State', props);
    return resource.getResponseField('SecurityGroup.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInputSecurityGroup.SecurityGroup.Tags'),
        outputPath: 'SecurityGroup.Tags',
        parameters: {
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInputSecurityGroup.SecurityGroup.Tags', props);
    return resource.getResponseField('SecurityGroup.Tags') as unknown as Record<string, string>;
  }

  public get whitelistRules(): shapes.MediaLiveInputWhitelistRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateInputSecurityGroup.SecurityGroup.WhitelistRules'),
        outputPath: 'SecurityGroup.WhitelistRules',
        parameters: {
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateInputSecurityGroup.SecurityGroup.WhitelistRules', props);
    return resource.getResponseField('SecurityGroup.WhitelistRules') as unknown as shapes.MediaLiveInputWhitelistRule[];
  }

}

export class MediaLiveResponsesCreateMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexRequest) {
  }

  public get multiplex(): MediaLiveResponsesCreateMultiplexMultiplex {
    return new MediaLiveResponsesCreateMultiplexMultiplex(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateMultiplexMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.Arn'),
        outputPath: 'Multiplex.Arn',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.Arn', props);
    return resource.getResponseField('Multiplex.Arn') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.AvailabilityZones'),
        outputPath: 'Multiplex.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.AvailabilityZones', props);
    return resource.getResponseField('Multiplex.AvailabilityZones') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveMultiplexOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.Destinations'),
        outputPath: 'Multiplex.Destinations',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.Destinations', props);
    return resource.getResponseField('Multiplex.Destinations') as unknown as shapes.MediaLiveMultiplexOutputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.Id'),
        outputPath: 'Multiplex.Id',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.Id', props);
    return resource.getResponseField('Multiplex.Id') as unknown as string;
  }

  public get multiplexSettings(): MediaLiveResponsesCreateMultiplexMultiplexMultiplexSettings {
    return new MediaLiveResponsesCreateMultiplexMultiplexMultiplexSettings(this.__scope, this.__resources, this.__input);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.Name'),
        outputPath: 'Multiplex.Name',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.Name', props);
    return resource.getResponseField('Multiplex.Name') as unknown as string;
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.PipelinesRunningCount'),
        outputPath: 'Multiplex.PipelinesRunningCount',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.PipelinesRunningCount', props);
    return resource.getResponseField('Multiplex.PipelinesRunningCount') as unknown as number;
  }

  public get programCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.ProgramCount'),
        outputPath: 'Multiplex.ProgramCount',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.ProgramCount', props);
    return resource.getResponseField('Multiplex.ProgramCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.State'),
        outputPath: 'Multiplex.State',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.State', props);
    return resource.getResponseField('Multiplex.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.Tags'),
        outputPath: 'Multiplex.Tags',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.Tags', props);
    return resource.getResponseField('Multiplex.Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesCreateMultiplexMultiplexMultiplexSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexRequest) {
  }

  public get maximumVideoBufferDelayMilliseconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds'),
        outputPath: 'Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds') as unknown as number;
  }

  public get transportStreamBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.MultiplexSettings.TransportStreamBitrate'),
        outputPath: 'Multiplex.MultiplexSettings.TransportStreamBitrate',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.MultiplexSettings.TransportStreamBitrate', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.TransportStreamBitrate') as unknown as number;
  }

  public get transportStreamId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.MultiplexSettings.TransportStreamId'),
        outputPath: 'Multiplex.MultiplexSettings.TransportStreamId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.MultiplexSettings.TransportStreamId', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.TransportStreamId') as unknown as number;
  }

  public get transportStreamReservedBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplex.Multiplex.MultiplexSettings.TransportStreamReservedBitrate'),
        outputPath: 'Multiplex.MultiplexSettings.TransportStreamReservedBitrate',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
          RequestId: this.__input.requestId,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplex.Multiplex.MultiplexSettings.TransportStreamReservedBitrate', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.TransportStreamReservedBitrate') as unknown as number;
  }

}

export class MediaLiveResponsesCreateMultiplexProgram {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get multiplexProgram(): MediaLiveResponsesCreateMultiplexProgramMultiplexProgram {
    return new MediaLiveResponsesCreateMultiplexProgramMultiplexProgram(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateMultiplexProgramMultiplexProgram {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.ChannelId'),
        outputPath: 'MultiplexProgram.ChannelId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.ChannelId', props);
    return resource.getResponseField('MultiplexProgram.ChannelId') as unknown as string;
  }

  public get multiplexProgramSettings(): MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettings {
    return new MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettings(this.__scope, this.__resources, this.__input);
  }

  public get packetIdentifiersMap(): MediaLiveResponsesCreateMultiplexProgramMultiplexProgramPacketIdentifiersMap {
    return new MediaLiveResponsesCreateMultiplexProgramMultiplexProgramPacketIdentifiersMap(this.__scope, this.__resources, this.__input);
  }

  public get pipelineDetails(): shapes.MediaLiveMultiplexProgramPipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PipelineDetails'),
        outputPath: 'MultiplexProgram.PipelineDetails',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PipelineDetails', props);
    return resource.getResponseField('MultiplexProgram.PipelineDetails') as unknown as shapes.MediaLiveMultiplexProgramPipelineDetail[];
  }

  public get programName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.ProgramName'),
        outputPath: 'MultiplexProgram.ProgramName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.ProgramName', props);
    return resource.getResponseField('MultiplexProgram.ProgramName') as unknown as string;
  }

}

export class MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get preferredChannelPipeline(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline') as unknown as string;
  }

  public get programNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ProgramNumber'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.ProgramNumber',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ProgramNumber', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.ProgramNumber') as unknown as number;
  }

  public get serviceDescriptor(): MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsServiceDescriptor {
    return new MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsServiceDescriptor(this.__scope, this.__resources, this.__input);
  }

  public get videoSettings(): MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettings {
    return new MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsServiceDescriptor {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get providerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName') as unknown as string;
  }

}

export class MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get constantBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate') as unknown as number;
  }

  public get statmuxSettings(): MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {
    return new MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesCreateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get maximumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate') as unknown as number;
  }

  public get minimumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate') as unknown as number;
  }

  public get priority(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority') as unknown as number;
  }

}

export class MediaLiveResponsesCreateMultiplexProgramMultiplexProgramPacketIdentifiersMap {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveCreateMultiplexProgramRequest) {
  }

  public get audioPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.AudioPids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.AudioPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.AudioPids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.AudioPids') as unknown as number[];
  }

  public get dvbSubPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbSubPids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.DvbSubPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbSubPids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.DvbSubPids') as unknown as number[];
  }

  public get dvbTeletextPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid') as unknown as number;
  }

  public get etvPlatformPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid') as unknown as number;
  }

  public get etvSignalPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvSignalPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.EtvSignalPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvSignalPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.EtvSignalPid') as unknown as number;
  }

  public get klvDataPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.KlvDataPids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.KlvDataPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.KlvDataPids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.KlvDataPids') as unknown as number[];
  }

  public get pcrPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PcrPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.PcrPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PcrPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.PcrPid') as unknown as number;
  }

  public get pmtPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PmtPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.PmtPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PmtPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.PmtPid') as unknown as number;
  }

  public get privateMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid') as unknown as number;
  }

  public get scte27Pids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte27Pids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.Scte27Pids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte27Pids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.Scte27Pids') as unknown as number[];
  }

  public get scte35Pid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte35Pid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.Scte35Pid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte35Pid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.Scte35Pid') as unknown as number;
  }

  public get timedMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid') as unknown as number;
  }

  public get videoPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.VideoPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.VideoPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
          RequestId: this.__input.requestId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.VideoPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.VideoPid') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesDeleteChannelCdiInputSpecification {
    return new MediaLiveResponsesDeleteChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.ChannelClass'),
        outputPath: 'ChannelClass',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.ChannelClass', props);
    return resource.getResponseField('ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EgressEndpoints'),
        outputPath: 'EgressEndpoints',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EgressEndpoints', props);
    return resource.getResponseField('EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesDeleteChannelEncoderSettings {
    return new MediaLiveResponsesDeleteChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.Id'),
        outputPath: 'Id',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.InputAttachments'),
        outputPath: 'InputAttachments',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.InputAttachments', props);
    return resource.getResponseField('InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesDeleteChannelInputSpecification {
    return new MediaLiveResponsesDeleteChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.LogLevel'),
        outputPath: 'LogLevel',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.LogLevel', props);
    return resource.getResponseField('LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.Name'),
        outputPath: 'Name',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.PipelineDetails'),
        outputPath: 'PipelineDetails',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.PipelineDetails', props);
    return resource.getResponseField('PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.RoleArn'),
        outputPath: 'RoleArn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.RoleArn', props);
    return resource.getResponseField('RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.State'),
        outputPath: 'State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesDeleteChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.CdiInputSpecification.Resolution'),
        outputPath: 'CdiInputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AudioDescriptions'),
        outputPath: 'EncoderSettings.AudioDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesDeleteChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'EncoderSettings.CaptionDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesDeleteChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesDeleteChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.OutputGroups'),
        outputPath: 'EncoderSettings.OutputGroups',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesDeleteChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.VideoDescriptions'),
        outputPath: 'EncoderSettings.VideoDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesDeleteChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'EncoderSettings.AvailBlanking.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get availSettings(): MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'EncoderSettings.BlackoutSlate.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'EncoderSettings.TimecodeConfig.Source',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteChannelRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.InputSpecification.Codec'),
        outputPath: 'InputSpecification.Codec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.InputSpecification.Codec', props);
    return resource.getResponseField('InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.InputSpecification.MaximumBitrate'),
        outputPath: 'InputSpecification.MaximumBitrate',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteChannel.InputSpecification.Resolution'),
        outputPath: 'InputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteChannel.InputSpecification.Resolution', props);
    return resource.getResponseField('InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.Arn'),
        outputPath: 'Arn',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.AvailabilityZones'),
        outputPath: 'AvailabilityZones',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.AvailabilityZones', props);
    return resource.getResponseField('AvailabilityZones') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveMultiplexOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveMultiplexOutputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.Id'),
        outputPath: 'Id',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get multiplexSettings(): MediaLiveResponsesDeleteMultiplexMultiplexSettings {
    return new MediaLiveResponsesDeleteMultiplexMultiplexSettings(this.__scope, this.__resources, this.__input);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.Name'),
        outputPath: 'Name',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get programCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.ProgramCount'),
        outputPath: 'ProgramCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.ProgramCount', props);
    return resource.getResponseField('ProgramCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.State'),
        outputPath: 'State',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.Tags'),
        outputPath: 'Tags',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesDeleteMultiplexMultiplexSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexRequest) {
  }

  public get maximumVideoBufferDelayMilliseconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds'),
        outputPath: 'MultiplexSettings.MaximumVideoBufferDelayMilliseconds',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds', props);
    return resource.getResponseField('MultiplexSettings.MaximumVideoBufferDelayMilliseconds') as unknown as number;
  }

  public get transportStreamBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.MultiplexSettings.TransportStreamBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.MultiplexSettings.TransportStreamBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamBitrate') as unknown as number;
  }

  public get transportStreamId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.MultiplexSettings.TransportStreamId'),
        outputPath: 'MultiplexSettings.TransportStreamId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.MultiplexSettings.TransportStreamId', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamId') as unknown as number;
  }

  public get transportStreamReservedBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplex.MultiplexSettings.TransportStreamReservedBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamReservedBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplex.MultiplexSettings.TransportStreamReservedBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamReservedBitrate') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteMultiplexProgram {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexProgramRequest) {
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get multiplexProgramSettings(): MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettings {
    return new MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettings(this.__scope, this.__resources, this.__input);
  }

  public get packetIdentifiersMap(): MediaLiveResponsesDeleteMultiplexProgramPacketIdentifiersMap {
    return new MediaLiveResponsesDeleteMultiplexProgramPacketIdentifiersMap(this.__scope, this.__resources, this.__input);
  }

  public get pipelineDetails(): shapes.MediaLiveMultiplexProgramPipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PipelineDetails'),
        outputPath: 'PipelineDetails',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PipelineDetails', props);
    return resource.getResponseField('PipelineDetails') as unknown as shapes.MediaLiveMultiplexProgramPipelineDetail[];
  }

  public get programName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.ProgramName'),
        outputPath: 'ProgramName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.ProgramName', props);
    return resource.getResponseField('ProgramName') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexProgramRequest) {
  }

  public get preferredChannelPipeline(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline'),
        outputPath: 'MultiplexProgramSettings.PreferredChannelPipeline',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline', props);
    return resource.getResponseField('MultiplexProgramSettings.PreferredChannelPipeline') as unknown as string;
  }

  public get programNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.ProgramNumber'),
        outputPath: 'MultiplexProgramSettings.ProgramNumber',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.ProgramNumber', props);
    return resource.getResponseField('MultiplexProgramSettings.ProgramNumber') as unknown as number;
  }

  public get serviceDescriptor(): MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsServiceDescriptor {
    return new MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsServiceDescriptor(this.__scope, this.__resources, this.__input);
  }

  public get videoSettings(): MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsVideoSettings {
    return new MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsVideoSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsServiceDescriptor {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexProgramRequest) {
  }

  public get providerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName'),
        outputPath: 'MultiplexProgramSettings.ServiceDescriptor.ProviderName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName', props);
    return resource.getResponseField('MultiplexProgramSettings.ServiceDescriptor.ProviderName') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName'),
        outputPath: 'MultiplexProgramSettings.ServiceDescriptor.ServiceName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName', props);
    return resource.getResponseField('MultiplexProgramSettings.ServiceDescriptor.ServiceName') as unknown as string;
  }

}

export class MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsVideoSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexProgramRequest) {
  }

  public get constantBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.ConstantBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.ConstantBitrate') as unknown as number;
  }

  public get statmuxSettings(): MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {
    return new MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDeleteMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexProgramRequest) {
  }

  public get maximumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate') as unknown as number;
  }

  public get minimumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate') as unknown as number;
  }

  public get priority(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteMultiplexProgramPacketIdentifiersMap {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteMultiplexProgramRequest) {
  }

  public get audioPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.AudioPids'),
        outputPath: 'PacketIdentifiersMap.AudioPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.AudioPids', props);
    return resource.getResponseField('PacketIdentifiersMap.AudioPids') as unknown as number[];
  }

  public get dvbSubPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.DvbSubPids'),
        outputPath: 'PacketIdentifiersMap.DvbSubPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.DvbSubPids', props);
    return resource.getResponseField('PacketIdentifiersMap.DvbSubPids') as unknown as number[];
  }

  public get dvbTeletextPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.DvbTeletextPid'),
        outputPath: 'PacketIdentifiersMap.DvbTeletextPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.DvbTeletextPid', props);
    return resource.getResponseField('PacketIdentifiersMap.DvbTeletextPid') as unknown as number;
  }

  public get etvPlatformPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.EtvPlatformPid'),
        outputPath: 'PacketIdentifiersMap.EtvPlatformPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.EtvPlatformPid', props);
    return resource.getResponseField('PacketIdentifiersMap.EtvPlatformPid') as unknown as number;
  }

  public get etvSignalPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.EtvSignalPid'),
        outputPath: 'PacketIdentifiersMap.EtvSignalPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.EtvSignalPid', props);
    return resource.getResponseField('PacketIdentifiersMap.EtvSignalPid') as unknown as number;
  }

  public get klvDataPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.KlvDataPids'),
        outputPath: 'PacketIdentifiersMap.KlvDataPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.KlvDataPids', props);
    return resource.getResponseField('PacketIdentifiersMap.KlvDataPids') as unknown as number[];
  }

  public get pcrPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.PcrPid'),
        outputPath: 'PacketIdentifiersMap.PcrPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.PcrPid', props);
    return resource.getResponseField('PacketIdentifiersMap.PcrPid') as unknown as number;
  }

  public get pmtPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.PmtPid'),
        outputPath: 'PacketIdentifiersMap.PmtPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.PmtPid', props);
    return resource.getResponseField('PacketIdentifiersMap.PmtPid') as unknown as number;
  }

  public get privateMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid'),
        outputPath: 'PacketIdentifiersMap.PrivateMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid', props);
    return resource.getResponseField('PacketIdentifiersMap.PrivateMetadataPid') as unknown as number;
  }

  public get scte27Pids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.Scte27Pids'),
        outputPath: 'PacketIdentifiersMap.Scte27Pids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.Scte27Pids', props);
    return resource.getResponseField('PacketIdentifiersMap.Scte27Pids') as unknown as number[];
  }

  public get scte35Pid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.Scte35Pid'),
        outputPath: 'PacketIdentifiersMap.Scte35Pid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.Scte35Pid', props);
    return resource.getResponseField('PacketIdentifiersMap.Scte35Pid') as unknown as number;
  }

  public get timedMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.TimedMetadataPid'),
        outputPath: 'PacketIdentifiersMap.TimedMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.TimedMetadataPid', props);
    return resource.getResponseField('PacketIdentifiersMap.TimedMetadataPid') as unknown as number;
  }

  public get videoPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteMultiplexProgram.PacketIdentifiersMap.VideoPid'),
        outputPath: 'PacketIdentifiersMap.VideoPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteMultiplexProgram.PacketIdentifiersMap.VideoPid', props);
    return resource.getResponseField('PacketIdentifiersMap.VideoPid') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteReservationRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Arn'),
        outputPath: 'Arn',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get count(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Count'),
        outputPath: 'Count',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Count', props);
    return resource.getResponseField('Count') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Duration'),
        outputPath: 'Duration',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Duration', props);
    return resource.getResponseField('Duration') as unknown as number;
  }

  public get durationUnits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.DurationUnits'),
        outputPath: 'DurationUnits',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.DurationUnits', props);
    return resource.getResponseField('DurationUnits') as unknown as string;
  }

  public get end(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.End'),
        outputPath: 'End',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.End', props);
    return resource.getResponseField('End') as unknown as string;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.FixedPrice'),
        outputPath: 'FixedPrice',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.FixedPrice', props);
    return resource.getResponseField('FixedPrice') as unknown as number;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Name'),
        outputPath: 'Name',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get offeringDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.OfferingDescription'),
        outputPath: 'OfferingDescription',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.OfferingDescription', props);
    return resource.getResponseField('OfferingDescription') as unknown as string;
  }

  public get offeringId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.OfferingId'),
        outputPath: 'OfferingId',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.OfferingId', props);
    return resource.getResponseField('OfferingId') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.OfferingType'),
        outputPath: 'OfferingType',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.OfferingType', props);
    return resource.getResponseField('OfferingType') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Region'),
        outputPath: 'Region',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Region', props);
    return resource.getResponseField('Region') as unknown as string;
  }

  public get reservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ReservationId'),
        outputPath: 'ReservationId',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ReservationId', props);
    return resource.getResponseField('ReservationId') as unknown as string;
  }

  public get resourceSpecification(): MediaLiveResponsesDeleteReservationResourceSpecification {
    return new MediaLiveResponsesDeleteReservationResourceSpecification(this.__scope, this.__resources, this.__input);
  }

  public get start(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Start'),
        outputPath: 'Start',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Start', props);
    return resource.getResponseField('Start') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.State'),
        outputPath: 'State',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.Tags'),
        outputPath: 'Tags',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.UsagePrice'),
        outputPath: 'UsagePrice',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.UsagePrice', props);
    return resource.getResponseField('UsagePrice') as unknown as number;
  }

}

export class MediaLiveResponsesDeleteReservationResourceSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDeleteReservationRequest) {
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.ChannelClass'),
        outputPath: 'ResourceSpecification.ChannelClass',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.ChannelClass', props);
    return resource.getResponseField('ResourceSpecification.ChannelClass') as unknown as string;
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.Codec'),
        outputPath: 'ResourceSpecification.Codec',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.Codec', props);
    return resource.getResponseField('ResourceSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.MaximumBitrate'),
        outputPath: 'ResourceSpecification.MaximumBitrate',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.MaximumBitrate', props);
    return resource.getResponseField('ResourceSpecification.MaximumBitrate') as unknown as string;
  }

  public get maximumFramerate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.MaximumFramerate'),
        outputPath: 'ResourceSpecification.MaximumFramerate',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.MaximumFramerate', props);
    return resource.getResponseField('ResourceSpecification.MaximumFramerate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.Resolution'),
        outputPath: 'ResourceSpecification.Resolution',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.Resolution', props);
    return resource.getResponseField('ResourceSpecification.Resolution') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.ResourceType'),
        outputPath: 'ResourceSpecification.ResourceType',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.ResourceType', props);
    return resource.getResponseField('ResourceSpecification.ResourceType') as unknown as string;
  }

  public get specialFeature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.SpecialFeature'),
        outputPath: 'ResourceSpecification.SpecialFeature',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.SpecialFeature', props);
    return resource.getResponseField('ResourceSpecification.SpecialFeature') as unknown as string;
  }

  public get videoQuality(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DeleteReservation.ResourceSpecification.VideoQuality'),
        outputPath: 'ResourceSpecification.VideoQuality',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteReservation.ResourceSpecification.VideoQuality', props);
    return resource.getResponseField('ResourceSpecification.VideoQuality') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesDescribeChannelCdiInputSpecification {
    return new MediaLiveResponsesDescribeChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.ChannelClass'),
        outputPath: 'ChannelClass',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.ChannelClass', props);
    return resource.getResponseField('ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EgressEndpoints'),
        outputPath: 'EgressEndpoints',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EgressEndpoints', props);
    return resource.getResponseField('EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesDescribeChannelEncoderSettings {
    return new MediaLiveResponsesDescribeChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.Id'),
        outputPath: 'Id',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.InputAttachments'),
        outputPath: 'InputAttachments',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.InputAttachments', props);
    return resource.getResponseField('InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesDescribeChannelInputSpecification {
    return new MediaLiveResponsesDescribeChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.LogLevel'),
        outputPath: 'LogLevel',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.LogLevel', props);
    return resource.getResponseField('LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.Name'),
        outputPath: 'Name',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.PipelineDetails'),
        outputPath: 'PipelineDetails',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.PipelineDetails', props);
    return resource.getResponseField('PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.RoleArn'),
        outputPath: 'RoleArn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.RoleArn', props);
    return resource.getResponseField('RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.State'),
        outputPath: 'State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesDescribeChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.CdiInputSpecification.Resolution'),
        outputPath: 'CdiInputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AudioDescriptions'),
        outputPath: 'EncoderSettings.AudioDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesDescribeChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'EncoderSettings.CaptionDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesDescribeChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesDescribeChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.OutputGroups'),
        outputPath: 'EncoderSettings.OutputGroups',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesDescribeChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.VideoDescriptions'),
        outputPath: 'EncoderSettings.VideoDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesDescribeChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'EncoderSettings.AvailBlanking.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get availSettings(): MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'EncoderSettings.BlackoutSlate.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'EncoderSettings.TimecodeConfig.Source',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeChannelRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.InputSpecification.Codec'),
        outputPath: 'InputSpecification.Codec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.InputSpecification.Codec', props);
    return resource.getResponseField('InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.InputSpecification.MaximumBitrate'),
        outputPath: 'InputSpecification.MaximumBitrate',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeChannel.InputSpecification.Resolution'),
        outputPath: 'InputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeChannel.InputSpecification.Resolution', props);
    return resource.getResponseField('InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeInput {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeInputRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Arn'),
        outputPath: 'Arn',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get attachedChannels(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.AttachedChannels'),
        outputPath: 'AttachedChannels',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.AttachedChannels', props);
    return resource.getResponseField('AttachedChannels') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveInputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveInputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Id'),
        outputPath: 'Id',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get inputClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.InputClass'),
        outputPath: 'InputClass',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.InputClass', props);
    return resource.getResponseField('InputClass') as unknown as string;
  }

  public get inputDevices(): shapes.MediaLiveInputDeviceSettings[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.InputDevices'),
        outputPath: 'InputDevices',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.InputDevices', props);
    return resource.getResponseField('InputDevices') as unknown as shapes.MediaLiveInputDeviceSettings[];
  }

  public get inputSourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.InputSourceType'),
        outputPath: 'InputSourceType',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.InputSourceType', props);
    return resource.getResponseField('InputSourceType') as unknown as string;
  }

  public get mediaConnectFlows(): shapes.MediaLiveMediaConnectFlow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.MediaConnectFlows'),
        outputPath: 'MediaConnectFlows',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.MediaConnectFlows', props);
    return resource.getResponseField('MediaConnectFlows') as unknown as shapes.MediaLiveMediaConnectFlow[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Name'),
        outputPath: 'Name',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.RoleArn'),
        outputPath: 'RoleArn',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.RoleArn', props);
    return resource.getResponseField('RoleArn') as unknown as string;
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.SecurityGroups'),
        outputPath: 'SecurityGroups',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.SecurityGroups', props);
    return resource.getResponseField('SecurityGroups') as unknown as string[];
  }

  public get sources(): shapes.MediaLiveInputSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Sources'),
        outputPath: 'Sources',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Sources', props);
    return resource.getResponseField('Sources') as unknown as shapes.MediaLiveInputSource[];
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.State'),
        outputPath: 'State',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Tags'),
        outputPath: 'Tags',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInput.Type'),
        outputPath: 'Type',
        parameters: {
          InputId: this.__input.inputId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInput.Type', props);
    return resource.getResponseField('Type') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeInputDevice {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeInputDeviceRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.Arn'),
        outputPath: 'Arn',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get connectionState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.ConnectionState'),
        outputPath: 'ConnectionState',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.ConnectionState', props);
    return resource.getResponseField('ConnectionState') as unknown as string;
  }

  public get deviceSettingsSyncState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.DeviceSettingsSyncState'),
        outputPath: 'DeviceSettingsSyncState',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.DeviceSettingsSyncState', props);
    return resource.getResponseField('DeviceSettingsSyncState') as unknown as string;
  }

  public get deviceUpdateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.DeviceUpdateStatus'),
        outputPath: 'DeviceUpdateStatus',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.DeviceUpdateStatus', props);
    return resource.getResponseField('DeviceUpdateStatus') as unknown as string;
  }

  public get hdDeviceSettings(): MediaLiveResponsesDescribeInputDeviceHdDeviceSettings {
    return new MediaLiveResponsesDescribeInputDeviceHdDeviceSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.Id'),
        outputPath: 'Id',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get macAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.MacAddress'),
        outputPath: 'MacAddress',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.MacAddress', props);
    return resource.getResponseField('MacAddress') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.Name'),
        outputPath: 'Name',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get networkSettings(): MediaLiveResponsesDescribeInputDeviceNetworkSettings {
    return new MediaLiveResponsesDescribeInputDeviceNetworkSettings(this.__scope, this.__resources, this.__input);
  }

  public get serialNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.SerialNumber'),
        outputPath: 'SerialNumber',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.SerialNumber', props);
    return resource.getResponseField('SerialNumber') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.Type'),
        outputPath: 'Type',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.Type', props);
    return resource.getResponseField('Type') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeInputDeviceHdDeviceSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeInputDeviceRequest) {
  }

  public get activeInput(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.ActiveInput'),
        outputPath: 'HdDeviceSettings.ActiveInput',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.ActiveInput', props);
    return resource.getResponseField('HdDeviceSettings.ActiveInput') as unknown as string;
  }

  public get configuredInput(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.ConfiguredInput'),
        outputPath: 'HdDeviceSettings.ConfiguredInput',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.ConfiguredInput', props);
    return resource.getResponseField('HdDeviceSettings.ConfiguredInput') as unknown as string;
  }

  public get deviceState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.DeviceState'),
        outputPath: 'HdDeviceSettings.DeviceState',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.DeviceState', props);
    return resource.getResponseField('HdDeviceSettings.DeviceState') as unknown as string;
  }

  public get framerate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.Framerate'),
        outputPath: 'HdDeviceSettings.Framerate',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.Framerate', props);
    return resource.getResponseField('HdDeviceSettings.Framerate') as unknown as number;
  }

  public get height(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.Height'),
        outputPath: 'HdDeviceSettings.Height',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.Height', props);
    return resource.getResponseField('HdDeviceSettings.Height') as unknown as number;
  }

  public get maxBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.MaxBitrate'),
        outputPath: 'HdDeviceSettings.MaxBitrate',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.MaxBitrate', props);
    return resource.getResponseField('HdDeviceSettings.MaxBitrate') as unknown as number;
  }

  public get scanType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.ScanType'),
        outputPath: 'HdDeviceSettings.ScanType',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.ScanType', props);
    return resource.getResponseField('HdDeviceSettings.ScanType') as unknown as string;
  }

  public get width(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.HdDeviceSettings.Width'),
        outputPath: 'HdDeviceSettings.Width',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.HdDeviceSettings.Width', props);
    return resource.getResponseField('HdDeviceSettings.Width') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeInputDeviceNetworkSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeInputDeviceRequest) {
  }

  public get dnsAddresses(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.NetworkSettings.DnsAddresses'),
        outputPath: 'NetworkSettings.DnsAddresses',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.NetworkSettings.DnsAddresses', props);
    return resource.getResponseField('NetworkSettings.DnsAddresses') as unknown as string[];
  }

  public get gateway(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.NetworkSettings.Gateway'),
        outputPath: 'NetworkSettings.Gateway',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.NetworkSettings.Gateway', props);
    return resource.getResponseField('NetworkSettings.Gateway') as unknown as string;
  }

  public get ipAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.NetworkSettings.IpAddress'),
        outputPath: 'NetworkSettings.IpAddress',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.NetworkSettings.IpAddress', props);
    return resource.getResponseField('NetworkSettings.IpAddress') as unknown as string;
  }

  public get ipScheme(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.NetworkSettings.IpScheme'),
        outputPath: 'NetworkSettings.IpScheme',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.NetworkSettings.IpScheme', props);
    return resource.getResponseField('NetworkSettings.IpScheme') as unknown as string;
  }

  public get subnetMask(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDevice.NetworkSettings.SubnetMask'),
        outputPath: 'NetworkSettings.SubnetMask',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDevice.NetworkSettings.SubnetMask', props);
    return resource.getResponseField('NetworkSettings.SubnetMask') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeInputDeviceThumbnail {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeInputDeviceThumbnailRequest) {
  }

  public get body(): any {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDeviceThumbnail',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDeviceThumbnail.Body'),
        outputPath: 'Body',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
          Accept: this.__input.accept,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDeviceThumbnail.Body', props);
    return resource.getResponseField('Body') as unknown as any;
  }

  public get contentType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDeviceThumbnail',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDeviceThumbnail.ContentType'),
        outputPath: 'ContentType',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
          Accept: this.__input.accept,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDeviceThumbnail.ContentType', props);
    return resource.getResponseField('ContentType') as unknown as string;
  }

  public get contentLength(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDeviceThumbnail',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDeviceThumbnail.ContentLength'),
        outputPath: 'ContentLength',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
          Accept: this.__input.accept,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDeviceThumbnail.ContentLength', props);
    return resource.getResponseField('ContentLength') as unknown as number;
  }

  public get eTag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDeviceThumbnail',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDeviceThumbnail.ETag'),
        outputPath: 'ETag',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
          Accept: this.__input.accept,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDeviceThumbnail.ETag', props);
    return resource.getResponseField('ETag') as unknown as string;
  }

  public get lastModified(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputDeviceThumbnail',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputDeviceThumbnail.LastModified'),
        outputPath: 'LastModified',
        parameters: {
          InputDeviceId: this.__input.inputDeviceId,
          Accept: this.__input.accept,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputDeviceThumbnail.LastModified', props);
    return resource.getResponseField('LastModified') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeInputSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeInputSecurityGroupRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputSecurityGroup.Arn'),
        outputPath: 'Arn',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputSecurityGroup.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputSecurityGroup.Id'),
        outputPath: 'Id',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputSecurityGroup.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get inputs(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputSecurityGroup.Inputs'),
        outputPath: 'Inputs',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputSecurityGroup.Inputs', props);
    return resource.getResponseField('Inputs') as unknown as string[];
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputSecurityGroup.State'),
        outputPath: 'State',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputSecurityGroup.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputSecurityGroup.Tags'),
        outputPath: 'Tags',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputSecurityGroup.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get whitelistRules(): shapes.MediaLiveInputWhitelistRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeInputSecurityGroup.WhitelistRules'),
        outputPath: 'WhitelistRules',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInputSecurityGroup.WhitelistRules', props);
    return resource.getResponseField('WhitelistRules') as unknown as shapes.MediaLiveInputWhitelistRule[];
  }

}

export class MediaLiveResponsesDescribeMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.Arn'),
        outputPath: 'Arn',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.AvailabilityZones'),
        outputPath: 'AvailabilityZones',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.AvailabilityZones', props);
    return resource.getResponseField('AvailabilityZones') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveMultiplexOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveMultiplexOutputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.Id'),
        outputPath: 'Id',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get multiplexSettings(): MediaLiveResponsesDescribeMultiplexMultiplexSettings {
    return new MediaLiveResponsesDescribeMultiplexMultiplexSettings(this.__scope, this.__resources, this.__input);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.Name'),
        outputPath: 'Name',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get programCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.ProgramCount'),
        outputPath: 'ProgramCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.ProgramCount', props);
    return resource.getResponseField('ProgramCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.State'),
        outputPath: 'State',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.Tags'),
        outputPath: 'Tags',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesDescribeMultiplexMultiplexSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexRequest) {
  }

  public get maximumVideoBufferDelayMilliseconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds'),
        outputPath: 'MultiplexSettings.MaximumVideoBufferDelayMilliseconds',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds', props);
    return resource.getResponseField('MultiplexSettings.MaximumVideoBufferDelayMilliseconds') as unknown as number;
  }

  public get transportStreamBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.MultiplexSettings.TransportStreamBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.MultiplexSettings.TransportStreamBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamBitrate') as unknown as number;
  }

  public get transportStreamId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.MultiplexSettings.TransportStreamId'),
        outputPath: 'MultiplexSettings.TransportStreamId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.MultiplexSettings.TransportStreamId', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamId') as unknown as number;
  }

  public get transportStreamReservedBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplex.MultiplexSettings.TransportStreamReservedBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamReservedBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplex.MultiplexSettings.TransportStreamReservedBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamReservedBitrate') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeMultiplexProgram {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexProgramRequest) {
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.ChannelId'),
        outputPath: 'ChannelId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.ChannelId', props);
    return resource.getResponseField('ChannelId') as unknown as string;
  }

  public get multiplexProgramSettings(): MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettings {
    return new MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettings(this.__scope, this.__resources, this.__input);
  }

  public get packetIdentifiersMap(): MediaLiveResponsesDescribeMultiplexProgramPacketIdentifiersMap {
    return new MediaLiveResponsesDescribeMultiplexProgramPacketIdentifiersMap(this.__scope, this.__resources, this.__input);
  }

  public get pipelineDetails(): shapes.MediaLiveMultiplexProgramPipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PipelineDetails'),
        outputPath: 'PipelineDetails',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PipelineDetails', props);
    return resource.getResponseField('PipelineDetails') as unknown as shapes.MediaLiveMultiplexProgramPipelineDetail[];
  }

  public get programName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.ProgramName'),
        outputPath: 'ProgramName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.ProgramName', props);
    return resource.getResponseField('ProgramName') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexProgramRequest) {
  }

  public get preferredChannelPipeline(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline'),
        outputPath: 'MultiplexProgramSettings.PreferredChannelPipeline',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline', props);
    return resource.getResponseField('MultiplexProgramSettings.PreferredChannelPipeline') as unknown as string;
  }

  public get programNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.ProgramNumber'),
        outputPath: 'MultiplexProgramSettings.ProgramNumber',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.ProgramNumber', props);
    return resource.getResponseField('MultiplexProgramSettings.ProgramNumber') as unknown as number;
  }

  public get serviceDescriptor(): MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsServiceDescriptor {
    return new MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsServiceDescriptor(this.__scope, this.__resources, this.__input);
  }

  public get videoSettings(): MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsVideoSettings {
    return new MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsVideoSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsServiceDescriptor {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexProgramRequest) {
  }

  public get providerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName'),
        outputPath: 'MultiplexProgramSettings.ServiceDescriptor.ProviderName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName', props);
    return resource.getResponseField('MultiplexProgramSettings.ServiceDescriptor.ProviderName') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName'),
        outputPath: 'MultiplexProgramSettings.ServiceDescriptor.ServiceName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName', props);
    return resource.getResponseField('MultiplexProgramSettings.ServiceDescriptor.ServiceName') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsVideoSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexProgramRequest) {
  }

  public get constantBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.ConstantBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.ConstantBitrate') as unknown as number;
  }

  public get statmuxSettings(): MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {
    return new MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesDescribeMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexProgramRequest) {
  }

  public get maximumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate') as unknown as number;
  }

  public get minimumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate') as unknown as number;
  }

  public get priority(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority'),
        outputPath: 'MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority', props);
    return resource.getResponseField('MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeMultiplexProgramPacketIdentifiersMap {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeMultiplexProgramRequest) {
  }

  public get audioPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.AudioPids'),
        outputPath: 'PacketIdentifiersMap.AudioPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.AudioPids', props);
    return resource.getResponseField('PacketIdentifiersMap.AudioPids') as unknown as number[];
  }

  public get dvbSubPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.DvbSubPids'),
        outputPath: 'PacketIdentifiersMap.DvbSubPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.DvbSubPids', props);
    return resource.getResponseField('PacketIdentifiersMap.DvbSubPids') as unknown as number[];
  }

  public get dvbTeletextPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.DvbTeletextPid'),
        outputPath: 'PacketIdentifiersMap.DvbTeletextPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.DvbTeletextPid', props);
    return resource.getResponseField('PacketIdentifiersMap.DvbTeletextPid') as unknown as number;
  }

  public get etvPlatformPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.EtvPlatformPid'),
        outputPath: 'PacketIdentifiersMap.EtvPlatformPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.EtvPlatformPid', props);
    return resource.getResponseField('PacketIdentifiersMap.EtvPlatformPid') as unknown as number;
  }

  public get etvSignalPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.EtvSignalPid'),
        outputPath: 'PacketIdentifiersMap.EtvSignalPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.EtvSignalPid', props);
    return resource.getResponseField('PacketIdentifiersMap.EtvSignalPid') as unknown as number;
  }

  public get klvDataPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.KlvDataPids'),
        outputPath: 'PacketIdentifiersMap.KlvDataPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.KlvDataPids', props);
    return resource.getResponseField('PacketIdentifiersMap.KlvDataPids') as unknown as number[];
  }

  public get pcrPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.PcrPid'),
        outputPath: 'PacketIdentifiersMap.PcrPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.PcrPid', props);
    return resource.getResponseField('PacketIdentifiersMap.PcrPid') as unknown as number;
  }

  public get pmtPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.PmtPid'),
        outputPath: 'PacketIdentifiersMap.PmtPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.PmtPid', props);
    return resource.getResponseField('PacketIdentifiersMap.PmtPid') as unknown as number;
  }

  public get privateMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid'),
        outputPath: 'PacketIdentifiersMap.PrivateMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid', props);
    return resource.getResponseField('PacketIdentifiersMap.PrivateMetadataPid') as unknown as number;
  }

  public get scte27Pids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.Scte27Pids'),
        outputPath: 'PacketIdentifiersMap.Scte27Pids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.Scte27Pids', props);
    return resource.getResponseField('PacketIdentifiersMap.Scte27Pids') as unknown as number[];
  }

  public get scte35Pid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.Scte35Pid'),
        outputPath: 'PacketIdentifiersMap.Scte35Pid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.Scte35Pid', props);
    return resource.getResponseField('PacketIdentifiersMap.Scte35Pid') as unknown as number;
  }

  public get timedMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.TimedMetadataPid'),
        outputPath: 'PacketIdentifiersMap.TimedMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.TimedMetadataPid', props);
    return resource.getResponseField('PacketIdentifiersMap.TimedMetadataPid') as unknown as number;
  }

  public get videoPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeMultiplexProgram.PacketIdentifiersMap.VideoPid'),
        outputPath: 'PacketIdentifiersMap.VideoPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeMultiplexProgram.PacketIdentifiersMap.VideoPid', props);
    return resource.getResponseField('PacketIdentifiersMap.VideoPid') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeOffering {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeOfferingRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.Arn'),
        outputPath: 'Arn',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.Duration'),
        outputPath: 'Duration',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.Duration', props);
    return resource.getResponseField('Duration') as unknown as number;
  }

  public get durationUnits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.DurationUnits'),
        outputPath: 'DurationUnits',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.DurationUnits', props);
    return resource.getResponseField('DurationUnits') as unknown as string;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.FixedPrice'),
        outputPath: 'FixedPrice',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.FixedPrice', props);
    return resource.getResponseField('FixedPrice') as unknown as number;
  }

  public get offeringDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.OfferingDescription'),
        outputPath: 'OfferingDescription',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.OfferingDescription', props);
    return resource.getResponseField('OfferingDescription') as unknown as string;
  }

  public get offeringId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.OfferingId'),
        outputPath: 'OfferingId',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.OfferingId', props);
    return resource.getResponseField('OfferingId') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.OfferingType'),
        outputPath: 'OfferingType',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.OfferingType', props);
    return resource.getResponseField('OfferingType') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.Region'),
        outputPath: 'Region',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.Region', props);
    return resource.getResponseField('Region') as unknown as string;
  }

  public get resourceSpecification(): MediaLiveResponsesDescribeOfferingResourceSpecification {
    return new MediaLiveResponsesDescribeOfferingResourceSpecification(this.__scope, this.__resources, this.__input);
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.UsagePrice'),
        outputPath: 'UsagePrice',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.UsagePrice', props);
    return resource.getResponseField('UsagePrice') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeOfferingResourceSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeOfferingRequest) {
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.ChannelClass'),
        outputPath: 'ResourceSpecification.ChannelClass',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.ChannelClass', props);
    return resource.getResponseField('ResourceSpecification.ChannelClass') as unknown as string;
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.Codec'),
        outputPath: 'ResourceSpecification.Codec',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.Codec', props);
    return resource.getResponseField('ResourceSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.MaximumBitrate'),
        outputPath: 'ResourceSpecification.MaximumBitrate',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.MaximumBitrate', props);
    return resource.getResponseField('ResourceSpecification.MaximumBitrate') as unknown as string;
  }

  public get maximumFramerate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.MaximumFramerate'),
        outputPath: 'ResourceSpecification.MaximumFramerate',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.MaximumFramerate', props);
    return resource.getResponseField('ResourceSpecification.MaximumFramerate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.Resolution'),
        outputPath: 'ResourceSpecification.Resolution',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.Resolution', props);
    return resource.getResponseField('ResourceSpecification.Resolution') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.ResourceType'),
        outputPath: 'ResourceSpecification.ResourceType',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.ResourceType', props);
    return resource.getResponseField('ResourceSpecification.ResourceType') as unknown as string;
  }

  public get specialFeature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.SpecialFeature'),
        outputPath: 'ResourceSpecification.SpecialFeature',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.SpecialFeature', props);
    return resource.getResponseField('ResourceSpecification.SpecialFeature') as unknown as string;
  }

  public get videoQuality(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeOffering.ResourceSpecification.VideoQuality'),
        outputPath: 'ResourceSpecification.VideoQuality',
        parameters: {
          OfferingId: this.__input.offeringId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOffering.ResourceSpecification.VideoQuality', props);
    return resource.getResponseField('ResourceSpecification.VideoQuality') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeReservationRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Arn'),
        outputPath: 'Arn',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get count(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Count'),
        outputPath: 'Count',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Count', props);
    return resource.getResponseField('Count') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.CurrencyCode'),
        outputPath: 'CurrencyCode',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.CurrencyCode', props);
    return resource.getResponseField('CurrencyCode') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Duration'),
        outputPath: 'Duration',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Duration', props);
    return resource.getResponseField('Duration') as unknown as number;
  }

  public get durationUnits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.DurationUnits'),
        outputPath: 'DurationUnits',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.DurationUnits', props);
    return resource.getResponseField('DurationUnits') as unknown as string;
  }

  public get end(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.End'),
        outputPath: 'End',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.End', props);
    return resource.getResponseField('End') as unknown as string;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.FixedPrice'),
        outputPath: 'FixedPrice',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.FixedPrice', props);
    return resource.getResponseField('FixedPrice') as unknown as number;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Name'),
        outputPath: 'Name',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get offeringDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.OfferingDescription'),
        outputPath: 'OfferingDescription',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.OfferingDescription', props);
    return resource.getResponseField('OfferingDescription') as unknown as string;
  }

  public get offeringId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.OfferingId'),
        outputPath: 'OfferingId',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.OfferingId', props);
    return resource.getResponseField('OfferingId') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.OfferingType'),
        outputPath: 'OfferingType',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.OfferingType', props);
    return resource.getResponseField('OfferingType') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Region'),
        outputPath: 'Region',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Region', props);
    return resource.getResponseField('Region') as unknown as string;
  }

  public get reservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ReservationId'),
        outputPath: 'ReservationId',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ReservationId', props);
    return resource.getResponseField('ReservationId') as unknown as string;
  }

  public get resourceSpecification(): MediaLiveResponsesDescribeReservationResourceSpecification {
    return new MediaLiveResponsesDescribeReservationResourceSpecification(this.__scope, this.__resources, this.__input);
  }

  public get start(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Start'),
        outputPath: 'Start',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Start', props);
    return resource.getResponseField('Start') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.State'),
        outputPath: 'State',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.Tags'),
        outputPath: 'Tags',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.UsagePrice'),
        outputPath: 'UsagePrice',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.UsagePrice', props);
    return resource.getResponseField('UsagePrice') as unknown as number;
  }

}

export class MediaLiveResponsesDescribeReservationResourceSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeReservationRequest) {
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.ChannelClass'),
        outputPath: 'ResourceSpecification.ChannelClass',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.ChannelClass', props);
    return resource.getResponseField('ResourceSpecification.ChannelClass') as unknown as string;
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.Codec'),
        outputPath: 'ResourceSpecification.Codec',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.Codec', props);
    return resource.getResponseField('ResourceSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.MaximumBitrate'),
        outputPath: 'ResourceSpecification.MaximumBitrate',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.MaximumBitrate', props);
    return resource.getResponseField('ResourceSpecification.MaximumBitrate') as unknown as string;
  }

  public get maximumFramerate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.MaximumFramerate'),
        outputPath: 'ResourceSpecification.MaximumFramerate',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.MaximumFramerate', props);
    return resource.getResponseField('ResourceSpecification.MaximumFramerate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.Resolution'),
        outputPath: 'ResourceSpecification.Resolution',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.Resolution', props);
    return resource.getResponseField('ResourceSpecification.Resolution') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.ResourceType'),
        outputPath: 'ResourceSpecification.ResourceType',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.ResourceType', props);
    return resource.getResponseField('ResourceSpecification.ResourceType') as unknown as string;
  }

  public get specialFeature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.SpecialFeature'),
        outputPath: 'ResourceSpecification.SpecialFeature',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.SpecialFeature', props);
    return resource.getResponseField('ResourceSpecification.SpecialFeature') as unknown as string;
  }

  public get videoQuality(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeReservation.ResourceSpecification.VideoQuality'),
        outputPath: 'ResourceSpecification.VideoQuality',
        parameters: {
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservation.ResourceSpecification.VideoQuality', props);
    return resource.getResponseField('ResourceSpecification.VideoQuality') as unknown as string;
  }

}

export class MediaLiveResponsesDescribeSchedule {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveDescribeScheduleRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSchedule',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeSchedule.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ChannelId: this.__input.channelId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSchedule.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get scheduleActions(): shapes.MediaLiveScheduleAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSchedule',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.DescribeSchedule.ScheduleActions'),
        outputPath: 'ScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSchedule.ScheduleActions', props);
    return resource.getResponseField('ScheduleActions') as unknown as shapes.MediaLiveScheduleAction[];
  }

}

export class MediaLiveResponsesListChannels {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListChannelsRequest) {
  }

  public get channels(): shapes.MediaLiveChannelSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listChannels',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListChannels.Channels'),
        outputPath: 'Channels',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListChannels.Channels', props);
    return resource.getResponseField('Channels') as unknown as shapes.MediaLiveChannelSummary[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listChannels',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListChannels.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListChannels.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListInputDeviceTransfers {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListInputDeviceTransfersRequest) {
  }

  public get inputDeviceTransfers(): shapes.MediaLiveTransferringInputDeviceSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputDeviceTransfers',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputDeviceTransfers.InputDeviceTransfers'),
        outputPath: 'InputDeviceTransfers',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          TransferType: this.__input.transferType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputDeviceTransfers.InputDeviceTransfers', props);
    return resource.getResponseField('InputDeviceTransfers') as unknown as shapes.MediaLiveTransferringInputDeviceSummary[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputDeviceTransfers',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputDeviceTransfers.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
          TransferType: this.__input.transferType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputDeviceTransfers.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListInputDevices {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListInputDevicesRequest) {
  }

  public get inputDevices(): shapes.MediaLiveInputDeviceSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputDevices',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputDevices.InputDevices'),
        outputPath: 'InputDevices',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputDevices.InputDevices', props);
    return resource.getResponseField('InputDevices') as unknown as shapes.MediaLiveInputDeviceSummary[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputDevices',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputDevices.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputDevices.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListInputSecurityGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListInputSecurityGroupsRequest) {
  }

  public get inputSecurityGroups(): shapes.MediaLiveInputSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputSecurityGroups',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputSecurityGroups.InputSecurityGroups'),
        outputPath: 'InputSecurityGroups',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputSecurityGroups.InputSecurityGroups', props);
    return resource.getResponseField('InputSecurityGroups') as unknown as shapes.MediaLiveInputSecurityGroup[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputSecurityGroups',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputSecurityGroups.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputSecurityGroups.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListInputs {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListInputsRequest) {
  }

  public get inputs(): shapes.MediaLiveInput[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputs',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputs.Inputs'),
        outputPath: 'Inputs',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputs.Inputs', props);
    return resource.getResponseField('Inputs') as unknown as shapes.MediaLiveInput[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listInputs',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListInputs.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListInputs.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListMultiplexPrograms {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListMultiplexProgramsRequest) {
  }

  public get multiplexPrograms(): shapes.MediaLiveMultiplexProgramSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listMultiplexPrograms',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListMultiplexPrograms.MultiplexPrograms'),
        outputPath: 'MultiplexPrograms',
        parameters: {
          MaxResults: this.__input.maxResults,
          MultiplexId: this.__input.multiplexId,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListMultiplexPrograms.MultiplexPrograms', props);
    return resource.getResponseField('MultiplexPrograms') as unknown as shapes.MediaLiveMultiplexProgramSummary[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listMultiplexPrograms',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListMultiplexPrograms.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          MultiplexId: this.__input.multiplexId,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListMultiplexPrograms.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListMultiplexes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListMultiplexesRequest) {
  }

  public get multiplexes(): shapes.MediaLiveMultiplexSummary[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listMultiplexes',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListMultiplexes.Multiplexes'),
        outputPath: 'Multiplexes',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListMultiplexes.Multiplexes', props);
    return resource.getResponseField('Multiplexes') as unknown as shapes.MediaLiveMultiplexSummary[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listMultiplexes',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListMultiplexes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListMultiplexes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class MediaLiveResponsesListOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListOfferingsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOfferings',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelConfiguration: this.__input.channelConfiguration,
          Codec: this.__input.codec,
          Duration: this.__input.duration,
          MaxResults: this.__input.maxResults,
          MaximumBitrate: this.__input.maximumBitrate,
          MaximumFramerate: this.__input.maximumFramerate,
          NextToken: this.__input.nextToken,
          Resolution: this.__input.resolution,
          ResourceType: this.__input.resourceType,
          SpecialFeature: this.__input.specialFeature,
          VideoQuality: this.__input.videoQuality,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get offerings(): shapes.MediaLiveOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listOfferings',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListOfferings.Offerings'),
        outputPath: 'Offerings',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelConfiguration: this.__input.channelConfiguration,
          Codec: this.__input.codec,
          Duration: this.__input.duration,
          MaxResults: this.__input.maxResults,
          MaximumBitrate: this.__input.maximumBitrate,
          MaximumFramerate: this.__input.maximumFramerate,
          NextToken: this.__input.nextToken,
          Resolution: this.__input.resolution,
          ResourceType: this.__input.resourceType,
          SpecialFeature: this.__input.specialFeature,
          VideoQuality: this.__input.videoQuality,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListOfferings.Offerings', props);
    return resource.getResponseField('Offerings') as unknown as shapes.MediaLiveOffering[];
  }

}

export class MediaLiveResponsesListReservations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListReservationsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReservations',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListReservations.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ChannelClass: this.__input.channelClass,
          Codec: this.__input.codec,
          MaxResults: this.__input.maxResults,
          MaximumBitrate: this.__input.maximumBitrate,
          MaximumFramerate: this.__input.maximumFramerate,
          NextToken: this.__input.nextToken,
          Resolution: this.__input.resolution,
          ResourceType: this.__input.resourceType,
          SpecialFeature: this.__input.specialFeature,
          VideoQuality: this.__input.videoQuality,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReservations.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservations(): shapes.MediaLiveReservation[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listReservations',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListReservations.Reservations'),
        outputPath: 'Reservations',
        parameters: {
          ChannelClass: this.__input.channelClass,
          Codec: this.__input.codec,
          MaxResults: this.__input.maxResults,
          MaximumBitrate: this.__input.maximumBitrate,
          MaximumFramerate: this.__input.maximumFramerate,
          NextToken: this.__input.nextToken,
          Resolution: this.__input.resolution,
          ResourceType: this.__input.resourceType,
          SpecialFeature: this.__input.specialFeature,
          VideoQuality: this.__input.videoQuality,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListReservations.Reservations', props);
    return resource.getResponseField('Reservations') as unknown as shapes.MediaLiveReservation[];
  }

}

export class MediaLiveResponsesListTagsForResource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveListTagsForResourceRequest) {
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTagsForResource',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.ListTagsForResource.Tags'),
        outputPath: 'Tags',
        parameters: {
          ResourceArn: this.__input.resourceArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListTagsForResource.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesPurchaseOffering {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLivePurchaseOfferingRequest) {
  }

  public get reservation(): MediaLiveResponsesPurchaseOfferingReservation {
    return new MediaLiveResponsesPurchaseOfferingReservation(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesPurchaseOfferingReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLivePurchaseOfferingRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Arn'),
        outputPath: 'Reservation.Arn',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Arn', props);
    return resource.getResponseField('Reservation.Arn') as unknown as string;
  }

  public get count(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Count'),
        outputPath: 'Reservation.Count',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Count', props);
    return resource.getResponseField('Reservation.Count') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.CurrencyCode'),
        outputPath: 'Reservation.CurrencyCode',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.CurrencyCode', props);
    return resource.getResponseField('Reservation.CurrencyCode') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Duration'),
        outputPath: 'Reservation.Duration',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Duration', props);
    return resource.getResponseField('Reservation.Duration') as unknown as number;
  }

  public get durationUnits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.DurationUnits'),
        outputPath: 'Reservation.DurationUnits',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.DurationUnits', props);
    return resource.getResponseField('Reservation.DurationUnits') as unknown as string;
  }

  public get end(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.End'),
        outputPath: 'Reservation.End',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.End', props);
    return resource.getResponseField('Reservation.End') as unknown as string;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.FixedPrice'),
        outputPath: 'Reservation.FixedPrice',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.FixedPrice', props);
    return resource.getResponseField('Reservation.FixedPrice') as unknown as number;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Name'),
        outputPath: 'Reservation.Name',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Name', props);
    return resource.getResponseField('Reservation.Name') as unknown as string;
  }

  public get offeringDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.OfferingDescription'),
        outputPath: 'Reservation.OfferingDescription',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.OfferingDescription', props);
    return resource.getResponseField('Reservation.OfferingDescription') as unknown as string;
  }

  public get offeringId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.OfferingId'),
        outputPath: 'Reservation.OfferingId',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.OfferingId', props);
    return resource.getResponseField('Reservation.OfferingId') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.OfferingType'),
        outputPath: 'Reservation.OfferingType',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.OfferingType', props);
    return resource.getResponseField('Reservation.OfferingType') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Region'),
        outputPath: 'Reservation.Region',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Region', props);
    return resource.getResponseField('Reservation.Region') as unknown as string;
  }

  public get reservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ReservationId'),
        outputPath: 'Reservation.ReservationId',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ReservationId', props);
    return resource.getResponseField('Reservation.ReservationId') as unknown as string;
  }

  public get resourceSpecification(): MediaLiveResponsesPurchaseOfferingReservationResourceSpecification {
    return new MediaLiveResponsesPurchaseOfferingReservationResourceSpecification(this.__scope, this.__resources, this.__input);
  }

  public get start(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Start'),
        outputPath: 'Reservation.Start',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Start', props);
    return resource.getResponseField('Reservation.Start') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.State'),
        outputPath: 'Reservation.State',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.State', props);
    return resource.getResponseField('Reservation.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.Tags'),
        outputPath: 'Reservation.Tags',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.Tags', props);
    return resource.getResponseField('Reservation.Tags') as unknown as Record<string, string>;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.UsagePrice'),
        outputPath: 'Reservation.UsagePrice',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.UsagePrice', props);
    return resource.getResponseField('Reservation.UsagePrice') as unknown as number;
  }

}

export class MediaLiveResponsesPurchaseOfferingReservationResourceSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLivePurchaseOfferingRequest) {
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.ChannelClass'),
        outputPath: 'Reservation.ResourceSpecification.ChannelClass',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.ChannelClass', props);
    return resource.getResponseField('Reservation.ResourceSpecification.ChannelClass') as unknown as string;
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.Codec'),
        outputPath: 'Reservation.ResourceSpecification.Codec',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.Codec', props);
    return resource.getResponseField('Reservation.ResourceSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.MaximumBitrate'),
        outputPath: 'Reservation.ResourceSpecification.MaximumBitrate',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.MaximumBitrate', props);
    return resource.getResponseField('Reservation.ResourceSpecification.MaximumBitrate') as unknown as string;
  }

  public get maximumFramerate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.MaximumFramerate'),
        outputPath: 'Reservation.ResourceSpecification.MaximumFramerate',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.MaximumFramerate', props);
    return resource.getResponseField('Reservation.ResourceSpecification.MaximumFramerate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.Resolution'),
        outputPath: 'Reservation.ResourceSpecification.Resolution',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.Resolution', props);
    return resource.getResponseField('Reservation.ResourceSpecification.Resolution') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.ResourceType'),
        outputPath: 'Reservation.ResourceSpecification.ResourceType',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.ResourceType', props);
    return resource.getResponseField('Reservation.ResourceSpecification.ResourceType') as unknown as string;
  }

  public get specialFeature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.SpecialFeature'),
        outputPath: 'Reservation.ResourceSpecification.SpecialFeature',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.SpecialFeature', props);
    return resource.getResponseField('Reservation.ResourceSpecification.SpecialFeature') as unknown as string;
  }

  public get videoQuality(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseOffering',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.PurchaseOffering.Reservation.ResourceSpecification.VideoQuality'),
        outputPath: 'Reservation.ResourceSpecification.VideoQuality',
        parameters: {
          Count: this.__input.count,
          Name: this.__input.name,
          OfferingId: this.__input.offeringId,
          RequestId: this.__input.requestId,
          Start: this.__input.start,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseOffering.Reservation.ResourceSpecification.VideoQuality', props);
    return resource.getResponseField('Reservation.ResourceSpecification.VideoQuality') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesStartChannelCdiInputSpecification {
    return new MediaLiveResponsesStartChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.ChannelClass'),
        outputPath: 'ChannelClass',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.ChannelClass', props);
    return resource.getResponseField('ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EgressEndpoints'),
        outputPath: 'EgressEndpoints',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EgressEndpoints', props);
    return resource.getResponseField('EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesStartChannelEncoderSettings {
    return new MediaLiveResponsesStartChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.Id'),
        outputPath: 'Id',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.InputAttachments'),
        outputPath: 'InputAttachments',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.InputAttachments', props);
    return resource.getResponseField('InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesStartChannelInputSpecification {
    return new MediaLiveResponsesStartChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.LogLevel'),
        outputPath: 'LogLevel',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.LogLevel', props);
    return resource.getResponseField('LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.Name'),
        outputPath: 'Name',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.PipelineDetails'),
        outputPath: 'PipelineDetails',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.PipelineDetails', props);
    return resource.getResponseField('PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.RoleArn'),
        outputPath: 'RoleArn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.RoleArn', props);
    return resource.getResponseField('RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.State'),
        outputPath: 'State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesStartChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.CdiInputSpecification.Resolution'),
        outputPath: 'CdiInputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AudioDescriptions'),
        outputPath: 'EncoderSettings.AudioDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesStartChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesStartChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesStartChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesStartChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'EncoderSettings.CaptionDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesStartChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesStartChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesStartChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesStartChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesStartChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesStartChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.OutputGroups'),
        outputPath: 'EncoderSettings.OutputGroups',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesStartChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesStartChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.VideoDescriptions'),
        outputPath: 'EncoderSettings.VideoDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesStartChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesStartChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'EncoderSettings.AvailBlanking.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get availSettings(): MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'EncoderSettings.BlackoutSlate.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesStartChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesStartChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesStartChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesStartChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesStartChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'EncoderSettings.TimecodeConfig.Source',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesStartChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartChannelRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.InputSpecification.Codec'),
        outputPath: 'InputSpecification.Codec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.InputSpecification.Codec', props);
    return resource.getResponseField('InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.InputSpecification.MaximumBitrate'),
        outputPath: 'InputSpecification.MaximumBitrate',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartChannel.InputSpecification.Resolution'),
        outputPath: 'InputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartChannel.InputSpecification.Resolution', props);
    return resource.getResponseField('InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesStartMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartMultiplexRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.Arn'),
        outputPath: 'Arn',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.AvailabilityZones'),
        outputPath: 'AvailabilityZones',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.AvailabilityZones', props);
    return resource.getResponseField('AvailabilityZones') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveMultiplexOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveMultiplexOutputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.Id'),
        outputPath: 'Id',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get multiplexSettings(): MediaLiveResponsesStartMultiplexMultiplexSettings {
    return new MediaLiveResponsesStartMultiplexMultiplexSettings(this.__scope, this.__resources, this.__input);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.Name'),
        outputPath: 'Name',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get programCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.ProgramCount'),
        outputPath: 'ProgramCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.ProgramCount', props);
    return resource.getResponseField('ProgramCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.State'),
        outputPath: 'State',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.Tags'),
        outputPath: 'Tags',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesStartMultiplexMultiplexSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStartMultiplexRequest) {
  }

  public get maximumVideoBufferDelayMilliseconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds'),
        outputPath: 'MultiplexSettings.MaximumVideoBufferDelayMilliseconds',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds', props);
    return resource.getResponseField('MultiplexSettings.MaximumVideoBufferDelayMilliseconds') as unknown as number;
  }

  public get transportStreamBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.MultiplexSettings.TransportStreamBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.MultiplexSettings.TransportStreamBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamBitrate') as unknown as number;
  }

  public get transportStreamId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.MultiplexSettings.TransportStreamId'),
        outputPath: 'MultiplexSettings.TransportStreamId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.MultiplexSettings.TransportStreamId', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamId') as unknown as number;
  }

  public get transportStreamReservedBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StartMultiplex.MultiplexSettings.TransportStreamReservedBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamReservedBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartMultiplex.MultiplexSettings.TransportStreamReservedBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamReservedBitrate') as unknown as number;
  }

}

export class MediaLiveResponsesStopChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.Arn'),
        outputPath: 'Arn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesStopChannelCdiInputSpecification {
    return new MediaLiveResponsesStopChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.ChannelClass'),
        outputPath: 'ChannelClass',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.ChannelClass', props);
    return resource.getResponseField('ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EgressEndpoints'),
        outputPath: 'EgressEndpoints',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EgressEndpoints', props);
    return resource.getResponseField('EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesStopChannelEncoderSettings {
    return new MediaLiveResponsesStopChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.Id'),
        outputPath: 'Id',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.InputAttachments'),
        outputPath: 'InputAttachments',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.InputAttachments', props);
    return resource.getResponseField('InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesStopChannelInputSpecification {
    return new MediaLiveResponsesStopChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.LogLevel'),
        outputPath: 'LogLevel',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.LogLevel', props);
    return resource.getResponseField('LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.Name'),
        outputPath: 'Name',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.PipelineDetails'),
        outputPath: 'PipelineDetails',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.PipelineDetails', props);
    return resource.getResponseField('PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.RoleArn'),
        outputPath: 'RoleArn',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.RoleArn', props);
    return resource.getResponseField('RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.State'),
        outputPath: 'State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.Tags'),
        outputPath: 'Tags',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesStopChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.CdiInputSpecification.Resolution'),
        outputPath: 'CdiInputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AudioDescriptions'),
        outputPath: 'EncoderSettings.AudioDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesStopChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesStopChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesStopChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesStopChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'EncoderSettings.CaptionDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesStopChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesStopChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesStopChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesStopChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesStopChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesStopChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.OutputGroups'),
        outputPath: 'EncoderSettings.OutputGroups',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesStopChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesStopChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.VideoDescriptions'),
        outputPath: 'EncoderSettings.VideoDescriptions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesStopChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesStopChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'EncoderSettings.AvailBlanking.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get availSettings(): MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'EncoderSettings.BlackoutSlate.State',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesStopChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesStopChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesStopChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesStopChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesStopChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'EncoderSettings.TimecodeConfig.Source',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesStopChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopChannelRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.InputSpecification.Codec'),
        outputPath: 'InputSpecification.Codec',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.InputSpecification.Codec', props);
    return resource.getResponseField('InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.InputSpecification.MaximumBitrate'),
        outputPath: 'InputSpecification.MaximumBitrate',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopChannel.InputSpecification.Resolution'),
        outputPath: 'InputSpecification.Resolution',
        parameters: {
          ChannelId: this.__input.channelId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopChannel.InputSpecification.Resolution', props);
    return resource.getResponseField('InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesStopMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopMultiplexRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.Arn'),
        outputPath: 'Arn',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.AvailabilityZones'),
        outputPath: 'AvailabilityZones',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.AvailabilityZones', props);
    return resource.getResponseField('AvailabilityZones') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveMultiplexOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.Destinations'),
        outputPath: 'Destinations',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.Destinations', props);
    return resource.getResponseField('Destinations') as unknown as shapes.MediaLiveMultiplexOutputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.Id'),
        outputPath: 'Id',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get multiplexSettings(): MediaLiveResponsesStopMultiplexMultiplexSettings {
    return new MediaLiveResponsesStopMultiplexMultiplexSettings(this.__scope, this.__resources, this.__input);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.Name'),
        outputPath: 'Name',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.PipelinesRunningCount'),
        outputPath: 'PipelinesRunningCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.PipelinesRunningCount', props);
    return resource.getResponseField('PipelinesRunningCount') as unknown as number;
  }

  public get programCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.ProgramCount'),
        outputPath: 'ProgramCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.ProgramCount', props);
    return resource.getResponseField('ProgramCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.State'),
        outputPath: 'State',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.State', props);
    return resource.getResponseField('State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.Tags'),
        outputPath: 'Tags',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.Tags', props);
    return resource.getResponseField('Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesStopMultiplexMultiplexSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveStopMultiplexRequest) {
  }

  public get maximumVideoBufferDelayMilliseconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds'),
        outputPath: 'MultiplexSettings.MaximumVideoBufferDelayMilliseconds',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds', props);
    return resource.getResponseField('MultiplexSettings.MaximumVideoBufferDelayMilliseconds') as unknown as number;
  }

  public get transportStreamBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.MultiplexSettings.TransportStreamBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.MultiplexSettings.TransportStreamBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamBitrate') as unknown as number;
  }

  public get transportStreamId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.MultiplexSettings.TransportStreamId'),
        outputPath: 'MultiplexSettings.TransportStreamId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.MultiplexSettings.TransportStreamId', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamId') as unknown as number;
  }

  public get transportStreamReservedBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.StopMultiplex.MultiplexSettings.TransportStreamReservedBitrate'),
        outputPath: 'MultiplexSettings.TransportStreamReservedBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopMultiplex.MultiplexSettings.TransportStreamReservedBitrate', props);
    return resource.getResponseField('MultiplexSettings.TransportStreamReservedBitrate') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get channel(): MediaLiveResponsesUpdateChannelChannel {
    return new MediaLiveResponsesUpdateChannelChannel(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateChannelChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.Arn'),
        outputPath: 'Channel.Arn',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.Arn', props);
    return resource.getResponseField('Channel.Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesUpdateChannelChannelCdiInputSpecification {
    return new MediaLiveResponsesUpdateChannelChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.ChannelClass'),
        outputPath: 'Channel.ChannelClass',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.ChannelClass', props);
    return resource.getResponseField('Channel.ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.Destinations'),
        outputPath: 'Channel.Destinations',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.Destinations', props);
    return resource.getResponseField('Channel.Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EgressEndpoints'),
        outputPath: 'Channel.EgressEndpoints',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EgressEndpoints', props);
    return resource.getResponseField('Channel.EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesUpdateChannelChannelEncoderSettings {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.Id'),
        outputPath: 'Channel.Id',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.Id', props);
    return resource.getResponseField('Channel.Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.InputAttachments'),
        outputPath: 'Channel.InputAttachments',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.InputAttachments', props);
    return resource.getResponseField('Channel.InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesUpdateChannelChannelInputSpecification {
    return new MediaLiveResponsesUpdateChannelChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.LogLevel'),
        outputPath: 'Channel.LogLevel',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.LogLevel', props);
    return resource.getResponseField('Channel.LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.Name'),
        outputPath: 'Channel.Name',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.Name', props);
    return resource.getResponseField('Channel.Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.PipelineDetails'),
        outputPath: 'Channel.PipelineDetails',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.PipelineDetails', props);
    return resource.getResponseField('Channel.PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.PipelinesRunningCount'),
        outputPath: 'Channel.PipelinesRunningCount',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.PipelinesRunningCount', props);
    return resource.getResponseField('Channel.PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.RoleArn'),
        outputPath: 'Channel.RoleArn',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.RoleArn', props);
    return resource.getResponseField('Channel.RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.State'),
        outputPath: 'Channel.State',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.State', props);
    return resource.getResponseField('Channel.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.Tags'),
        outputPath: 'Channel.Tags',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.Tags', props);
    return resource.getResponseField('Channel.Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesUpdateChannelChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.CdiInputSpecification.Resolution'),
        outputPath: 'Channel.CdiInputSpecification.Resolution',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('Channel.CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AudioDescriptions'),
        outputPath: 'Channel.EncoderSettings.AudioDescriptions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'Channel.EncoderSettings.CaptionDescriptions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.OutputGroups'),
        outputPath: 'Channel.EncoderSettings.OutputGroups',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('Channel.EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.VideoDescriptions'),
        outputPath: 'Channel.EncoderSettings.VideoDescriptions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.State',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get availSettings(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.State',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'Channel.EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('Channel.EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'Channel.EncoderSettings.TimecodeConfig.Source',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('Channel.EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'Channel.EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('Channel.EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateChannelChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.InputSpecification.Codec'),
        outputPath: 'Channel.InputSpecification.Codec',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.InputSpecification.Codec', props);
    return resource.getResponseField('Channel.InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.InputSpecification.MaximumBitrate'),
        outputPath: 'Channel.InputSpecification.MaximumBitrate',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('Channel.InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannel',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannel.Channel.InputSpecification.Resolution'),
        outputPath: 'Channel.InputSpecification.Resolution',
        parameters: {
          CdiInputSpecification: {
            Resolution: this.__input.cdiInputSpecification?.resolution,
          },
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
          EncoderSettings: {
            AudioDescriptions: this.__input.encoderSettings?.audioDescriptions,
            AvailBlanking: {
              AvailBlankingImage: {
                PasswordParam: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.passwordParam,
                Uri: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.uri,
                Username: this.__input.encoderSettings?.availBlanking?.availBlankingImage?.username,
              },
              State: this.__input.encoderSettings?.availBlanking?.state,
            },
            AvailConfiguration: {
              AvailSettings: {
                Scte35SpliceInsert: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35SpliceInsert?.webDeliveryAllowedFlag,
                },
                Scte35TimeSignalApos: {
                  AdAvailOffset: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.adAvailOffset,
                  NoRegionalBlackoutFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.noRegionalBlackoutFlag,
                  WebDeliveryAllowedFlag: this.__input.encoderSettings?.availConfiguration?.availSettings?.scte35TimeSignalApos?.webDeliveryAllowedFlag,
                },
              },
            },
            BlackoutSlate: {
              BlackoutSlateImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.blackoutSlateImage?.username,
              },
              NetworkEndBlackout: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackout,
              NetworkEndBlackoutImage: {
                PasswordParam: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.passwordParam,
                Uri: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.uri,
                Username: this.__input.encoderSettings?.blackoutSlate?.networkEndBlackoutImage?.username,
              },
              NetworkId: this.__input.encoderSettings?.blackoutSlate?.networkId,
              State: this.__input.encoderSettings?.blackoutSlate?.state,
            },
            CaptionDescriptions: this.__input.encoderSettings?.captionDescriptions,
            FeatureActivations: {
              InputPrepareScheduleActions: this.__input.encoderSettings?.featureActivations?.inputPrepareScheduleActions,
            },
            GlobalConfiguration: {
              InitialAudioGain: this.__input.encoderSettings?.globalConfiguration?.initialAudioGain,
              InputEndAction: this.__input.encoderSettings?.globalConfiguration?.inputEndAction,
              InputLossBehavior: {
                BlackFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.blackFrameMsec,
                InputLossImageColor: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageColor,
                InputLossImageSlate: {
                  PasswordParam: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.passwordParam,
                  Uri: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.uri,
                  Username: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageSlate?.username,
                },
                InputLossImageType: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.inputLossImageType,
                RepeatFrameMsec: this.__input.encoderSettings?.globalConfiguration?.inputLossBehavior?.repeatFrameMsec,
              },
              OutputLockingMode: this.__input.encoderSettings?.globalConfiguration?.outputLockingMode,
              OutputTimingSource: this.__input.encoderSettings?.globalConfiguration?.outputTimingSource,
              SupportLowFramerateInputs: this.__input.encoderSettings?.globalConfiguration?.supportLowFramerateInputs,
            },
            NielsenConfiguration: {
              DistributorId: this.__input.encoderSettings?.nielsenConfiguration?.distributorId,
              NielsenPcmToId3Tagging: this.__input.encoderSettings?.nielsenConfiguration?.nielsenPcmToId3Tagging,
            },
            OutputGroups: this.__input.encoderSettings?.outputGroups,
            TimecodeConfig: {
              Source: this.__input.encoderSettings?.timecodeConfig.source,
              SyncThreshold: this.__input.encoderSettings?.timecodeConfig.syncThreshold,
            },
            VideoDescriptions: this.__input.encoderSettings?.videoDescriptions,
          },
          InputAttachments: this.__input.inputAttachments,
          InputSpecification: {
            Codec: this.__input.inputSpecification?.codec,
            MaximumBitrate: this.__input.inputSpecification?.maximumBitrate,
            Resolution: this.__input.inputSpecification?.resolution,
          },
          LogLevel: this.__input.logLevel,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannel.Channel.InputSpecification.Resolution', props);
    return resource.getResponseField('Channel.InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClass {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get channel(): MediaLiveResponsesUpdateChannelClassChannel {
    return new MediaLiveResponsesUpdateChannelClassChannel(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateChannelClassChannel {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.Arn'),
        outputPath: 'Channel.Arn',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.Arn', props);
    return resource.getResponseField('Channel.Arn') as unknown as string;
  }

  public get cdiInputSpecification(): MediaLiveResponsesUpdateChannelClassChannelCdiInputSpecification {
    return new MediaLiveResponsesUpdateChannelClassChannelCdiInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.ChannelClass'),
        outputPath: 'Channel.ChannelClass',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.ChannelClass', props);
    return resource.getResponseField('Channel.ChannelClass') as unknown as string;
  }

  public get destinations(): shapes.MediaLiveOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.Destinations'),
        outputPath: 'Channel.Destinations',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.Destinations', props);
    return resource.getResponseField('Channel.Destinations') as unknown as shapes.MediaLiveOutputDestination[];
  }

  public get egressEndpoints(): shapes.MediaLiveChannelEgressEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EgressEndpoints'),
        outputPath: 'Channel.EgressEndpoints',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EgressEndpoints', props);
    return resource.getResponseField('Channel.EgressEndpoints') as unknown as shapes.MediaLiveChannelEgressEndpoint[];
  }

  public get encoderSettings(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettings {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.Id'),
        outputPath: 'Channel.Id',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.Id', props);
    return resource.getResponseField('Channel.Id') as unknown as string;
  }

  public get inputAttachments(): shapes.MediaLiveInputAttachment[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.InputAttachments'),
        outputPath: 'Channel.InputAttachments',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.InputAttachments', props);
    return resource.getResponseField('Channel.InputAttachments') as unknown as shapes.MediaLiveInputAttachment[];
  }

  public get inputSpecification(): MediaLiveResponsesUpdateChannelClassChannelInputSpecification {
    return new MediaLiveResponsesUpdateChannelClassChannelInputSpecification(this.__scope, this.__resources, this.__input);
  }

  public get logLevel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.LogLevel'),
        outputPath: 'Channel.LogLevel',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.LogLevel', props);
    return resource.getResponseField('Channel.LogLevel') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.Name'),
        outputPath: 'Channel.Name',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.Name', props);
    return resource.getResponseField('Channel.Name') as unknown as string;
  }

  public get pipelineDetails(): shapes.MediaLivePipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.PipelineDetails'),
        outputPath: 'Channel.PipelineDetails',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.PipelineDetails', props);
    return resource.getResponseField('Channel.PipelineDetails') as unknown as shapes.MediaLivePipelineDetail[];
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.PipelinesRunningCount'),
        outputPath: 'Channel.PipelinesRunningCount',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.PipelinesRunningCount', props);
    return resource.getResponseField('Channel.PipelinesRunningCount') as unknown as number;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.RoleArn'),
        outputPath: 'Channel.RoleArn',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.RoleArn', props);
    return resource.getResponseField('Channel.RoleArn') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.State'),
        outputPath: 'Channel.State',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.State', props);
    return resource.getResponseField('Channel.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.Tags'),
        outputPath: 'Channel.Tags',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.Tags', props);
    return resource.getResponseField('Channel.Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelCdiInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.CdiInputSpecification.Resolution'),
        outputPath: 'Channel.CdiInputSpecification.Resolution',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.CdiInputSpecification.Resolution', props);
    return resource.getResponseField('Channel.CdiInputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get audioDescriptions(): shapes.MediaLiveAudioDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AudioDescriptions'),
        outputPath: 'Channel.EncoderSettings.AudioDescriptions',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AudioDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.AudioDescriptions') as unknown as shapes.MediaLiveAudioDescription[];
  }

  public get availBlanking(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailBlanking {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailBlanking(this.__scope, this.__resources, this.__input);
  }

  public get availConfiguration(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfiguration {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get blackoutSlate(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlate {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlate(this.__scope, this.__resources, this.__input);
  }

  public get captionDescriptions(): shapes.MediaLiveCaptionDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.CaptionDescriptions'),
        outputPath: 'Channel.EncoderSettings.CaptionDescriptions',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.CaptionDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.CaptionDescriptions') as unknown as shapes.MediaLiveCaptionDescription[];
  }

  public get featureActivations(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsFeatureActivations {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsFeatureActivations(this.__scope, this.__resources, this.__input);
  }

  public get globalConfiguration(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfiguration {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get nielsenConfiguration(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsNielsenConfiguration {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsNielsenConfiguration(this.__scope, this.__resources, this.__input);
  }

  public get outputGroups(): shapes.MediaLiveOutputGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.OutputGroups'),
        outputPath: 'Channel.EncoderSettings.OutputGroups',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.OutputGroups', props);
    return resource.getResponseField('Channel.EncoderSettings.OutputGroups') as unknown as shapes.MediaLiveOutputGroup[];
  }

  public get timecodeConfig(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsTimecodeConfig {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsTimecodeConfig(this.__scope, this.__resources, this.__input);
  }

  public get videoDescriptions(): shapes.MediaLiveVideoDescription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.VideoDescriptions'),
        outputPath: 'Channel.EncoderSettings.VideoDescriptions',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.VideoDescriptions', props);
    return resource.getResponseField('Channel.EncoderSettings.VideoDescriptions') as unknown as shapes.MediaLiveVideoDescription[];
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailBlanking {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get availBlankingImage(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailBlankingAvailBlankingImage(this.__scope, this.__resources, this.__input);
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.State'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.State',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.State', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.State') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailBlankingAvailBlankingImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username'),
        outputPath: 'Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailBlanking.AvailBlankingImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get availSettings(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettings {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get scte35SpliceInsert(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert(this.__scope, this.__resources, this.__input);
  }

  public get scte35TimeSignalApos(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsert {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35SpliceInsert.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalApos {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get adAvailOffset(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.AdAvailOffset') as unknown as number;
  }

  public get noRegionalBlackoutFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.NoRegionalBlackoutFlag') as unknown as string;
  }

  public get webDeliveryAllowedFlag(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag'),
        outputPath: 'Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag', props);
    return resource.getResponseField('Channel.EncoderSettings.AvailConfiguration.AvailSettings.Scte35TimeSignalApos.WebDeliveryAllowedFlag') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get blackoutSlateImage(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlateBlackoutSlateImage(this.__scope, this.__resources, this.__input);
  }

  public get networkEndBlackout(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackout') as unknown as string;
  }

  public get networkEndBlackoutImage(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage(this.__scope, this.__resources, this.__input);
  }

  public get networkId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkId'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkId',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkId', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkId') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.State'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.State',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.State', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.State') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlateBlackoutSlateImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.BlackoutSlateImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsBlackoutSlateNetworkEndBlackoutImage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username'),
        outputPath: 'Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.BlackoutSlate.NetworkEndBlackoutImage.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsFeatureActivations {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get inputPrepareScheduleActions(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions'),
        outputPath: 'Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions', props);
    return resource.getResponseField('Channel.EncoderSettings.FeatureActivations.InputPrepareScheduleActions') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get initialAudioGain(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InitialAudioGain') as unknown as number;
  }

  public get inputEndAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputEndAction'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputEndAction',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputEndAction', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputEndAction') as unknown as string;
  }

  public get inputLossBehavior(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfigurationInputLossBehavior {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfigurationInputLossBehavior(this.__scope, this.__resources, this.__input);
  }

  public get outputLockingMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.OutputLockingMode') as unknown as string;
  }

  public get outputTimingSource(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.OutputTimingSource') as unknown as string;
  }

  public get supportLowFramerateInputs(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.SupportLowFramerateInputs') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfigurationInputLossBehavior {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get blackFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.BlackFrameMsec') as unknown as number;
  }

  public get inputLossImageColor(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageColor') as unknown as string;
  }

  public get inputLossImageSlate(): MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {
    return new MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(this.__scope, this.__resources, this.__input);
  }

  public get inputLossImageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageType') as unknown as string;
  }

  public get repeatFrameMsec(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.RepeatFrameMsec') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get passwordParam(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.PasswordParam') as unknown as string;
  }

  public get uri(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Uri') as unknown as string;
  }

  public get username(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username'),
        outputPath: 'Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username', props);
    return resource.getResponseField('Channel.EncoderSettings.GlobalConfiguration.InputLossBehavior.InputLossImageSlate.Username') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsNielsenConfiguration {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get distributorId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.NielsenConfiguration.DistributorId'),
        outputPath: 'Channel.EncoderSettings.NielsenConfiguration.DistributorId',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.NielsenConfiguration.DistributorId', props);
    return resource.getResponseField('Channel.EncoderSettings.NielsenConfiguration.DistributorId') as unknown as string;
  }

  public get nielsenPcmToId3Tagging(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging'),
        outputPath: 'Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging', props);
    return resource.getResponseField('Channel.EncoderSettings.NielsenConfiguration.NielsenPcmToId3Tagging') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelEncoderSettingsTimecodeConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get source(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.TimecodeConfig.Source'),
        outputPath: 'Channel.EncoderSettings.TimecodeConfig.Source',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.TimecodeConfig.Source', props);
    return resource.getResponseField('Channel.EncoderSettings.TimecodeConfig.Source') as unknown as string;
  }

  public get syncThreshold(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.EncoderSettings.TimecodeConfig.SyncThreshold'),
        outputPath: 'Channel.EncoderSettings.TimecodeConfig.SyncThreshold',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.EncoderSettings.TimecodeConfig.SyncThreshold', props);
    return resource.getResponseField('Channel.EncoderSettings.TimecodeConfig.SyncThreshold') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateChannelClassChannelInputSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateChannelClassRequest) {
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.InputSpecification.Codec'),
        outputPath: 'Channel.InputSpecification.Codec',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.InputSpecification.Codec', props);
    return resource.getResponseField('Channel.InputSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.InputSpecification.MaximumBitrate'),
        outputPath: 'Channel.InputSpecification.MaximumBitrate',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.InputSpecification.MaximumBitrate', props);
    return resource.getResponseField('Channel.InputSpecification.MaximumBitrate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateChannelClass',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateChannelClass.Channel.InputSpecification.Resolution'),
        outputPath: 'Channel.InputSpecification.Resolution',
        parameters: {
          ChannelClass: this.__input.channelClass,
          ChannelId: this.__input.channelId,
          Destinations: this.__input.destinations,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateChannelClass.Channel.InputSpecification.Resolution', props);
    return resource.getResponseField('Channel.InputSpecification.Resolution') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateInput {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputRequest) {
  }

  public get input(): MediaLiveResponsesUpdateInputInput {
    return new MediaLiveResponsesUpdateInputInput(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateInputInput {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Arn'),
        outputPath: 'Input.Arn',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Arn', props);
    return resource.getResponseField('Input.Arn') as unknown as string;
  }

  public get attachedChannels(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.AttachedChannels'),
        outputPath: 'Input.AttachedChannels',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.AttachedChannels', props);
    return resource.getResponseField('Input.AttachedChannels') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveInputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Destinations'),
        outputPath: 'Input.Destinations',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Destinations', props);
    return resource.getResponseField('Input.Destinations') as unknown as shapes.MediaLiveInputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Id'),
        outputPath: 'Input.Id',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Id', props);
    return resource.getResponseField('Input.Id') as unknown as string;
  }

  public get inputClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.InputClass'),
        outputPath: 'Input.InputClass',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.InputClass', props);
    return resource.getResponseField('Input.InputClass') as unknown as string;
  }

  public get inputDevices(): shapes.MediaLiveInputDeviceSettings[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.InputDevices'),
        outputPath: 'Input.InputDevices',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.InputDevices', props);
    return resource.getResponseField('Input.InputDevices') as unknown as shapes.MediaLiveInputDeviceSettings[];
  }

  public get inputSourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.InputSourceType'),
        outputPath: 'Input.InputSourceType',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.InputSourceType', props);
    return resource.getResponseField('Input.InputSourceType') as unknown as string;
  }

  public get mediaConnectFlows(): shapes.MediaLiveMediaConnectFlow[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.MediaConnectFlows'),
        outputPath: 'Input.MediaConnectFlows',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.MediaConnectFlows', props);
    return resource.getResponseField('Input.MediaConnectFlows') as unknown as shapes.MediaLiveMediaConnectFlow[];
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Name'),
        outputPath: 'Input.Name',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Name', props);
    return resource.getResponseField('Input.Name') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.RoleArn'),
        outputPath: 'Input.RoleArn',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.RoleArn', props);
    return resource.getResponseField('Input.RoleArn') as unknown as string;
  }

  public get securityGroups(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.SecurityGroups'),
        outputPath: 'Input.SecurityGroups',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.SecurityGroups', props);
    return resource.getResponseField('Input.SecurityGroups') as unknown as string[];
  }

  public get sources(): shapes.MediaLiveInputSource[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Sources'),
        outputPath: 'Input.Sources',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Sources', props);
    return resource.getResponseField('Input.Sources') as unknown as shapes.MediaLiveInputSource[];
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.State'),
        outputPath: 'Input.State',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.State', props);
    return resource.getResponseField('Input.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Tags'),
        outputPath: 'Input.Tags',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Tags', props);
    return resource.getResponseField('Input.Tags') as unknown as Record<string, string>;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInput',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInput.Input.Type'),
        outputPath: 'Input.Type',
        parameters: {
          Destinations: this.__input.destinations,
          InputDevices: this.__input.inputDevices,
          InputId: this.__input.inputId,
          InputSecurityGroups: this.__input.inputSecurityGroups,
          MediaConnectFlows: this.__input.mediaConnectFlows,
          Name: this.__input.name,
          RoleArn: this.__input.roleArn,
          Sources: this.__input.sources,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInput.Input.Type', props);
    return resource.getResponseField('Input.Type') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateInputDevice {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputDeviceRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.Arn'),
        outputPath: 'Arn',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.Arn', props);
    return resource.getResponseField('Arn') as unknown as string;
  }

  public get connectionState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.ConnectionState'),
        outputPath: 'ConnectionState',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.ConnectionState', props);
    return resource.getResponseField('ConnectionState') as unknown as string;
  }

  public get deviceSettingsSyncState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.DeviceSettingsSyncState'),
        outputPath: 'DeviceSettingsSyncState',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.DeviceSettingsSyncState', props);
    return resource.getResponseField('DeviceSettingsSyncState') as unknown as string;
  }

  public get deviceUpdateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.DeviceUpdateStatus'),
        outputPath: 'DeviceUpdateStatus',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.DeviceUpdateStatus', props);
    return resource.getResponseField('DeviceUpdateStatus') as unknown as string;
  }

  public get hdDeviceSettings(): MediaLiveResponsesUpdateInputDeviceHdDeviceSettings {
    return new MediaLiveResponsesUpdateInputDeviceHdDeviceSettings(this.__scope, this.__resources, this.__input);
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.Id'),
        outputPath: 'Id',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.Id', props);
    return resource.getResponseField('Id') as unknown as string;
  }

  public get macAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.MacAddress'),
        outputPath: 'MacAddress',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.MacAddress', props);
    return resource.getResponseField('MacAddress') as unknown as string;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.Name'),
        outputPath: 'Name',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.Name', props);
    return resource.getResponseField('Name') as unknown as string;
  }

  public get networkSettings(): MediaLiveResponsesUpdateInputDeviceNetworkSettings {
    return new MediaLiveResponsesUpdateInputDeviceNetworkSettings(this.__scope, this.__resources, this.__input);
  }

  public get serialNumber(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.SerialNumber'),
        outputPath: 'SerialNumber',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.SerialNumber', props);
    return resource.getResponseField('SerialNumber') as unknown as string;
  }

  public get type(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.Type'),
        outputPath: 'Type',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.Type', props);
    return resource.getResponseField('Type') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateInputDeviceHdDeviceSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputDeviceRequest) {
  }

  public get activeInput(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.ActiveInput'),
        outputPath: 'HdDeviceSettings.ActiveInput',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.ActiveInput', props);
    return resource.getResponseField('HdDeviceSettings.ActiveInput') as unknown as string;
  }

  public get configuredInput(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.ConfiguredInput'),
        outputPath: 'HdDeviceSettings.ConfiguredInput',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.ConfiguredInput', props);
    return resource.getResponseField('HdDeviceSettings.ConfiguredInput') as unknown as string;
  }

  public get deviceState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.DeviceState'),
        outputPath: 'HdDeviceSettings.DeviceState',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.DeviceState', props);
    return resource.getResponseField('HdDeviceSettings.DeviceState') as unknown as string;
  }

  public get framerate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.Framerate'),
        outputPath: 'HdDeviceSettings.Framerate',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.Framerate', props);
    return resource.getResponseField('HdDeviceSettings.Framerate') as unknown as number;
  }

  public get height(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.Height'),
        outputPath: 'HdDeviceSettings.Height',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.Height', props);
    return resource.getResponseField('HdDeviceSettings.Height') as unknown as number;
  }

  public get maxBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.MaxBitrate'),
        outputPath: 'HdDeviceSettings.MaxBitrate',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.MaxBitrate', props);
    return resource.getResponseField('HdDeviceSettings.MaxBitrate') as unknown as number;
  }

  public get scanType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.ScanType'),
        outputPath: 'HdDeviceSettings.ScanType',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.ScanType', props);
    return resource.getResponseField('HdDeviceSettings.ScanType') as unknown as string;
  }

  public get width(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.HdDeviceSettings.Width'),
        outputPath: 'HdDeviceSettings.Width',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.HdDeviceSettings.Width', props);
    return resource.getResponseField('HdDeviceSettings.Width') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateInputDeviceNetworkSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputDeviceRequest) {
  }

  public get dnsAddresses(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.NetworkSettings.DnsAddresses'),
        outputPath: 'NetworkSettings.DnsAddresses',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.NetworkSettings.DnsAddresses', props);
    return resource.getResponseField('NetworkSettings.DnsAddresses') as unknown as string[];
  }

  public get gateway(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.NetworkSettings.Gateway'),
        outputPath: 'NetworkSettings.Gateway',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.NetworkSettings.Gateway', props);
    return resource.getResponseField('NetworkSettings.Gateway') as unknown as string;
  }

  public get ipAddress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.NetworkSettings.IpAddress'),
        outputPath: 'NetworkSettings.IpAddress',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.NetworkSettings.IpAddress', props);
    return resource.getResponseField('NetworkSettings.IpAddress') as unknown as string;
  }

  public get ipScheme(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.NetworkSettings.IpScheme'),
        outputPath: 'NetworkSettings.IpScheme',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.NetworkSettings.IpScheme', props);
    return resource.getResponseField('NetworkSettings.IpScheme') as unknown as string;
  }

  public get subnetMask(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputDevice',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputDevice.NetworkSettings.SubnetMask'),
        outputPath: 'NetworkSettings.SubnetMask',
        parameters: {
          HdDeviceSettings: {
            ConfiguredInput: this.__input.hdDeviceSettings?.configuredInput,
            MaxBitrate: this.__input.hdDeviceSettings?.maxBitrate,
          },
          InputDeviceId: this.__input.inputDeviceId,
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputDevice.NetworkSettings.SubnetMask', props);
    return resource.getResponseField('NetworkSettings.SubnetMask') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateInputSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputSecurityGroupRequest) {
  }

  public get securityGroup(): MediaLiveResponsesUpdateInputSecurityGroupSecurityGroup {
    return new MediaLiveResponsesUpdateInputSecurityGroupSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateInputSecurityGroupSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateInputSecurityGroupRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputSecurityGroup.SecurityGroup.Arn'),
        outputPath: 'SecurityGroup.Arn',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputSecurityGroup.SecurityGroup.Arn', props);
    return resource.getResponseField('SecurityGroup.Arn') as unknown as string;
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputSecurityGroup.SecurityGroup.Id'),
        outputPath: 'SecurityGroup.Id',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputSecurityGroup.SecurityGroup.Id', props);
    return resource.getResponseField('SecurityGroup.Id') as unknown as string;
  }

  public get inputs(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputSecurityGroup.SecurityGroup.Inputs'),
        outputPath: 'SecurityGroup.Inputs',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputSecurityGroup.SecurityGroup.Inputs', props);
    return resource.getResponseField('SecurityGroup.Inputs') as unknown as string[];
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputSecurityGroup.SecurityGroup.State'),
        outputPath: 'SecurityGroup.State',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputSecurityGroup.SecurityGroup.State', props);
    return resource.getResponseField('SecurityGroup.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputSecurityGroup.SecurityGroup.Tags'),
        outputPath: 'SecurityGroup.Tags',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputSecurityGroup.SecurityGroup.Tags', props);
    return resource.getResponseField('SecurityGroup.Tags') as unknown as Record<string, string>;
  }

  public get whitelistRules(): shapes.MediaLiveInputWhitelistRule[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateInputSecurityGroup',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateInputSecurityGroup.SecurityGroup.WhitelistRules'),
        outputPath: 'SecurityGroup.WhitelistRules',
        parameters: {
          InputSecurityGroupId: this.__input.inputSecurityGroupId,
          Tags: this.__input.tags,
          WhitelistRules: this.__input.whitelistRules,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateInputSecurityGroup.SecurityGroup.WhitelistRules', props);
    return resource.getResponseField('SecurityGroup.WhitelistRules') as unknown as shapes.MediaLiveInputWhitelistRule[];
  }

}

export class MediaLiveResponsesUpdateMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexRequest) {
  }

  public get multiplex(): MediaLiveResponsesUpdateMultiplexMultiplex {
    return new MediaLiveResponsesUpdateMultiplexMultiplex(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateMultiplexMultiplex {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.Arn'),
        outputPath: 'Multiplex.Arn',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.Arn', props);
    return resource.getResponseField('Multiplex.Arn') as unknown as string;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.AvailabilityZones'),
        outputPath: 'Multiplex.AvailabilityZones',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.AvailabilityZones', props);
    return resource.getResponseField('Multiplex.AvailabilityZones') as unknown as string[];
  }

  public get destinations(): shapes.MediaLiveMultiplexOutputDestination[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.Destinations'),
        outputPath: 'Multiplex.Destinations',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.Destinations', props);
    return resource.getResponseField('Multiplex.Destinations') as unknown as shapes.MediaLiveMultiplexOutputDestination[];
  }

  public get id(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.Id'),
        outputPath: 'Multiplex.Id',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.Id', props);
    return resource.getResponseField('Multiplex.Id') as unknown as string;
  }

  public get multiplexSettings(): MediaLiveResponsesUpdateMultiplexMultiplexMultiplexSettings {
    return new MediaLiveResponsesUpdateMultiplexMultiplexMultiplexSettings(this.__scope, this.__resources, this.__input);
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.Name'),
        outputPath: 'Multiplex.Name',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.Name', props);
    return resource.getResponseField('Multiplex.Name') as unknown as string;
  }

  public get pipelinesRunningCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.PipelinesRunningCount'),
        outputPath: 'Multiplex.PipelinesRunningCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.PipelinesRunningCount', props);
    return resource.getResponseField('Multiplex.PipelinesRunningCount') as unknown as number;
  }

  public get programCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.ProgramCount'),
        outputPath: 'Multiplex.ProgramCount',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.ProgramCount', props);
    return resource.getResponseField('Multiplex.ProgramCount') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.State'),
        outputPath: 'Multiplex.State',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.State', props);
    return resource.getResponseField('Multiplex.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.Tags'),
        outputPath: 'Multiplex.Tags',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.Tags', props);
    return resource.getResponseField('Multiplex.Tags') as unknown as Record<string, string>;
  }

}

export class MediaLiveResponsesUpdateMultiplexMultiplexMultiplexSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexRequest) {
  }

  public get maximumVideoBufferDelayMilliseconds(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds'),
        outputPath: 'Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.MaximumVideoBufferDelayMilliseconds') as unknown as number;
  }

  public get transportStreamBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.MultiplexSettings.TransportStreamBitrate'),
        outputPath: 'Multiplex.MultiplexSettings.TransportStreamBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.MultiplexSettings.TransportStreamBitrate', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.TransportStreamBitrate') as unknown as number;
  }

  public get transportStreamId(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.MultiplexSettings.TransportStreamId'),
        outputPath: 'Multiplex.MultiplexSettings.TransportStreamId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.MultiplexSettings.TransportStreamId', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.TransportStreamId') as unknown as number;
  }

  public get transportStreamReservedBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplex',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplex.Multiplex.MultiplexSettings.TransportStreamReservedBitrate'),
        outputPath: 'Multiplex.MultiplexSettings.TransportStreamReservedBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexSettings: {
            MaximumVideoBufferDelayMilliseconds: this.__input.multiplexSettings?.maximumVideoBufferDelayMilliseconds,
            TransportStreamBitrate: this.__input.multiplexSettings?.transportStreamBitrate,
            TransportStreamId: this.__input.multiplexSettings?.transportStreamId,
            TransportStreamReservedBitrate: this.__input.multiplexSettings?.transportStreamReservedBitrate,
          },
          Name: this.__input.name,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplex.Multiplex.MultiplexSettings.TransportStreamReservedBitrate', props);
    return resource.getResponseField('Multiplex.MultiplexSettings.TransportStreamReservedBitrate') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateMultiplexProgram {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get multiplexProgram(): MediaLiveResponsesUpdateMultiplexProgramMultiplexProgram {
    return new MediaLiveResponsesUpdateMultiplexProgramMultiplexProgram(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateMultiplexProgramMultiplexProgram {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get channelId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.ChannelId'),
        outputPath: 'MultiplexProgram.ChannelId',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.ChannelId', props);
    return resource.getResponseField('MultiplexProgram.ChannelId') as unknown as string;
  }

  public get multiplexProgramSettings(): MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettings {
    return new MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettings(this.__scope, this.__resources, this.__input);
  }

  public get packetIdentifiersMap(): MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramPacketIdentifiersMap {
    return new MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramPacketIdentifiersMap(this.__scope, this.__resources, this.__input);
  }

  public get pipelineDetails(): shapes.MediaLiveMultiplexProgramPipelineDetail[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PipelineDetails'),
        outputPath: 'MultiplexProgram.PipelineDetails',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PipelineDetails', props);
    return resource.getResponseField('MultiplexProgram.PipelineDetails') as unknown as shapes.MediaLiveMultiplexProgramPipelineDetail[];
  }

  public get programName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.ProgramName'),
        outputPath: 'MultiplexProgram.ProgramName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.ProgramName', props);
    return resource.getResponseField('MultiplexProgram.ProgramName') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get preferredChannelPipeline(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.PreferredChannelPipeline') as unknown as string;
  }

  public get programNumber(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ProgramNumber'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.ProgramNumber',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ProgramNumber', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.ProgramNumber') as unknown as number;
  }

  public get serviceDescriptor(): MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsServiceDescriptor {
    return new MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsServiceDescriptor(this.__scope, this.__resources, this.__input);
  }

  public get videoSettings(): MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettings {
    return new MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsServiceDescriptor {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get providerName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ProviderName') as unknown as string;
  }

  public get serviceName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.ServiceDescriptor.ServiceName') as unknown as string;
  }

}

export class MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get constantBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.ConstantBitrate') as unknown as number;
  }

  public get statmuxSettings(): MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {
    return new MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramMultiplexProgramSettingsVideoSettingsStatmuxSettings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get maximumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MaximumBitrate') as unknown as number;
  }

  public get minimumBitrate(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.MinimumBitrate') as unknown as number;
  }

  public get priority(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority'),
        outputPath: 'MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority', props);
    return resource.getResponseField('MultiplexProgram.MultiplexProgramSettings.VideoSettings.StatmuxSettings.Priority') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateMultiplexProgramMultiplexProgramPacketIdentifiersMap {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateMultiplexProgramRequest) {
  }

  public get audioPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.AudioPids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.AudioPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.AudioPids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.AudioPids') as unknown as number[];
  }

  public get dvbSubPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbSubPids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.DvbSubPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbSubPids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.DvbSubPids') as unknown as number[];
  }

  public get dvbTeletextPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.DvbTeletextPid') as unknown as number;
  }

  public get etvPlatformPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.EtvPlatformPid') as unknown as number;
  }

  public get etvSignalPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvSignalPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.EtvSignalPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.EtvSignalPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.EtvSignalPid') as unknown as number;
  }

  public get klvDataPids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.KlvDataPids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.KlvDataPids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.KlvDataPids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.KlvDataPids') as unknown as number[];
  }

  public get pcrPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PcrPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.PcrPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PcrPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.PcrPid') as unknown as number;
  }

  public get pmtPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PmtPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.PmtPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PmtPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.PmtPid') as unknown as number;
  }

  public get privateMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.PrivateMetadataPid') as unknown as number;
  }

  public get scte27Pids(): number[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte27Pids'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.Scte27Pids',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte27Pids', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.Scte27Pids') as unknown as number[];
  }

  public get scte35Pid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte35Pid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.Scte35Pid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.Scte35Pid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.Scte35Pid') as unknown as number;
  }

  public get timedMetadataPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.TimedMetadataPid') as unknown as number;
  }

  public get videoPid(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateMultiplexProgram',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.VideoPid'),
        outputPath: 'MultiplexProgram.PacketIdentifiersMap.VideoPid',
        parameters: {
          MultiplexId: this.__input.multiplexId,
          MultiplexProgramSettings: {
            PreferredChannelPipeline: this.__input.multiplexProgramSettings?.preferredChannelPipeline,
            ProgramNumber: this.__input.multiplexProgramSettings?.programNumber,
            ServiceDescriptor: {
              ProviderName: this.__input.multiplexProgramSettings?.serviceDescriptor?.providerName,
              ServiceName: this.__input.multiplexProgramSettings?.serviceDescriptor?.serviceName,
            },
            VideoSettings: {
              ConstantBitrate: this.__input.multiplexProgramSettings?.videoSettings?.constantBitrate,
              StatmuxSettings: {
                MaximumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.maximumBitrate,
                MinimumBitrate: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.minimumBitrate,
                Priority: this.__input.multiplexProgramSettings?.videoSettings?.statmuxSettings?.priority,
              },
            },
          },
          ProgramName: this.__input.programName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateMultiplexProgram.MultiplexProgram.PacketIdentifiersMap.VideoPid', props);
    return resource.getResponseField('MultiplexProgram.PacketIdentifiersMap.VideoPid') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateReservationRequest) {
  }

  public get reservation(): MediaLiveResponsesUpdateReservationReservation {
    return new MediaLiveResponsesUpdateReservationReservation(this.__scope, this.__resources, this.__input);
  }

}

export class MediaLiveResponsesUpdateReservationReservation {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateReservationRequest) {
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Arn'),
        outputPath: 'Reservation.Arn',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Arn', props);
    return resource.getResponseField('Reservation.Arn') as unknown as string;
  }

  public get count(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Count'),
        outputPath: 'Reservation.Count',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Count', props);
    return resource.getResponseField('Reservation.Count') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.CurrencyCode'),
        outputPath: 'Reservation.CurrencyCode',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.CurrencyCode', props);
    return resource.getResponseField('Reservation.CurrencyCode') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Duration'),
        outputPath: 'Reservation.Duration',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Duration', props);
    return resource.getResponseField('Reservation.Duration') as unknown as number;
  }

  public get durationUnits(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.DurationUnits'),
        outputPath: 'Reservation.DurationUnits',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.DurationUnits', props);
    return resource.getResponseField('Reservation.DurationUnits') as unknown as string;
  }

  public get end(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.End'),
        outputPath: 'Reservation.End',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.End', props);
    return resource.getResponseField('Reservation.End') as unknown as string;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.FixedPrice'),
        outputPath: 'Reservation.FixedPrice',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.FixedPrice', props);
    return resource.getResponseField('Reservation.FixedPrice') as unknown as number;
  }

  public get name(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Name'),
        outputPath: 'Reservation.Name',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Name', props);
    return resource.getResponseField('Reservation.Name') as unknown as string;
  }

  public get offeringDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.OfferingDescription'),
        outputPath: 'Reservation.OfferingDescription',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.OfferingDescription', props);
    return resource.getResponseField('Reservation.OfferingDescription') as unknown as string;
  }

  public get offeringId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.OfferingId'),
        outputPath: 'Reservation.OfferingId',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.OfferingId', props);
    return resource.getResponseField('Reservation.OfferingId') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.OfferingType'),
        outputPath: 'Reservation.OfferingType',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.OfferingType', props);
    return resource.getResponseField('Reservation.OfferingType') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Region'),
        outputPath: 'Reservation.Region',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Region', props);
    return resource.getResponseField('Reservation.Region') as unknown as string;
  }

  public get reservationId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ReservationId'),
        outputPath: 'Reservation.ReservationId',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ReservationId', props);
    return resource.getResponseField('Reservation.ReservationId') as unknown as string;
  }

  public get resourceSpecification(): MediaLiveResponsesUpdateReservationReservationResourceSpecification {
    return new MediaLiveResponsesUpdateReservationReservationResourceSpecification(this.__scope, this.__resources, this.__input);
  }

  public get start(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Start'),
        outputPath: 'Reservation.Start',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Start', props);
    return resource.getResponseField('Reservation.Start') as unknown as string;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.State'),
        outputPath: 'Reservation.State',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.State', props);
    return resource.getResponseField('Reservation.State') as unknown as string;
  }

  public get tags(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.Tags'),
        outputPath: 'Reservation.Tags',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.Tags', props);
    return resource.getResponseField('Reservation.Tags') as unknown as Record<string, string>;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.UsagePrice'),
        outputPath: 'Reservation.UsagePrice',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.UsagePrice', props);
    return resource.getResponseField('Reservation.UsagePrice') as unknown as number;
  }

}

export class MediaLiveResponsesUpdateReservationReservationResourceSpecification {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.MediaLiveUpdateReservationRequest) {
  }

  public get channelClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.ChannelClass'),
        outputPath: 'Reservation.ResourceSpecification.ChannelClass',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.ChannelClass', props);
    return resource.getResponseField('Reservation.ResourceSpecification.ChannelClass') as unknown as string;
  }

  public get codec(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.Codec'),
        outputPath: 'Reservation.ResourceSpecification.Codec',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.Codec', props);
    return resource.getResponseField('Reservation.ResourceSpecification.Codec') as unknown as string;
  }

  public get maximumBitrate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.MaximumBitrate'),
        outputPath: 'Reservation.ResourceSpecification.MaximumBitrate',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.MaximumBitrate', props);
    return resource.getResponseField('Reservation.ResourceSpecification.MaximumBitrate') as unknown as string;
  }

  public get maximumFramerate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.MaximumFramerate'),
        outputPath: 'Reservation.ResourceSpecification.MaximumFramerate',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.MaximumFramerate', props);
    return resource.getResponseField('Reservation.ResourceSpecification.MaximumFramerate') as unknown as string;
  }

  public get resolution(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.Resolution'),
        outputPath: 'Reservation.ResourceSpecification.Resolution',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.Resolution', props);
    return resource.getResponseField('Reservation.ResourceSpecification.Resolution') as unknown as string;
  }

  public get resourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.ResourceType'),
        outputPath: 'Reservation.ResourceSpecification.ResourceType',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.ResourceType', props);
    return resource.getResponseField('Reservation.ResourceSpecification.ResourceType') as unknown as string;
  }

  public get specialFeature(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.SpecialFeature'),
        outputPath: 'Reservation.ResourceSpecification.SpecialFeature',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.SpecialFeature', props);
    return resource.getResponseField('Reservation.ResourceSpecification.SpecialFeature') as unknown as string;
  }

  public get videoQuality(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateReservation',
        service: 'MediaLive',
        physicalResourceId: cr.PhysicalResourceId.of('MediaLive.UpdateReservation.Reservation.ResourceSpecification.VideoQuality'),
        outputPath: 'Reservation.ResourceSpecification.VideoQuality',
        parameters: {
          Name: this.__input.name,
          ReservationId: this.__input.reservationId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateReservation.Reservation.ResourceSpecification.VideoQuality', props);
    return resource.getResponseField('Reservation.ResourceSpecification.VideoQuality') as unknown as string;
  }

}

