import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class EsClient extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[]) {
    super(scope, id);
  }
  public acceptInboundCrossClusterSearchConnection(input: shapes.AcceptInboundCrossClusterSearchConnectionRequest): ESAcceptInboundCrossClusterSearchConnectionResponse {
    return new ESAcceptInboundCrossClusterSearchConnectionResponse(this, 'AcceptInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public addTags(input: shapes.AddTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'addTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AddTags.'),
        parameters: {
          arn: input.arn,
          tagList: input.tagList,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTags', props);
  }
  public associatePackage(input: shapes.AssociatePackageRequest): ESAssociatePackageResponse {
    return new ESAssociatePackageResponse(this, 'AssociatePackageResponse', this.resources, input);
  }
  public cancelElasticsearchServiceSoftwareUpdate(input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest): ESCancelElasticsearchServiceSoftwareUpdateResponse {
    return new ESCancelElasticsearchServiceSoftwareUpdateResponse(this, 'CancelElasticsearchServiceSoftwareUpdateResponse', this.resources, input);
  }
  public createElasticsearchDomain(input: shapes.CreateElasticsearchDomainRequest): ESCreateElasticsearchDomainResponse {
    return new ESCreateElasticsearchDomainResponse(this, 'CreateElasticsearchDomainResponse', this.resources, input);
  }
  public createOutboundCrossClusterSearchConnection(input: shapes.CreateOutboundCrossClusterSearchConnectionRequest): ESCreateOutboundCrossClusterSearchConnectionResponse {
    return new ESCreateOutboundCrossClusterSearchConnectionResponse(this, 'CreateOutboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public createPackage(input: shapes.CreatePackageRequest): ESCreatePackageResponse {
    return new ESCreatePackageResponse(this, 'CreatePackageResponse', this.resources, input);
  }
  public deleteElasticsearchDomain(input: shapes.DeleteElasticsearchDomainRequest): ESDeleteElasticsearchDomainResponse {
    return new ESDeleteElasticsearchDomainResponse(this, 'DeleteElasticsearchDomainResponse', this.resources, input);
  }
  public deleteElasticsearchServiceRole(): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchServiceRole',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchServiceRole.'),
      },
    };
    new cr.AwsCustomResource(this, 'DeleteElasticsearchServiceRole', props);
  }
  public deleteInboundCrossClusterSearchConnection(input: shapes.DeleteInboundCrossClusterSearchConnectionRequest): ESDeleteInboundCrossClusterSearchConnectionResponse {
    return new ESDeleteInboundCrossClusterSearchConnectionResponse(this, 'DeleteInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public deleteOutboundCrossClusterSearchConnection(input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest): ESDeleteOutboundCrossClusterSearchConnectionResponse {
    return new ESDeleteOutboundCrossClusterSearchConnectionResponse(this, 'DeleteOutboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public deletePackage(input: shapes.DeletePackageRequest): ESDeletePackageResponse {
    return new ESDeletePackageResponse(this, 'DeletePackageResponse', this.resources, input);
  }
  public describeElasticsearchDomain(input: shapes.DescribeElasticsearchDomainRequest): ESDescribeElasticsearchDomainResponse {
    return new ESDescribeElasticsearchDomainResponse(this, 'DescribeElasticsearchDomainResponse', this.resources, input);
  }
  public describeElasticsearchDomainConfig(input: shapes.DescribeElasticsearchDomainConfigRequest): ESDescribeElasticsearchDomainConfigResponse {
    return new ESDescribeElasticsearchDomainConfigResponse(this, 'DescribeElasticsearchDomainConfigResponse', this.resources, input);
  }
  public describeElasticsearchDomains(input: shapes.DescribeElasticsearchDomainsRequest): ESDescribeElasticsearchDomainsResponse {
    return new ESDescribeElasticsearchDomainsResponse(this, 'DescribeElasticsearchDomainsResponse', this.resources, input);
  }
  public describeElasticsearchInstanceTypeLimits(input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest): ESDescribeElasticsearchInstanceTypeLimitsResponse {
    return new ESDescribeElasticsearchInstanceTypeLimitsResponse(this, 'DescribeElasticsearchInstanceTypeLimitsResponse', this.resources, input);
  }
  public describeInboundCrossClusterSearchConnections(input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest): ESDescribeInboundCrossClusterSearchConnectionsResponse {
    return new ESDescribeInboundCrossClusterSearchConnectionsResponse(this, 'DescribeInboundCrossClusterSearchConnectionsResponse', this.resources, input);
  }
  public describeOutboundCrossClusterSearchConnections(input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest): ESDescribeOutboundCrossClusterSearchConnectionsResponse {
    return new ESDescribeOutboundCrossClusterSearchConnectionsResponse(this, 'DescribeOutboundCrossClusterSearchConnectionsResponse', this.resources, input);
  }
  public describePackages(input: shapes.DescribePackagesRequest): ESDescribePackagesResponse {
    return new ESDescribePackagesResponse(this, 'DescribePackagesResponse', this.resources, input);
  }
  public describeReservedElasticsearchInstanceOfferings(input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest): ESDescribeReservedElasticsearchInstanceOfferingsResponse {
    return new ESDescribeReservedElasticsearchInstanceOfferingsResponse(this, 'DescribeReservedElasticsearchInstanceOfferingsResponse', this.resources, input);
  }
  public describeReservedElasticsearchInstances(input: shapes.DescribeReservedElasticsearchInstancesRequest): ESDescribeReservedElasticsearchInstancesResponse {
    return new ESDescribeReservedElasticsearchInstancesResponse(this, 'DescribeReservedElasticsearchInstancesResponse', this.resources, input);
  }
  public dissociatePackage(input: shapes.DissociatePackageRequest): ESDissociatePackageResponse {
    return new ESDissociatePackageResponse(this, 'DissociatePackageResponse', this.resources, input);
  }
  public fetchCompatibleElasticsearchVersions(input: shapes.GetCompatibleElasticsearchVersionsRequest): ESGetCompatibleElasticsearchVersionsResponse {
    return new ESGetCompatibleElasticsearchVersionsResponse(this, 'GetCompatibleElasticsearchVersionsResponse', this.resources, input);
  }
  public fetchPackageVersionHistory(input: shapes.GetPackageVersionHistoryRequest): ESGetPackageVersionHistoryResponse {
    return new ESGetPackageVersionHistoryResponse(this, 'GetPackageVersionHistoryResponse', this.resources, input);
  }
  public fetchUpgradeHistory(input: shapes.GetUpgradeHistoryRequest): ESGetUpgradeHistoryResponse {
    return new ESGetUpgradeHistoryResponse(this, 'GetUpgradeHistoryResponse', this.resources, input);
  }
  public fetchUpgradeStatus(input: shapes.GetUpgradeStatusRequest): ESGetUpgradeStatusResponse {
    return new ESGetUpgradeStatusResponse(this, 'GetUpgradeStatusResponse', this.resources, input);
  }
  public listDomainNames(): ESListDomainNamesResponse {
    return new ESListDomainNamesResponse(this, 'ListDomainNamesResponse', this.resources);
  }
  public listDomainsForPackage(input: shapes.ListDomainsForPackageRequest): ESListDomainsForPackageResponse {
    return new ESListDomainsForPackageResponse(this, 'ListDomainsForPackageResponse', this.resources, input);
  }
  public listElasticsearchInstanceTypes(input: shapes.ListElasticsearchInstanceTypesRequest): ESListElasticsearchInstanceTypesResponse {
    return new ESListElasticsearchInstanceTypesResponse(this, 'ListElasticsearchInstanceTypesResponse', this.resources, input);
  }
  public listElasticsearchVersions(input: shapes.ListElasticsearchVersionsRequest): ESListElasticsearchVersionsResponse {
    return new ESListElasticsearchVersionsResponse(this, 'ListElasticsearchVersionsResponse', this.resources, input);
  }
  public listPackagesForDomain(input: shapes.ListPackagesForDomainRequest): ESListPackagesForDomainResponse {
    return new ESListPackagesForDomainResponse(this, 'ListPackagesForDomainResponse', this.resources, input);
  }
  public listTags(input: shapes.ListTagsRequest): ESListTagsResponse {
    return new ESListTagsResponse(this, 'ListTagsResponse', this.resources, input);
  }
  public purchaseReservedElasticsearchInstanceOffering(input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest): ESPurchaseReservedElasticsearchInstanceOfferingResponse {
    return new ESPurchaseReservedElasticsearchInstanceOfferingResponse(this, 'PurchaseReservedElasticsearchInstanceOfferingResponse', this.resources, input);
  }
  public rejectInboundCrossClusterSearchConnection(input: shapes.RejectInboundCrossClusterSearchConnectionRequest): ESRejectInboundCrossClusterSearchConnectionResponse {
    return new ESRejectInboundCrossClusterSearchConnectionResponse(this, 'RejectInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public removeTags(input: shapes.RemoveTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'removeTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RemoveTags.'),
        parameters: {
          arn: input.arn,
          tagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTags', props);
  }
  public startElasticsearchServiceSoftwareUpdate(input: shapes.StartElasticsearchServiceSoftwareUpdateRequest): ESStartElasticsearchServiceSoftwareUpdateResponse {
    return new ESStartElasticsearchServiceSoftwareUpdateResponse(this, 'StartElasticsearchServiceSoftwareUpdateResponse', this.resources, input);
  }
  public updateElasticsearchDomainConfig(input: shapes.UpdateElasticsearchDomainConfigRequest): ESUpdateElasticsearchDomainConfigResponse {
    return new ESUpdateElasticsearchDomainConfigResponse(this, 'UpdateElasticsearchDomainConfigResponse', this.resources, input);
  }
  public updatePackage(input: shapes.UpdatePackageRequest): ESUpdatePackageResponse {
    return new ESUpdatePackageResponse(this, 'UpdatePackageResponse', this.resources, input);
  }
  public upgradeElasticsearchDomain(input: shapes.UpgradeElasticsearchDomainRequest): ESUpgradeElasticsearchDomainResponse {
    return new ESUpgradeElasticsearchDomainResponse(this, 'UpgradeElasticsearchDomainResponse', this.resources, input);
  }
}
export class ESAcceptInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection {
    return new ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus {
    return new ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ESAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ESAssociatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetails(): ESAssociatePackageResponseDomainPackageDetails {
    return new ESAssociatePackageResponseDomainPackageDetails(this, 'DomainPackageDetails', this.resources, this.input);
  }
}
export class ESAssociatePackageResponseDomainPackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }
  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }
  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }
  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }
  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }
  public get errorDetails(): ESAssociatePackageResponseDomainPackageDetailsErrorDetails {
    return new ESAssociatePackageResponseDomainPackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ESAssociatePackageResponseDomainPackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ESCancelElasticsearchServiceSoftwareUpdateResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get serviceSoftwareOptions(): ESCancelElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions {
    return new ESCancelElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
}
export class ESCancelElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ESCreateElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatus {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ESCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ESCreateOutboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ESCreateOutboundCrossClusterSearchConnectionResponseDomainInformation {
    return new ESCreateOutboundCrossClusterSearchConnectionResponseDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ESCreateOutboundCrossClusterSearchConnectionResponseDomainInformation {
    return new ESCreateOutboundCrossClusterSearchConnectionResponseDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.'),
        outputPath: '',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get connectionStatus(): ESCreateOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionStatus {
    return new ESCreateOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionStatus(this, 'OutboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.'),
        outputPath: '',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESCreateOutboundCrossClusterSearchConnectionResponseDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'SourceDomainInfo.OwnerId',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'SourceDomainInfo.DomainName',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'SourceDomainInfo.Region',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('SourceDomainInfo.Region') as unknown as string;
  }
}
export class ESCreateOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'ConnectionStatus.StatusCode',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'ConnectionStatus.Message',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('ConnectionStatus.Message') as unknown as string;
  }
}
export class ESCreatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): ESCreatePackageResponsePackageDetails {
    return new ESCreatePackageResponsePackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class ESCreatePackageResponsePackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): ESCreatePackageResponsePackageDetailsErrorDetails {
    return new ESCreatePackageResponsePackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ESCreatePackageResponsePackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ESDeleteElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatus {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ESDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ESDeleteInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection {
    return new ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus {
    return new ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ESDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ESDeleteOutboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnection {
    return new ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnection(this, 'OutboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation {
    return new ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation {
    return new ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'CrossClusterSearchConnection.ConnectionAlias',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionAlias') as unknown as string;
  }
  public get connectionStatus(): ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionOutboundCrossClusterSearchConnectionStatus {
    return new ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionOutboundCrossClusterSearchConnectionStatus(this, 'OutboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ESDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionOutboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ESDeletePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): ESDeletePackageResponsePackageDetails {
    return new ESDeletePackageResponsePackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class ESDeletePackageResponsePackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): ESDeletePackageResponsePackageDetailsErrorDetails {
    return new ESDeletePackageResponsePackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ESDeletePackageResponsePackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatus {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainConfigResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get domainConfig(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfig {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfig(this, 'ElasticsearchDomainConfig', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get elasticsearchVersion(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus(this, 'ElasticsearchVersionStatus', this.resources, this.input);
  }
  public get elasticsearchClusterConfig(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus(this, 'ElasticsearchClusterConfigStatus', this.resources, this.input);
  }
  public get ebsOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus(this, 'EBSOptionsStatus', this.resources, this.input);
  }
  public get accessPolicies(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus(this, 'AccessPoliciesStatus', this.resources, this.input);
  }
  public get snapshotOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus(this, 'SnapshotOptionsStatus', this.resources, this.input);
  }
  public get vpcOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus(this, 'VPCDerivedInfoStatus', this.resources, this.input);
  }
  public get cognitoOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus(this, 'CognitoOptionsStatus', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus(this, 'EncryptionAtRestOptionsStatus', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus(this, 'NodeToNodeEncryptionOptionsStatus', this.resources, this.input);
  }
  public get advancedOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus(this, 'AdvancedOptionsStatus', this.resources, this.input);
  }
  public get logPublishingOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus(this, 'LogPublishingOptionsStatus', this.resources, this.input);
  }
  public get domainEndpointOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus(this, 'DomainEndpointOptionsStatus', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus(this, 'AdvancedSecurityOptionsStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options') as unknown as string;
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Options') as unknown as string;
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds') as unknown as string[];
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Options') as unknown as Record<string, string>;
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Options') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
  public get status(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ESDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESDescribeElasticsearchDomainsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainsRequest) {
    super(scope, id);
  }
  public get domainStatusList(): shapes.ElasticsearchDomainStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomains',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomains.'),
        outputPath: '',
        parameters: {
          domainNames: this.input.domainNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomains.', props);
    return resource.getResponseField('') as unknown as shapes.ElasticsearchDomainStatus[];
  }
}
export class ESDescribeElasticsearchInstanceTypeLimitsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest) {
    super(scope, id);
  }
  public get limitsByRole(): Record<string, shapes.Limits> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchInstanceTypeLimits',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchInstanceTypeLimits.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          instanceType: this.input.instanceType,
          elasticsearchVersion: this.input.elasticsearchVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchInstanceTypeLimits.', props);
    return resource.getResponseField('') as unknown as Record<string, shapes.Limits>;
  }
}
export class ESDescribeInboundCrossClusterSearchConnectionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnections(): shapes.InboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeInboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as shapes.InboundCrossClusterSearchConnection[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeInboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESDescribeOutboundCrossClusterSearchConnectionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnections(): shapes.OutboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeOutboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as shapes.OutboundCrossClusterSearchConnection[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeOutboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESDescribePackagesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribePackagesRequest) {
    super(scope, id);
  }
  public get packageDetailsList(): shapes.PackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribePackages.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.', props);
    return resource.getResponseField('') as unknown as shapes.PackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribePackages.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESDescribeReservedElasticsearchInstanceOfferingsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest) {
    super(scope, id);
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstanceOfferings.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservedElasticsearchInstanceOfferings(): shapes.ReservedElasticsearchInstanceOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstanceOfferings.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.', props);
    return resource.getResponseField('') as unknown as shapes.ReservedElasticsearchInstanceOffering[];
  }
}
export class ESDescribeReservedElasticsearchInstancesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeReservedElasticsearchInstancesRequest) {
    super(scope, id);
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstances.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservedElasticsearchInstances(): shapes.ReservedElasticsearchInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstances.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.', props);
    return resource.getResponseField('') as unknown as shapes.ReservedElasticsearchInstance[];
  }
}
export class ESDissociatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetails(): ESDissociatePackageResponseDomainPackageDetails {
    return new ESDissociatePackageResponseDomainPackageDetails(this, 'DomainPackageDetails', this.resources, this.input);
  }
}
export class ESDissociatePackageResponseDomainPackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }
  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }
  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }
  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }
  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }
  public get errorDetails(): ESDissociatePackageResponseDomainPackageDetailsErrorDetails {
    return new ESDissociatePackageResponseDomainPackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ESDissociatePackageResponseDomainPackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ESGetCompatibleElasticsearchVersionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetCompatibleElasticsearchVersionsRequest) {
    super(scope, id);
  }
  public get compatibleElasticsearchVersions(): shapes.CompatibleVersionsMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getCompatibleElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetCompatibleElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCompatibleElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as shapes.CompatibleVersionsMap[];
  }
}
export class ESGetPackageVersionHistoryResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetPackageVersionHistoryRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get packageVersionHistoryList(): shapes.PackageVersionHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as shapes.PackageVersionHistory[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESGetUpgradeHistoryResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetUpgradeHistoryRequest) {
    super(scope, id);
  }
  public get upgradeHistories(): shapes.UpgradeHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeHistory.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.', props);
    return resource.getResponseField('') as unknown as shapes.UpgradeHistory[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeHistory.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESGetUpgradeStatusResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetUpgradeStatusRequest) {
    super(scope, id);
  }
  public get upgradeStep(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get stepStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get upgradeName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESListDomainNamesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[]) {
    super(scope, id);
  }
  public get domainNames(): shapes.DomainInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainNames',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainNames.'),
        outputPath: '',
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainNames.', props);
    return resource.getResponseField('') as unknown as shapes.DomainInfo[];
  }
}
export class ESListDomainsForPackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListDomainsForPackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetailsList(): shapes.DomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainsForPackage.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.', props);
    return resource.getResponseField('') as unknown as shapes.DomainPackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainsForPackage.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESListElasticsearchInstanceTypesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListElasticsearchInstanceTypesRequest) {
    super(scope, id);
  }
  public get elasticsearchInstanceTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchInstanceTypes.'),
        outputPath: '',
        parameters: {
          elasticsearchVersion: this.input.elasticsearchVersion,
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.', props);
    return resource.getResponseField('') as unknown as string[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchInstanceTypes.'),
        outputPath: '',
        parameters: {
          elasticsearchVersion: this.input.elasticsearchVersion,
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESListElasticsearchVersionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListElasticsearchVersionsRequest) {
    super(scope, id);
  }
  public get elasticsearchVersions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as string[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESListPackagesForDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListPackagesForDomainRequest) {
    super(scope, id);
  }
  public get domainPackageDetailsList(): shapes.DomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListPackagesForDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.', props);
    return resource.getResponseField('') as unknown as shapes.DomainPackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListPackagesForDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESListTagsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListTagsRequest) {
    super(scope, id);
  }
  public get tagList(): shapes.Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListTags.'),
        outputPath: '',
        parameters: {
          arn: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTags.', props);
    return resource.getResponseField('') as unknown as shapes.Tag[];
  }
}
export class ESPurchaseReservedElasticsearchInstanceOfferingResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest) {
    super(scope, id);
  }
  public get reservedElasticsearchInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.PurchaseReservedElasticsearchInstanceOffering.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          reservationName: this.input.reservationName,
          instanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservationName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.PurchaseReservedElasticsearchInstanceOffering.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          reservationName: this.input.reservationName,
          instanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class ESRejectInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection {
    return new ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus {
    return new ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class ESRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class ESStartElasticsearchServiceSoftwareUpdateResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get serviceSoftwareOptions(): ESStartElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions {
    return new ESStartElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
}
export class ESStartElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get domainConfig(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfig {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfig(this, 'ElasticsearchDomainConfig', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get elasticsearchVersion(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus(this, 'ElasticsearchVersionStatus', this.resources, this.input);
  }
  public get elasticsearchClusterConfig(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus(this, 'ElasticsearchClusterConfigStatus', this.resources, this.input);
  }
  public get ebsOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus(this, 'EBSOptionsStatus', this.resources, this.input);
  }
  public get accessPolicies(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus(this, 'AccessPoliciesStatus', this.resources, this.input);
  }
  public get snapshotOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus(this, 'SnapshotOptionsStatus', this.resources, this.input);
  }
  public get vpcOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus(this, 'VPCDerivedInfoStatus', this.resources, this.input);
  }
  public get cognitoOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus(this, 'CognitoOptionsStatus', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus(this, 'EncryptionAtRestOptionsStatus', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus(this, 'NodeToNodeEncryptionOptionsStatus', this.resources, this.input);
  }
  public get advancedOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus(this, 'AdvancedOptionsStatus', this.resources, this.input);
  }
  public get logPublishingOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus(this, 'LogPublishingOptionsStatus', this.resources, this.input);
  }
  public get domainEndpointOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus(this, 'DomainEndpointOptionsStatus', this.resources, this.input);
  }
  public get advancedSecurityOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus(this, 'AdvancedSecurityOptionsStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options') as unknown as string;
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount') as unknown as number;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops') as unknown as number;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Options') as unknown as string;
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds') as unknown as string[];
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn') as unknown as string;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId') as unknown as string;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Options') as unknown as Record<string, string>;
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Options') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
  public get status(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class ESUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class ESUpdatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): ESUpdatePackageResponsePackageDetails {
    return new ESUpdatePackageResponsePackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class ESUpdatePackageResponsePackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): ESUpdatePackageResponsePackageDetailsErrorDetails {
    return new ESUpdatePackageResponsePackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class ESUpdatePackageResponsePackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class ESUpgradeElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpgradeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get targetVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get performCheckOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as boolean;
  }
}
