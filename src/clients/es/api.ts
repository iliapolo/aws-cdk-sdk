import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class EsClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptInboundCrossClusterSearchConnection(input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest): ESAcceptInboundCrossClusterSearchConnection {
    return new ESAcceptInboundCrossClusterSearchConnection(this, 'AcceptInboundCrossClusterSearchConnection', this.__resources, input);
  }

  public addTags(input: shapes.EsAddTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AddTags'),
        parameters: {
          ARN: input.arn,
          TagList: input.tagList,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTags', props);
  }

  public associatePackage(input: shapes.EsAssociatePackageRequest): ESAssociatePackage {
    return new ESAssociatePackage(this, 'AssociatePackage', this.__resources, input);
  }

  public cancelElasticsearchServiceSoftwareUpdate(input: shapes.EsCancelElasticsearchServiceSoftwareUpdateRequest): ESCancelElasticsearchServiceSoftwareUpdate {
    return new ESCancelElasticsearchServiceSoftwareUpdate(this, 'CancelElasticsearchServiceSoftwareUpdate', this.__resources, input);
  }

  public createElasticsearchDomain(input: shapes.EsCreateElasticsearchDomainRequest): ESCreateElasticsearchDomain {
    return new ESCreateElasticsearchDomain(this, 'CreateElasticsearchDomain', this.__resources, input);
  }

  public createOutboundCrossClusterSearchConnection(input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest): ESCreateOutboundCrossClusterSearchConnection {
    return new ESCreateOutboundCrossClusterSearchConnection(this, 'CreateOutboundCrossClusterSearchConnection', this.__resources, input);
  }

  public createPackage(input: shapes.EsCreatePackageRequest): ESCreatePackage {
    return new ESCreatePackage(this, 'CreatePackage', this.__resources, input);
  }

  public deleteElasticsearchDomain(input: shapes.EsDeleteElasticsearchDomainRequest): ESDeleteElasticsearchDomain {
    return new ESDeleteElasticsearchDomain(this, 'DeleteElasticsearchDomain', this.__resources, input);
  }

  public deleteElasticsearchServiceRole(): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchServiceRole',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchServiceRole'),
      },
    };
    new cr.AwsCustomResource(this, 'DeleteElasticsearchServiceRole', props);
  }

  public deleteInboundCrossClusterSearchConnection(input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest): ESDeleteInboundCrossClusterSearchConnection {
    return new ESDeleteInboundCrossClusterSearchConnection(this, 'DeleteInboundCrossClusterSearchConnection', this.__resources, input);
  }

  public deleteOutboundCrossClusterSearchConnection(input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest): ESDeleteOutboundCrossClusterSearchConnection {
    return new ESDeleteOutboundCrossClusterSearchConnection(this, 'DeleteOutboundCrossClusterSearchConnection', this.__resources, input);
  }

  public deletePackage(input: shapes.EsDeletePackageRequest): ESDeletePackage {
    return new ESDeletePackage(this, 'DeletePackage', this.__resources, input);
  }

  public describeElasticsearchDomain(input: shapes.EsDescribeElasticsearchDomainRequest): ESDescribeElasticsearchDomain {
    return new ESDescribeElasticsearchDomain(this, 'DescribeElasticsearchDomain', this.__resources, input);
  }

  public describeElasticsearchDomainConfig(input: shapes.EsDescribeElasticsearchDomainConfigRequest): ESDescribeElasticsearchDomainConfig {
    return new ESDescribeElasticsearchDomainConfig(this, 'DescribeElasticsearchDomainConfig', this.__resources, input);
  }

  public describeElasticsearchDomains(input: shapes.EsDescribeElasticsearchDomainsRequest): ESDescribeElasticsearchDomains {
    return new ESDescribeElasticsearchDomains(this, 'DescribeElasticsearchDomains', this.__resources, input);
  }

  public describeElasticsearchInstanceTypeLimits(input: shapes.EsDescribeElasticsearchInstanceTypeLimitsRequest): ESDescribeElasticsearchInstanceTypeLimits {
    return new ESDescribeElasticsearchInstanceTypeLimits(this, 'DescribeElasticsearchInstanceTypeLimits', this.__resources, input);
  }

  public describeInboundCrossClusterSearchConnections(input: shapes.EsDescribeInboundCrossClusterSearchConnectionsRequest): ESDescribeInboundCrossClusterSearchConnections {
    return new ESDescribeInboundCrossClusterSearchConnections(this, 'DescribeInboundCrossClusterSearchConnections', this.__resources, input);
  }

  public describeOutboundCrossClusterSearchConnections(input: shapes.EsDescribeOutboundCrossClusterSearchConnectionsRequest): ESDescribeOutboundCrossClusterSearchConnections {
    return new ESDescribeOutboundCrossClusterSearchConnections(this, 'DescribeOutboundCrossClusterSearchConnections', this.__resources, input);
  }

  public describePackages(input: shapes.EsDescribePackagesRequest): ESDescribePackages {
    return new ESDescribePackages(this, 'DescribePackages', this.__resources, input);
  }

  public describeReservedElasticsearchInstanceOfferings(input: shapes.EsDescribeReservedElasticsearchInstanceOfferingsRequest): ESDescribeReservedElasticsearchInstanceOfferings {
    return new ESDescribeReservedElasticsearchInstanceOfferings(this, 'DescribeReservedElasticsearchInstanceOfferings', this.__resources, input);
  }

  public describeReservedElasticsearchInstances(input: shapes.EsDescribeReservedElasticsearchInstancesRequest): ESDescribeReservedElasticsearchInstances {
    return new ESDescribeReservedElasticsearchInstances(this, 'DescribeReservedElasticsearchInstances', this.__resources, input);
  }

  public dissociatePackage(input: shapes.EsDissociatePackageRequest): ESDissociatePackage {
    return new ESDissociatePackage(this, 'DissociatePackage', this.__resources, input);
  }

  public fetchCompatibleElasticsearchVersions(input: shapes.EsGetCompatibleElasticsearchVersionsRequest): ESFetchCompatibleElasticsearchVersions {
    return new ESFetchCompatibleElasticsearchVersions(this, 'FetchCompatibleElasticsearchVersions', this.__resources, input);
  }

  public fetchPackageVersionHistory(input: shapes.EsGetPackageVersionHistoryRequest): ESFetchPackageVersionHistory {
    return new ESFetchPackageVersionHistory(this, 'FetchPackageVersionHistory', this.__resources, input);
  }

  public fetchUpgradeHistory(input: shapes.EsGetUpgradeHistoryRequest): ESFetchUpgradeHistory {
    return new ESFetchUpgradeHistory(this, 'FetchUpgradeHistory', this.__resources, input);
  }

  public fetchUpgradeStatus(input: shapes.EsGetUpgradeStatusRequest): ESFetchUpgradeStatus {
    return new ESFetchUpgradeStatus(this, 'FetchUpgradeStatus', this.__resources, input);
  }

  public listDomainNames(): ESListDomainNames {
    return new ESListDomainNames(this, 'ListDomainNames', this.__resources);
  }

  public listDomainsForPackage(input: shapes.EsListDomainsForPackageRequest): ESListDomainsForPackage {
    return new ESListDomainsForPackage(this, 'ListDomainsForPackage', this.__resources, input);
  }

  public listElasticsearchInstanceTypes(input: shapes.EsListElasticsearchInstanceTypesRequest): ESListElasticsearchInstanceTypes {
    return new ESListElasticsearchInstanceTypes(this, 'ListElasticsearchInstanceTypes', this.__resources, input);
  }

  public listElasticsearchVersions(input: shapes.EsListElasticsearchVersionsRequest): ESListElasticsearchVersions {
    return new ESListElasticsearchVersions(this, 'ListElasticsearchVersions', this.__resources, input);
  }

  public listPackagesForDomain(input: shapes.EsListPackagesForDomainRequest): ESListPackagesForDomain {
    return new ESListPackagesForDomain(this, 'ListPackagesForDomain', this.__resources, input);
  }

  public listTags(input: shapes.EsListTagsRequest): ESListTags {
    return new ESListTags(this, 'ListTags', this.__resources, input);
  }

  public purchaseReservedElasticsearchInstanceOffering(input: shapes.EsPurchaseReservedElasticsearchInstanceOfferingRequest): ESPurchaseReservedElasticsearchInstanceOffering {
    return new ESPurchaseReservedElasticsearchInstanceOffering(this, 'PurchaseReservedElasticsearchInstanceOffering', this.__resources, input);
  }

  public rejectInboundCrossClusterSearchConnection(input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest): ESRejectInboundCrossClusterSearchConnection {
    return new ESRejectInboundCrossClusterSearchConnection(this, 'RejectInboundCrossClusterSearchConnection', this.__resources, input);
  }

  public removeTags(input: shapes.EsRemoveTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RemoveTags'),
        parameters: {
          ARN: input.arn,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTags', props);
  }

  public startElasticsearchServiceSoftwareUpdate(input: shapes.EsStartElasticsearchServiceSoftwareUpdateRequest): ESStartElasticsearchServiceSoftwareUpdate {
    return new ESStartElasticsearchServiceSoftwareUpdate(this, 'StartElasticsearchServiceSoftwareUpdate', this.__resources, input);
  }

  public updateElasticsearchDomainConfig(input: shapes.EsUpdateElasticsearchDomainConfigRequest): ESUpdateElasticsearchDomainConfig {
    return new ESUpdateElasticsearchDomainConfig(this, 'UpdateElasticsearchDomainConfig', this.__resources, input);
  }

  public updatePackage(input: shapes.EsUpdatePackageRequest): ESUpdatePackage {
    return new ESUpdatePackage(this, 'UpdatePackage', this.__resources, input);
  }

  public upgradeElasticsearchDomain(input: shapes.EsUpgradeElasticsearchDomainRequest): ESUpgradeElasticsearchDomain {
    return new ESUpgradeElasticsearchDomain(this, 'UpgradeElasticsearchDomain', this.__resources, input);
  }

}

export class ESAcceptInboundCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get crossClusterSearchConnection(): ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnection(this, 'CrossClusterSearchConnection', this.__resources, this.input);
  }

}

export class ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get sourceDomainInfo(): ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this, 'SourceDomainInfo', this.__resources, this.input);
  }

  public get destinationDomainInfo(): ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this, 'DestinationDomainInfo', this.__resources, this.input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionStatus(): ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this, 'ConnectionStatus', this.__resources, this.input);
  }

}

export class ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESAssociatePackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAssociatePackageRequest) {
    super(scope, id);
  }

  public get domainPackageDetails(): ESAssociatePackageDomainPackageDetails {
    return new ESAssociatePackageDomainPackageDetails(this, 'DomainPackageDetails', this.__resources, this.input);
  }

}

export class ESAssociatePackageDomainPackageDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAssociatePackageRequest) {
    super(scope, id);
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }

  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }

  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }

  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }

  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }

  public get errorDetails(): ESAssociatePackageDomainPackageDetailsErrorDetails {
    return new ESAssociatePackageDomainPackageDetailsErrorDetails(this, 'ErrorDetails', this.__resources, this.input);
  }

}

export class ESAssociatePackageDomainPackageDetailsErrorDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsAssociatePackageRequest) {
    super(scope, id);
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESCancelElasticsearchServiceSoftwareUpdate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }

  public get serviceSoftwareOptions(): ESCancelElasticsearchServiceSoftwareUpdateServiceSoftwareOptions {
    return new ESCancelElasticsearchServiceSoftwareUpdateServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.__resources, this.input);
  }

}

export class ESCancelElasticsearchServiceSoftwareUpdateServiceSoftwareOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESCreateElasticsearchDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainStatus(): ESCreateElasticsearchDomainDomainStatus {
    return new ESCreateElasticsearchDomainDomainStatus(this, 'DomainStatus', this.__resources, this.input);
  }

}

export class ESCreateElasticsearchDomainDomainStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }

  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }

  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }

  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }

  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }

  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }

  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }

  public get elasticsearchClusterConfig(): ESCreateElasticsearchDomainDomainStatusElasticsearchClusterConfig {
    return new ESCreateElasticsearchDomainDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.__resources, this.input);
  }

  public get ebsOptions(): ESCreateElasticsearchDomainDomainStatusEbsOptions {
    return new ESCreateElasticsearchDomainDomainStatusEbsOptions(this, 'EbsOptions', this.__resources, this.input);
  }

  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }

  public get snapshotOptions(): ESCreateElasticsearchDomainDomainStatusSnapshotOptions {
    return new ESCreateElasticsearchDomainDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.__resources, this.input);
  }

  public get vpcOptions(): ESCreateElasticsearchDomainDomainStatusVpcOptions {
    return new ESCreateElasticsearchDomainDomainStatusVpcOptions(this, 'VpcOptions', this.__resources, this.input);
  }

  public get cognitoOptions(): ESCreateElasticsearchDomainDomainStatusCognitoOptions {
    return new ESCreateElasticsearchDomainDomainStatusCognitoOptions(this, 'CognitoOptions', this.__resources, this.input);
  }

  public get encryptionAtRestOptions(): ESCreateElasticsearchDomainDomainStatusEncryptionAtRestOptions {
    return new ESCreateElasticsearchDomainDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.__resources, this.input);
  }

  public get nodeToNodeEncryptionOptions(): ESCreateElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {
    return new ESCreateElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.__resources, this.input);
  }

  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }

  public get logPublishingOptions(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get serviceSoftwareOptions(): ESCreateElasticsearchDomainDomainStatusServiceSoftwareOptions {
    return new ESCreateElasticsearchDomainDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.__resources, this.input);
  }

  public get domainEndpointOptions(): ESCreateElasticsearchDomainDomainStatusDomainEndpointOptions {
    return new ESCreateElasticsearchDomainDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.__resources, this.input);
  }

  public get advancedSecurityOptions(): ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptions {
    return new ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.__resources, this.input);
  }

}

export class ESCreateElasticsearchDomainDomainStatusElasticsearchClusterConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESCreateElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESCreateElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.__resources, this.input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }

}

export class ESCreateElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESCreateElasticsearchDomainDomainStatusEbsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.VolumeType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.VolumeSize',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.Iops',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as number;
  }

}

export class ESCreateElasticsearchDomainDomainStatusSnapshotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESCreateElasticsearchDomainDomainStatusVpcOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.SubnetIds',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as string[];
  }

}

export class ESCreateElasticsearchDomainDomainStatusCognitoOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.RoleArn',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as string;
  }

}

export class ESCreateElasticsearchDomainDomainStatusEncryptionAtRestOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }

}

export class ESCreateElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }

}

export class ESCreateElasticsearchDomainDomainStatusServiceSoftwareOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESCreateElasticsearchDomainDomainStatusDomainEndpointOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {
    return new ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions(this, 'SamlOptions', this.__resources, this.input);
  }

}

export class ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {
    return new ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp(this, 'Idp', this.__resources, this.input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchVersion: this.input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          AccessPolicies: this.input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.input.advancedOptions,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESCreateOutboundCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get sourceDomainInfo(): ESCreateOutboundCrossClusterSearchConnectionSourceDomainInfo {
    return new ESCreateOutboundCrossClusterSearchConnectionSourceDomainInfo(this, 'SourceDomainInfo', this.__resources, this.input);
  }

  public get destinationDomainInfo(): ESCreateOutboundCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESCreateOutboundCrossClusterSearchConnectionDestinationDomainInfo(this, 'DestinationDomainInfo', this.__resources, this.input);
  }

  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'ConnectionAlias',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('ConnectionAlias') as unknown as string;
  }

  public get connectionStatus(): ESCreateOutboundCrossClusterSearchConnectionConnectionStatus {
    return new ESCreateOutboundCrossClusterSearchConnectionConnectionStatus(this, 'ConnectionStatus', this.__resources, this.input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnectionId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnectionId') as unknown as string;
  }

}

export class ESCreateOutboundCrossClusterSearchConnectionSourceDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'SourceDomainInfo.OwnerId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'SourceDomainInfo.DomainName',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'SourceDomainInfo.Region',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESCreateOutboundCrossClusterSearchConnectionDestinationDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'DestinationDomainInfo.OwnerId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'DestinationDomainInfo.DomainName',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'DestinationDomainInfo.Region',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESCreateOutboundCrossClusterSearchConnectionConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'ConnectionStatus.StatusCode',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'ConnectionStatus.Message',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('ConnectionStatus.Message') as unknown as string;
  }

}

export class ESCreatePackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreatePackageRequest) {
    super(scope, id);
  }

  public get packageDetails(): ESCreatePackagePackageDetails {
    return new ESCreatePackagePackageDetails(this, 'PackageDetails', this.__resources, this.input);
  }

}

export class ESCreatePackagePackageDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreatePackageRequest) {
    super(scope, id);
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }

  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }

  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }

  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }

  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }

  public get errorDetails(): ESCreatePackagePackageDetailsErrorDetails {
    return new ESCreatePackagePackageDetailsErrorDetails(this, 'ErrorDetails', this.__resources, this.input);
  }

}

export class ESCreatePackagePackageDetailsErrorDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsCreatePackageRequest) {
    super(scope, id);
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageName: this.input.packageName,
          PackageType: this.input.packageType,
          PackageDescription: this.input.packageDescription,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESDeleteElasticsearchDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainStatus(): ESDeleteElasticsearchDomainDomainStatus {
    return new ESDeleteElasticsearchDomainDomainStatus(this, 'DomainStatus', this.__resources, this.input);
  }

}

export class ESDeleteElasticsearchDomainDomainStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }

  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }

  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }

  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }

  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }

  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }

  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }

  public get elasticsearchClusterConfig(): ESDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfig {
    return new ESDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.__resources, this.input);
  }

  public get ebsOptions(): ESDeleteElasticsearchDomainDomainStatusEbsOptions {
    return new ESDeleteElasticsearchDomainDomainStatusEbsOptions(this, 'EbsOptions', this.__resources, this.input);
  }

  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }

  public get snapshotOptions(): ESDeleteElasticsearchDomainDomainStatusSnapshotOptions {
    return new ESDeleteElasticsearchDomainDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.__resources, this.input);
  }

  public get vpcOptions(): ESDeleteElasticsearchDomainDomainStatusVpcOptions {
    return new ESDeleteElasticsearchDomainDomainStatusVpcOptions(this, 'VpcOptions', this.__resources, this.input);
  }

  public get cognitoOptions(): ESDeleteElasticsearchDomainDomainStatusCognitoOptions {
    return new ESDeleteElasticsearchDomainDomainStatusCognitoOptions(this, 'CognitoOptions', this.__resources, this.input);
  }

  public get encryptionAtRestOptions(): ESDeleteElasticsearchDomainDomainStatusEncryptionAtRestOptions {
    return new ESDeleteElasticsearchDomainDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.__resources, this.input);
  }

  public get nodeToNodeEncryptionOptions(): ESDeleteElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {
    return new ESDeleteElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.__resources, this.input);
  }

  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }

  public get logPublishingOptions(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get serviceSoftwareOptions(): ESDeleteElasticsearchDomainDomainStatusServiceSoftwareOptions {
    return new ESDeleteElasticsearchDomainDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.__resources, this.input);
  }

  public get domainEndpointOptions(): ESDeleteElasticsearchDomainDomainStatusDomainEndpointOptions {
    return new ESDeleteElasticsearchDomainDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.__resources, this.input);
  }

  public get advancedSecurityOptions(): ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptions {
    return new ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.__resources, this.input);
  }

}

export class ESDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.__resources, this.input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusEbsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.VolumeType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.VolumeSize',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.Iops',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as number;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusSnapshotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusVpcOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.SubnetIds',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as string[];
  }

}

export class ESDeleteElasticsearchDomainDomainStatusCognitoOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.RoleArn',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as string;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusEncryptionAtRestOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusServiceSoftwareOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusDomainEndpointOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {
    return new ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions(this, 'SamlOptions', this.__resources, this.input);
  }

}

export class ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {
    return new ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp(this, 'Idp', this.__resources, this.input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESDeleteInboundCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get crossClusterSearchConnection(): ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnection(this, 'CrossClusterSearchConnection', this.__resources, this.input);
  }

}

export class ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get sourceDomainInfo(): ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this, 'SourceDomainInfo', this.__resources, this.input);
  }

  public get destinationDomainInfo(): ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this, 'DestinationDomainInfo', this.__resources, this.input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionStatus(): ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this, 'ConnectionStatus', this.__resources, this.input);
  }

}

export class ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESDeleteOutboundCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get crossClusterSearchConnection(): ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnection(this, 'CrossClusterSearchConnection', this.__resources, this.input);
  }

}

export class ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get sourceDomainInfo(): ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this, 'SourceDomainInfo', this.__resources, this.input);
  }

  public get destinationDomainInfo(): ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this, 'DestinationDomainInfo', this.__resources, this.input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'CrossClusterSearchConnection.ConnectionAlias',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionAlias') as unknown as string;
  }

  public get connectionStatus(): ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this, 'ConnectionStatus', this.__resources, this.input);
  }

}

export class ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESDeletePackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeletePackageRequest) {
    super(scope, id);
  }

  public get packageDetails(): ESDeletePackagePackageDetails {
    return new ESDeletePackagePackageDetails(this, 'PackageDetails', this.__resources, this.input);
  }

}

export class ESDeletePackagePackageDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeletePackageRequest) {
    super(scope, id);
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }

  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }

  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }

  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }

  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }

  public get errorDetails(): ESDeletePackagePackageDetailsErrorDetails {
    return new ESDeletePackagePackageDetailsErrorDetails(this, 'ErrorDetails', this.__resources, this.input);
  }

}

export class ESDeletePackagePackageDetailsErrorDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDeletePackageRequest) {
    super(scope, id);
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainStatus(): ESDescribeElasticsearchDomainDomainStatus {
    return new ESDescribeElasticsearchDomainDomainStatus(this, 'DomainStatus', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainDomainStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }

  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }

  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }

  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }

  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }

  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }

  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }

  public get elasticsearchClusterConfig(): ESDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfig {
    return new ESDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.__resources, this.input);
  }

  public get ebsOptions(): ESDescribeElasticsearchDomainDomainStatusEbsOptions {
    return new ESDescribeElasticsearchDomainDomainStatusEbsOptions(this, 'EbsOptions', this.__resources, this.input);
  }

  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }

  public get snapshotOptions(): ESDescribeElasticsearchDomainDomainStatusSnapshotOptions {
    return new ESDescribeElasticsearchDomainDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.__resources, this.input);
  }

  public get vpcOptions(): ESDescribeElasticsearchDomainDomainStatusVpcOptions {
    return new ESDescribeElasticsearchDomainDomainStatusVpcOptions(this, 'VpcOptions', this.__resources, this.input);
  }

  public get cognitoOptions(): ESDescribeElasticsearchDomainDomainStatusCognitoOptions {
    return new ESDescribeElasticsearchDomainDomainStatusCognitoOptions(this, 'CognitoOptions', this.__resources, this.input);
  }

  public get encryptionAtRestOptions(): ESDescribeElasticsearchDomainDomainStatusEncryptionAtRestOptions {
    return new ESDescribeElasticsearchDomainDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.__resources, this.input);
  }

  public get nodeToNodeEncryptionOptions(): ESDescribeElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {
    return new ESDescribeElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.__resources, this.input);
  }

  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }

  public get logPublishingOptions(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get serviceSoftwareOptions(): ESDescribeElasticsearchDomainDomainStatusServiceSoftwareOptions {
    return new ESDescribeElasticsearchDomainDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.__resources, this.input);
  }

  public get domainEndpointOptions(): ESDescribeElasticsearchDomainDomainStatusDomainEndpointOptions {
    return new ESDescribeElasticsearchDomainDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.__resources, this.input);
  }

  public get advancedSecurityOptions(): ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptions {
    return new ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.__resources, this.input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusEbsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.VolumeType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.VolumeSize',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.Iops',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusSnapshotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusVpcOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.SubnetIds',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as string[];
  }

}

export class ESDescribeElasticsearchDomainDomainStatusCognitoOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.RoleArn',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusEncryptionAtRestOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusServiceSoftwareOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusDomainEndpointOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {
    return new ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions(this, 'SamlOptions', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {
    return new ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp(this, 'Idp', this.__resources, this.input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get domainConfig(): ESDescribeElasticsearchDomainConfigDomainConfig {
    return new ESDescribeElasticsearchDomainConfigDomainConfig(this, 'DomainConfig', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get elasticsearchVersion(): ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersion {
    return new ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersion(this, 'ElasticsearchVersion', this.__resources, this.input);
  }

  public get elasticsearchClusterConfig(): ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig {
    return new ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.__resources, this.input);
  }

  public get ebsOptions(): ESDescribeElasticsearchDomainConfigDomainConfigEbsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigEbsOptions(this, 'EbsOptions', this.__resources, this.input);
  }

  public get accessPolicies(): ESDescribeElasticsearchDomainConfigDomainConfigAccessPolicies {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAccessPolicies(this, 'AccessPolicies', this.__resources, this.input);
  }

  public get snapshotOptions(): ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptions(this, 'SnapshotOptions', this.__resources, this.input);
  }

  public get vpcOptions(): ESDescribeElasticsearchDomainConfigDomainConfigVpcOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigVpcOptions(this, 'VpcOptions', this.__resources, this.input);
  }

  public get cognitoOptions(): ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptions(this, 'CognitoOptions', this.__resources, this.input);
  }

  public get encryptionAtRestOptions(): ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.__resources, this.input);
  }

  public get nodeToNodeEncryptionOptions(): ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.__resources, this.input);
  }

  public get advancedOptions(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedOptions(this, 'AdvancedOptions', this.__resources, this.input);
  }

  public get logPublishingOptions(): ESDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptions(this, 'LogPublishingOptions', this.__resources, this.input);
  }

  public get domainEndpointOptions(): ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptions(this, 'DomainEndpointOptions', this.__resources, this.input);
  }

  public get advancedSecurityOptions(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersion extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Options',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Options') as unknown as string;
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig {
    return new ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.__resources, this.input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmCount') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigEbsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigEbsOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigEbsOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigEbsOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigEbsOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigEbsOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.Options.EBSEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeType',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeSize',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.Options.Iops',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.Iops') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigEbsOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAccessPolicies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.Options',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Options') as unknown as string;
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigAccessPoliciesStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAccessPoliciesStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAccessPoliciesStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigVpcOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigVpcOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigVpcOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigVpcOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigVpcOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigVpcOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.Options.VPCId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SubnetIds',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.Options.AvailabilityZones',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SecurityGroupIds',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SecurityGroupIds') as unknown as string[];
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigVpcOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.UserPoolId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.IdentityPoolId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.Options.RoleArn',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.RoleArn') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.Options',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Options') as unknown as Record<string, string>;
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.Options',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Options') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpoint',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions(this, 'SamlOptions', this.__resources, this.input);
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp {
    return new ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp(this, 'Idp', this.__resources, this.input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESDescribeElasticsearchDomains extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchDomainsRequest) {
    super(scope, id);
  }

  public get domainStatusList(): shapes.EsElasticsearchDomainStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomains',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomains.DomainStatusList'),
        outputPath: 'DomainStatusList',
        parameters: {
          DomainNames: this.input.domainNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomains.DomainStatusList', props);
    return resource.getResponseField('DomainStatusList') as unknown as shapes.EsElasticsearchDomainStatus[];
  }

}

export class ESDescribeElasticsearchInstanceTypeLimits extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeElasticsearchInstanceTypeLimitsRequest) {
    super(scope, id);
  }

  public get limitsByRole(): Record<string, shapes.EsLimits> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchInstanceTypeLimits',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchInstanceTypeLimits.LimitsByRole'),
        outputPath: 'LimitsByRole',
        parameters: {
          DomainName: this.input.domainName,
          InstanceType: this.input.instanceType,
          ElasticsearchVersion: this.input.elasticsearchVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchInstanceTypeLimits.LimitsByRole', props);
    return resource.getResponseField('LimitsByRole') as unknown as Record<string, shapes.EsLimits>;
  }

}

export class ESDescribeInboundCrossClusterSearchConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeInboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }

  public get crossClusterSearchConnections(): shapes.EsInboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeInboundCrossClusterSearchConnections.CrossClusterSearchConnections'),
        outputPath: 'CrossClusterSearchConnections',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.CrossClusterSearchConnections', props);
    return resource.getResponseField('CrossClusterSearchConnections') as unknown as shapes.EsInboundCrossClusterSearchConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeInboundCrossClusterSearchConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESDescribeOutboundCrossClusterSearchConnections extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeOutboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }

  public get crossClusterSearchConnections(): shapes.EsOutboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeOutboundCrossClusterSearchConnections.CrossClusterSearchConnections'),
        outputPath: 'CrossClusterSearchConnections',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.CrossClusterSearchConnections', props);
    return resource.getResponseField('CrossClusterSearchConnections') as unknown as shapes.EsOutboundCrossClusterSearchConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeOutboundCrossClusterSearchConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESDescribePackages extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribePackagesRequest) {
    super(scope, id);
  }

  public get packageDetailsList(): shapes.EsPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribePackages.PackageDetailsList'),
        outputPath: 'PackageDetailsList',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.PackageDetailsList', props);
    return resource.getResponseField('PackageDetailsList') as unknown as shapes.EsPackageDetails[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribePackages.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESDescribeReservedElasticsearchInstanceOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeReservedElasticsearchInstanceOfferingsRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstanceOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservedElasticsearchInstanceOfferings(): shapes.EsReservedElasticsearchInstanceOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstanceOfferings.ReservedElasticsearchInstanceOfferings'),
        outputPath: 'ReservedElasticsearchInstanceOfferings',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.ReservedElasticsearchInstanceOfferings', props);
    return resource.getResponseField('ReservedElasticsearchInstanceOfferings') as unknown as shapes.EsReservedElasticsearchInstanceOffering[];
  }

}

export class ESDescribeReservedElasticsearchInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDescribeReservedElasticsearchInstancesRequest) {
    super(scope, id);
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservedElasticsearchInstances(): shapes.EsReservedElasticsearchInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstances.ReservedElasticsearchInstances'),
        outputPath: 'ReservedElasticsearchInstances',
        parameters: {
          ReservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.ReservedElasticsearchInstances', props);
    return resource.getResponseField('ReservedElasticsearchInstances') as unknown as shapes.EsReservedElasticsearchInstance[];
  }

}

export class ESDissociatePackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDissociatePackageRequest) {
    super(scope, id);
  }

  public get domainPackageDetails(): ESDissociatePackageDomainPackageDetails {
    return new ESDissociatePackageDomainPackageDetails(this, 'DomainPackageDetails', this.__resources, this.input);
  }

}

export class ESDissociatePackageDomainPackageDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDissociatePackageRequest) {
    super(scope, id);
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }

  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }

  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }

  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }

  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }

  public get errorDetails(): ESDissociatePackageDomainPackageDetailsErrorDetails {
    return new ESDissociatePackageDomainPackageDetailsErrorDetails(this, 'ErrorDetails', this.__resources, this.input);
  }

}

export class ESDissociatePackageDomainPackageDetailsErrorDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsDissociatePackageRequest) {
    super(scope, id);
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.input.packageId,
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESFetchCompatibleElasticsearchVersions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsGetCompatibleElasticsearchVersionsRequest) {
    super(scope, id);
  }

  public get compatibleElasticsearchVersions(): shapes.EsCompatibleVersionsMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCompatibleElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetCompatibleElasticsearchVersions.CompatibleElasticsearchVersions'),
        outputPath: 'CompatibleElasticsearchVersions',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCompatibleElasticsearchVersions.CompatibleElasticsearchVersions', props);
    return resource.getResponseField('CompatibleElasticsearchVersions') as unknown as shapes.EsCompatibleVersionsMap[];
  }

}

export class ESFetchPackageVersionHistory extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsGetPackageVersionHistoryRequest) {
    super(scope, id);
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.PackageID'),
        outputPath: 'PackageID',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.PackageID', props);
    return resource.getResponseField('PackageID') as unknown as string;
  }

  public get packageVersionHistoryList(): shapes.EsPackageVersionHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.PackageVersionHistoryList'),
        outputPath: 'PackageVersionHistoryList',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.PackageVersionHistoryList', props);
    return resource.getResponseField('PackageVersionHistoryList') as unknown as shapes.EsPackageVersionHistory[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESFetchUpgradeHistory extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsGetUpgradeHistoryRequest) {
    super(scope, id);
  }

  public get upgradeHistories(): shapes.EsUpgradeHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeHistory.UpgradeHistories'),
        outputPath: 'UpgradeHistories',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.UpgradeHistories', props);
    return resource.getResponseField('UpgradeHistories') as unknown as shapes.EsUpgradeHistory[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESFetchUpgradeStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsGetUpgradeStatusRequest) {
    super(scope, id);
  }

  public get upgradeStep(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.UpgradeStep'),
        outputPath: 'UpgradeStep',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.UpgradeStep', props);
    return resource.getResponseField('UpgradeStep') as unknown as string;
  }

  public get stepStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.StepStatus'),
        outputPath: 'StepStatus',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.StepStatus', props);
    return resource.getResponseField('StepStatus') as unknown as string;
  }

  public get upgradeName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.UpgradeName'),
        outputPath: 'UpgradeName',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.UpgradeName', props);
    return resource.getResponseField('UpgradeName') as unknown as string;
  }

}

export class ESListDomainNames extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public get domainNames(): shapes.EsDomainInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDomainNames',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainNames.DomainNames'),
        outputPath: 'DomainNames',
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainNames.DomainNames', props);
    return resource.getResponseField('DomainNames') as unknown as shapes.EsDomainInfo[];
  }

}

export class ESListDomainsForPackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsListDomainsForPackageRequest) {
    super(scope, id);
  }

  public get domainPackageDetailsList(): shapes.EsDomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainsForPackage.DomainPackageDetailsList'),
        outputPath: 'DomainPackageDetailsList',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.DomainPackageDetailsList', props);
    return resource.getResponseField('DomainPackageDetailsList') as unknown as shapes.EsDomainPackageDetails[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainsForPackage.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESListElasticsearchInstanceTypes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsListElasticsearchInstanceTypesRequest) {
    super(scope, id);
  }

  public get elasticsearchInstanceTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchInstanceTypes.ElasticsearchInstanceTypes'),
        outputPath: 'ElasticsearchInstanceTypes',
        parameters: {
          ElasticsearchVersion: this.input.elasticsearchVersion,
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.ElasticsearchInstanceTypes', props);
    return resource.getResponseField('ElasticsearchInstanceTypes') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchInstanceTypes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ElasticsearchVersion: this.input.elasticsearchVersion,
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESListElasticsearchVersions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsListElasticsearchVersionsRequest) {
    super(scope, id);
  }

  public get elasticsearchVersions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchVersions.ElasticsearchVersions'),
        outputPath: 'ElasticsearchVersions',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.ElasticsearchVersions', props);
    return resource.getResponseField('ElasticsearchVersions') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchVersions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESListPackagesForDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsListPackagesForDomainRequest) {
    super(scope, id);
  }

  public get domainPackageDetailsList(): shapes.EsDomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListPackagesForDomain.DomainPackageDetailsList'),
        outputPath: 'DomainPackageDetailsList',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.DomainPackageDetailsList', props);
    return resource.getResponseField('DomainPackageDetailsList') as unknown as shapes.EsDomainPackageDetails[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListPackagesForDomain.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESListTags extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsListTagsRequest) {
    super(scope, id);
  }

  public get tagList(): shapes.EsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListTags.TagList'),
        outputPath: 'TagList',
        parameters: {
          ARN: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTags.TagList', props);
    return resource.getResponseField('TagList') as unknown as shapes.EsTag[];
  }

}

export class ESPurchaseReservedElasticsearchInstanceOffering extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsPurchaseReservedElasticsearchInstanceOfferingRequest) {
    super(scope, id);
  }

  public get reservedElasticsearchInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.PurchaseReservedElasticsearchInstanceOffering.ReservedElasticsearchInstanceId'),
        outputPath: 'ReservedElasticsearchInstanceId',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          ReservationName: this.input.reservationName,
          InstanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.ReservedElasticsearchInstanceId', props);
    return resource.getResponseField('ReservedElasticsearchInstanceId') as unknown as string;
  }

  public get reservationName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.PurchaseReservedElasticsearchInstanceOffering.ReservationName'),
        outputPath: 'ReservationName',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          ReservationName: this.input.reservationName,
          InstanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.ReservationName', props);
    return resource.getResponseField('ReservationName') as unknown as string;
  }

}

export class ESRejectInboundCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get crossClusterSearchConnection(): ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnection(this, 'CrossClusterSearchConnection', this.__resources, this.input);
  }

}

export class ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnection extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get sourceDomainInfo(): ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this, 'SourceDomainInfo', this.__resources, this.input);
  }

  public get destinationDomainInfo(): ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this, 'DestinationDomainInfo', this.__resources, this.input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionStatus(): ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this, 'ConnectionStatus', this.__resources, this.input);
  }

}

export class ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESStartElasticsearchServiceSoftwareUpdate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsStartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }

  public get serviceSoftwareOptions(): ESStartElasticsearchServiceSoftwareUpdateServiceSoftwareOptions {
    return new ESStartElasticsearchServiceSoftwareUpdateServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.__resources, this.input);
  }

}

export class ESStartElasticsearchServiceSoftwareUpdateServiceSoftwareOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsStartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get domainConfig(): ESUpdateElasticsearchDomainConfigDomainConfig {
    return new ESUpdateElasticsearchDomainConfigDomainConfig(this, 'DomainConfig', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get elasticsearchVersion(): ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersion {
    return new ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersion(this, 'ElasticsearchVersion', this.__resources, this.input);
  }

  public get elasticsearchClusterConfig(): ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig {
    return new ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.__resources, this.input);
  }

  public get ebsOptions(): ESUpdateElasticsearchDomainConfigDomainConfigEbsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigEbsOptions(this, 'EbsOptions', this.__resources, this.input);
  }

  public get accessPolicies(): ESUpdateElasticsearchDomainConfigDomainConfigAccessPolicies {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAccessPolicies(this, 'AccessPolicies', this.__resources, this.input);
  }

  public get snapshotOptions(): ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptions(this, 'SnapshotOptions', this.__resources, this.input);
  }

  public get vpcOptions(): ESUpdateElasticsearchDomainConfigDomainConfigVpcOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigVpcOptions(this, 'VpcOptions', this.__resources, this.input);
  }

  public get cognitoOptions(): ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptions(this, 'CognitoOptions', this.__resources, this.input);
  }

  public get encryptionAtRestOptions(): ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.__resources, this.input);
  }

  public get nodeToNodeEncryptionOptions(): ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.__resources, this.input);
  }

  public get advancedOptions(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedOptions(this, 'AdvancedOptions', this.__resources, this.input);
  }

  public get logPublishingOptions(): ESUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptions(this, 'LogPublishingOptions', this.__resources, this.input);
  }

  public get domainEndpointOptions(): ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptions(this, 'DomainEndpointOptions', this.__resources, this.input);
  }

  public get advancedSecurityOptions(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersion extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Options',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Options') as unknown as string;
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig {
    return new ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.__resources, this.input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmCount') as unknown as number;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigEbsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigEbsOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigEbsOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigEbsOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigEbsOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigEbsOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.Options.EBSEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeType',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeSize',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.Options.Iops',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.Iops') as unknown as number;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigEbsOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAccessPolicies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.Options',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Options') as unknown as string;
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigAccessPoliciesStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAccessPoliciesStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAccessPoliciesStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigVpcOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigVpcOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigVpcOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigVpcOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigVpcOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigVpcOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.Options.VPCId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SubnetIds',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.Options.AvailabilityZones',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SecurityGroupIds',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SecurityGroupIds') as unknown as string[];
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigVpcOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.UserPoolId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.IdentityPoolId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.Options.RoleArn',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.RoleArn') as unknown as string;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId') as unknown as string;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.Options',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Options') as unknown as Record<string, string>;
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.Options',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Options') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpoint',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get options(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions(this, 'Options', this.__resources, this.input);
  }

  public get status(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus(this, 'Status', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions(this, 'SamlOptions', this.__resources, this.input);
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp {
    return new ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp(this, 'Idp', this.__resources, this.input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.CreationDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.State',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.input.ebsOptions?.ebsEnabled,
            VolumeType: this.input.ebsOptions?.volumeType,
            VolumeSize: this.input.ebsOptions?.volumeSize,
            Iops: this.input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.input.cognitoOptions?.enabled,
            UserPoolId: this.input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
            RoleArn: this.input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.input.advancedOptions,
          AccessPolicies: this.input.accessPolicies,
          LogPublishingOptions: this.input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESUpdatePackage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdatePackageRequest) {
    super(scope, id);
  }

  public get packageDetails(): ESUpdatePackagePackageDetails {
    return new ESUpdatePackagePackageDetails(this, 'PackageDetails', this.__resources, this.input);
  }

}

export class ESUpdatePackagePackageDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdatePackageRequest) {
    super(scope, id);
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }

  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }

  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }

  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }

  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }

  public get errorDetails(): ESUpdatePackagePackageDetailsErrorDetails {
    return new ESUpdatePackagePackageDetailsErrorDetails(this, 'ErrorDetails', this.__resources, this.input);
  }

}

export class ESUpdatePackagePackageDetailsErrorDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpdatePackageRequest) {
    super(scope, id);
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.input.packageId,
          PackageSource: {
            S3BucketName: this.input.packageSource.s3BucketName,
            S3Key: this.input.packageSource.s3Key,
          },
          PackageDescription: this.input.packageDescription,
          CommitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESUpgradeElasticsearchDomain extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.EsUpgradeElasticsearchDomainRequest) {
    super(scope, id);
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.DomainName'),
        outputPath: 'DomainName',
        parameters: {
          DomainName: this.input.domainName,
          TargetVersion: this.input.targetVersion,
          PerformCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.DomainName', props);
    return resource.getResponseField('DomainName') as unknown as string;
  }

  public get targetVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.TargetVersion'),
        outputPath: 'TargetVersion',
        parameters: {
          DomainName: this.input.domainName,
          TargetVersion: this.input.targetVersion,
          PerformCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.TargetVersion', props);
    return resource.getResponseField('TargetVersion') as unknown as string;
  }

  public get performCheckOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.PerformCheckOnly'),
        outputPath: 'PerformCheckOnly',
        parameters: {
          DomainName: this.input.domainName,
          TargetVersion: this.input.targetVersion,
          PerformCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.PerformCheckOnly', props);
    return resource.getResponseField('PerformCheckOnly') as unknown as boolean;
  }

}

