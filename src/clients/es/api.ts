import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class EsClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public acceptInboundCrossClusterSearchConnection(input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest): ESResponsesAcceptInboundCrossClusterSearchConnection {
    return new ESResponsesAcceptInboundCrossClusterSearchConnection(this, this.__resources, input);
  }

  public addTags(input: shapes.EsAddTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AddTags'),
        parameters: {
          ARN: input.arn,
          TagList: input.tagList,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTags', props);
  }

  public associatePackage(input: shapes.EsAssociatePackageRequest): ESResponsesAssociatePackage {
    return new ESResponsesAssociatePackage(this, this.__resources, input);
  }

  public cancelElasticsearchServiceSoftwareUpdate(input: shapes.EsCancelElasticsearchServiceSoftwareUpdateRequest): ESResponsesCancelElasticsearchServiceSoftwareUpdate {
    return new ESResponsesCancelElasticsearchServiceSoftwareUpdate(this, this.__resources, input);
  }

  public createElasticsearchDomain(input: shapes.EsCreateElasticsearchDomainRequest): ESResponsesCreateElasticsearchDomain {
    return new ESResponsesCreateElasticsearchDomain(this, this.__resources, input);
  }

  public createOutboundCrossClusterSearchConnection(input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest): ESResponsesCreateOutboundCrossClusterSearchConnection {
    return new ESResponsesCreateOutboundCrossClusterSearchConnection(this, this.__resources, input);
  }

  public createPackage(input: shapes.EsCreatePackageRequest): ESResponsesCreatePackage {
    return new ESResponsesCreatePackage(this, this.__resources, input);
  }

  public deleteElasticsearchDomain(input: shapes.EsDeleteElasticsearchDomainRequest): ESResponsesDeleteElasticsearchDomain {
    return new ESResponsesDeleteElasticsearchDomain(this, this.__resources, input);
  }

  public deleteElasticsearchServiceRole(): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchServiceRole',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchServiceRole'),
      },
    };
    new cr.AwsCustomResource(this, 'DeleteElasticsearchServiceRole', props);
  }

  public deleteInboundCrossClusterSearchConnection(input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest): ESResponsesDeleteInboundCrossClusterSearchConnection {
    return new ESResponsesDeleteInboundCrossClusterSearchConnection(this, this.__resources, input);
  }

  public deleteOutboundCrossClusterSearchConnection(input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest): ESResponsesDeleteOutboundCrossClusterSearchConnection {
    return new ESResponsesDeleteOutboundCrossClusterSearchConnection(this, this.__resources, input);
  }

  public deletePackage(input: shapes.EsDeletePackageRequest): ESResponsesDeletePackage {
    return new ESResponsesDeletePackage(this, this.__resources, input);
  }

  public describeElasticsearchDomain(input: shapes.EsDescribeElasticsearchDomainRequest): ESResponsesDescribeElasticsearchDomain {
    return new ESResponsesDescribeElasticsearchDomain(this, this.__resources, input);
  }

  public describeElasticsearchDomainConfig(input: shapes.EsDescribeElasticsearchDomainConfigRequest): ESResponsesDescribeElasticsearchDomainConfig {
    return new ESResponsesDescribeElasticsearchDomainConfig(this, this.__resources, input);
  }

  public describeElasticsearchDomains(input: shapes.EsDescribeElasticsearchDomainsRequest): ESResponsesDescribeElasticsearchDomains {
    return new ESResponsesDescribeElasticsearchDomains(this, this.__resources, input);
  }

  public describeElasticsearchInstanceTypeLimits(input: shapes.EsDescribeElasticsearchInstanceTypeLimitsRequest): ESResponsesDescribeElasticsearchInstanceTypeLimits {
    return new ESResponsesDescribeElasticsearchInstanceTypeLimits(this, this.__resources, input);
  }

  public describeInboundCrossClusterSearchConnections(input: shapes.EsDescribeInboundCrossClusterSearchConnectionsRequest): ESResponsesDescribeInboundCrossClusterSearchConnections {
    return new ESResponsesDescribeInboundCrossClusterSearchConnections(this, this.__resources, input);
  }

  public describeOutboundCrossClusterSearchConnections(input: shapes.EsDescribeOutboundCrossClusterSearchConnectionsRequest): ESResponsesDescribeOutboundCrossClusterSearchConnections {
    return new ESResponsesDescribeOutboundCrossClusterSearchConnections(this, this.__resources, input);
  }

  public describePackages(input: shapes.EsDescribePackagesRequest): ESResponsesDescribePackages {
    return new ESResponsesDescribePackages(this, this.__resources, input);
  }

  public describeReservedElasticsearchInstanceOfferings(input: shapes.EsDescribeReservedElasticsearchInstanceOfferingsRequest): ESResponsesDescribeReservedElasticsearchInstanceOfferings {
    return new ESResponsesDescribeReservedElasticsearchInstanceOfferings(this, this.__resources, input);
  }

  public describeReservedElasticsearchInstances(input: shapes.EsDescribeReservedElasticsearchInstancesRequest): ESResponsesDescribeReservedElasticsearchInstances {
    return new ESResponsesDescribeReservedElasticsearchInstances(this, this.__resources, input);
  }

  public dissociatePackage(input: shapes.EsDissociatePackageRequest): ESResponsesDissociatePackage {
    return new ESResponsesDissociatePackage(this, this.__resources, input);
  }

  public fetchCompatibleElasticsearchVersions(input: shapes.EsGetCompatibleElasticsearchVersionsRequest): ESResponsesFetchCompatibleElasticsearchVersions {
    return new ESResponsesFetchCompatibleElasticsearchVersions(this, this.__resources, input);
  }

  public fetchPackageVersionHistory(input: shapes.EsGetPackageVersionHistoryRequest): ESResponsesFetchPackageVersionHistory {
    return new ESResponsesFetchPackageVersionHistory(this, this.__resources, input);
  }

  public fetchUpgradeHistory(input: shapes.EsGetUpgradeHistoryRequest): ESResponsesFetchUpgradeHistory {
    return new ESResponsesFetchUpgradeHistory(this, this.__resources, input);
  }

  public fetchUpgradeStatus(input: shapes.EsGetUpgradeStatusRequest): ESResponsesFetchUpgradeStatus {
    return new ESResponsesFetchUpgradeStatus(this, this.__resources, input);
  }

  public listDomainNames(): ESResponsesListDomainNames {
    return new ESResponsesListDomainNames(this, this.__resources);
  }

  public listDomainsForPackage(input: shapes.EsListDomainsForPackageRequest): ESResponsesListDomainsForPackage {
    return new ESResponsesListDomainsForPackage(this, this.__resources, input);
  }

  public listElasticsearchInstanceTypes(input: shapes.EsListElasticsearchInstanceTypesRequest): ESResponsesListElasticsearchInstanceTypes {
    return new ESResponsesListElasticsearchInstanceTypes(this, this.__resources, input);
  }

  public listElasticsearchVersions(input: shapes.EsListElasticsearchVersionsRequest): ESResponsesListElasticsearchVersions {
    return new ESResponsesListElasticsearchVersions(this, this.__resources, input);
  }

  public listPackagesForDomain(input: shapes.EsListPackagesForDomainRequest): ESResponsesListPackagesForDomain {
    return new ESResponsesListPackagesForDomain(this, this.__resources, input);
  }

  public listTags(input: shapes.EsListTagsRequest): ESResponsesListTags {
    return new ESResponsesListTags(this, this.__resources, input);
  }

  public purchaseReservedElasticsearchInstanceOffering(input: shapes.EsPurchaseReservedElasticsearchInstanceOfferingRequest): ESResponsesPurchaseReservedElasticsearchInstanceOffering {
    return new ESResponsesPurchaseReservedElasticsearchInstanceOffering(this, this.__resources, input);
  }

  public rejectInboundCrossClusterSearchConnection(input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest): ESResponsesRejectInboundCrossClusterSearchConnection {
    return new ESResponsesRejectInboundCrossClusterSearchConnection(this, this.__resources, input);
  }

  public removeTags(input: shapes.EsRemoveTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RemoveTags'),
        parameters: {
          ARN: input.arn,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTags', props);
  }

  public startElasticsearchServiceSoftwareUpdate(input: shapes.EsStartElasticsearchServiceSoftwareUpdateRequest): ESResponsesStartElasticsearchServiceSoftwareUpdate {
    return new ESResponsesStartElasticsearchServiceSoftwareUpdate(this, this.__resources, input);
  }

  public updateElasticsearchDomainConfig(input: shapes.EsUpdateElasticsearchDomainConfigRequest): ESResponsesUpdateElasticsearchDomainConfig {
    return new ESResponsesUpdateElasticsearchDomainConfig(this, this.__resources, input);
  }

  public updatePackage(input: shapes.EsUpdatePackageRequest): ESResponsesUpdatePackage {
    return new ESResponsesUpdatePackage(this, this.__resources, input);
  }

  public upgradeElasticsearchDomain(input: shapes.EsUpgradeElasticsearchDomainRequest): ESResponsesUpgradeElasticsearchDomain {
    return new ESResponsesUpgradeElasticsearchDomain(this, this.__resources, input);
  }

}

export class ESResponsesAcceptInboundCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
  }

  public get crossClusterSearchConnection(): ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnection(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
  }

  public get sourceDomainInfo(): ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get destinationDomainInfo(): ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionStatus(): ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesAcceptInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAcceptInboundCrossClusterSearchConnectionRequest) {
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESResponsesAssociatePackage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAssociatePackageRequest) {
  }

  public get domainPackageDetails(): ESResponsesAssociatePackageDomainPackageDetails {
    return new ESResponsesAssociatePackageDomainPackageDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesAssociatePackageDomainPackageDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAssociatePackageRequest) {
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }

  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }

  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }

  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }

  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }

  public get errorDetails(): ESResponsesAssociatePackageDomainPackageDetailsErrorDetails {
    return new ESResponsesAssociatePackageDomainPackageDetailsErrorDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesAssociatePackageDomainPackageDetailsErrorDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsAssociatePackageRequest) {
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESResponsesCancelElasticsearchServiceSoftwareUpdate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCancelElasticsearchServiceSoftwareUpdateRequest) {
  }

  public get serviceSoftwareOptions(): ESResponsesCancelElasticsearchServiceSoftwareUpdateServiceSoftwareOptions {
    return new ESResponsesCancelElasticsearchServiceSoftwareUpdateServiceSoftwareOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesCancelElasticsearchServiceSoftwareUpdateServiceSoftwareOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCancelElasticsearchServiceSoftwareUpdateRequest) {
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESResponsesCreateElasticsearchDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get domainStatus(): ESResponsesCreateElasticsearchDomainDomainStatus {
    return new ESResponsesCreateElasticsearchDomainDomainStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }

  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }

  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }

  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }

  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }

  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }

  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }

  public get elasticsearchClusterConfig(): ESResponsesCreateElasticsearchDomainDomainStatusElasticsearchClusterConfig {
    return new ESResponsesCreateElasticsearchDomainDomainStatusElasticsearchClusterConfig(this.__scope, this.__resources, this.__input);
  }

  public get ebsOptions(): ESResponsesCreateElasticsearchDomainDomainStatusEbsOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusEbsOptions(this.__scope, this.__resources, this.__input);
  }

  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }

  public get snapshotOptions(): ESResponsesCreateElasticsearchDomainDomainStatusSnapshotOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusSnapshotOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcOptions(): ESResponsesCreateElasticsearchDomainDomainStatusVpcOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusVpcOptions(this.__scope, this.__resources, this.__input);
  }

  public get cognitoOptions(): ESResponsesCreateElasticsearchDomainDomainStatusCognitoOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusCognitoOptions(this.__scope, this.__resources, this.__input);
  }

  public get encryptionAtRestOptions(): ESResponsesCreateElasticsearchDomainDomainStatusEncryptionAtRestOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusEncryptionAtRestOptions(this.__scope, this.__resources, this.__input);
  }

  public get nodeToNodeEncryptionOptions(): ESResponsesCreateElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }

  public get logPublishingOptions(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get serviceSoftwareOptions(): ESResponsesCreateElasticsearchDomainDomainStatusServiceSoftwareOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusServiceSoftwareOptions(this.__scope, this.__resources, this.__input);
  }

  public get domainEndpointOptions(): ESResponsesCreateElasticsearchDomainDomainStatusDomainEndpointOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusDomainEndpointOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedSecurityOptions(): ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusElasticsearchClusterConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESResponsesCreateElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESResponsesCreateElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this.__scope, this.__resources, this.__input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusEbsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.VolumeType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.VolumeSize',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.Iops',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as number;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusSnapshotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusVpcOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.SubnetIds',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as string[];
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusCognitoOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.RoleArn',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as string;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusEncryptionAtRestOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusServiceSoftwareOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusDomainEndpointOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {
    return new ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {
    return new ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp(this.__scope, this.__resources, this.__input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESResponsesCreateElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateElasticsearchDomainRequest) {
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          AccessPolicies: this.__input.accessPolicies,
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          EncryptionAtRestOptions: {
            Enabled: this.__input.encryptionAtRestOptions?.enabled,
            KmsKeyId: this.__input.encryptionAtRestOptions?.kmsKeyId,
          },
          NodeToNodeEncryptionOptions: {
            Enabled: this.__input.nodeToNodeEncryptionOptions?.enabled,
          },
          AdvancedOptions: this.__input.advancedOptions,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESResponsesCreateOutboundCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
  }

  public get sourceDomainInfo(): ESResponsesCreateOutboundCrossClusterSearchConnectionSourceDomainInfo {
    return new ESResponsesCreateOutboundCrossClusterSearchConnectionSourceDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get destinationDomainInfo(): ESResponsesCreateOutboundCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESResponsesCreateOutboundCrossClusterSearchConnectionDestinationDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'ConnectionAlias',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('ConnectionAlias') as unknown as string;
  }

  public get connectionStatus(): ESResponsesCreateOutboundCrossClusterSearchConnectionConnectionStatus {
    return new ESResponsesCreateOutboundCrossClusterSearchConnectionConnectionStatus(this.__scope, this.__resources, this.__input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnectionId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnectionId') as unknown as string;
  }

}

export class ESResponsesCreateOutboundCrossClusterSearchConnectionSourceDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'SourceDomainInfo.OwnerId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'SourceDomainInfo.DomainName',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'SourceDomainInfo.Region',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesCreateOutboundCrossClusterSearchConnectionDestinationDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'DestinationDomainInfo.OwnerId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'DestinationDomainInfo.DomainName',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'DestinationDomainInfo.Region',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesCreateOutboundCrossClusterSearchConnectionConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreateOutboundCrossClusterSearchConnectionRequest) {
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'ConnectionStatus.StatusCode',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'ConnectionStatus.Message',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.__input.sourceDomainInfo.ownerId,
            DomainName: this.__input.sourceDomainInfo.domainName,
            Region: this.__input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.__input.destinationDomainInfo.ownerId,
            DomainName: this.__input.destinationDomainInfo.domainName,
            Region: this.__input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.__input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('ConnectionStatus.Message') as unknown as string;
  }

}

export class ESResponsesCreatePackage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreatePackageRequest) {
  }

  public get packageDetails(): ESResponsesCreatePackagePackageDetails {
    return new ESResponsesCreatePackagePackageDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesCreatePackagePackageDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreatePackageRequest) {
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }

  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }

  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }

  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }

  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }

  public get errorDetails(): ESResponsesCreatePackagePackageDetailsErrorDetails {
    return new ESResponsesCreatePackagePackageDetailsErrorDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesCreatePackagePackageDetailsErrorDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsCreatePackageRequest) {
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.CreatePackage.PackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageName: this.__input.packageName,
          PackageType: this.__input.packageType,
          PackageDescription: this.__input.packageDescription,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreatePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESResponsesDeleteElasticsearchDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get domainStatus(): ESResponsesDeleteElasticsearchDomainDomainStatus {
    return new ESResponsesDeleteElasticsearchDomainDomainStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }

  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }

  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }

  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }

  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }

  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }

  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }

  public get elasticsearchClusterConfig(): ESResponsesDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfig {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfig(this.__scope, this.__resources, this.__input);
  }

  public get ebsOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusEbsOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusEbsOptions(this.__scope, this.__resources, this.__input);
  }

  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }

  public get snapshotOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusSnapshotOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusSnapshotOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusVpcOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusVpcOptions(this.__scope, this.__resources, this.__input);
  }

  public get cognitoOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusCognitoOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusCognitoOptions(this.__scope, this.__resources, this.__input);
  }

  public get encryptionAtRestOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusEncryptionAtRestOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusEncryptionAtRestOptions(this.__scope, this.__resources, this.__input);
  }

  public get nodeToNodeEncryptionOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }

  public get logPublishingOptions(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get serviceSoftwareOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusServiceSoftwareOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusServiceSoftwareOptions(this.__scope, this.__resources, this.__input);
  }

  public get domainEndpointOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusDomainEndpointOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusDomainEndpointOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedSecurityOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESResponsesDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this.__scope, this.__resources, this.__input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusEbsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.VolumeType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.VolumeSize',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.Iops',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as number;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusSnapshotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusVpcOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.SubnetIds',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as string[];
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusCognitoOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.RoleArn',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as string;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusEncryptionAtRestOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusServiceSoftwareOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusDomainEndpointOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {
    return new ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp(this.__scope, this.__resources, this.__input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESResponsesDeleteElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteElasticsearchDomainRequest) {
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESResponsesDeleteInboundCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
  }

  public get crossClusterSearchConnection(): ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnection(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
  }

  public get sourceDomainInfo(): ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get destinationDomainInfo(): ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionStatus(): ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesDeleteInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteInboundCrossClusterSearchConnectionRequest) {
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESResponsesDeleteOutboundCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
  }

  public get crossClusterSearchConnection(): ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnection(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
  }

  public get sourceDomainInfo(): ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get destinationDomainInfo(): ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'CrossClusterSearchConnection.ConnectionAlias',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionAlias') as unknown as string;
  }

  public get connectionStatus(): ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesDeleteOutboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeleteOutboundCrossClusterSearchConnectionRequest) {
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESResponsesDeletePackage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeletePackageRequest) {
  }

  public get packageDetails(): ESResponsesDeletePackagePackageDetails {
    return new ESResponsesDeletePackagePackageDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeletePackagePackageDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeletePackageRequest) {
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }

  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }

  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }

  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }

  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }

  public get errorDetails(): ESResponsesDeletePackagePackageDetailsErrorDetails {
    return new ESResponsesDeletePackagePackageDetailsErrorDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDeletePackagePackageDetailsErrorDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDeletePackageRequest) {
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DeletePackage.PackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.__input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeletePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get domainStatus(): ESResponsesDescribeElasticsearchDomainDomainStatus {
    return new ESResponsesDescribeElasticsearchDomainDomainStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }

  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }

  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }

  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }

  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }

  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }

  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }

  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }

  public get elasticsearchClusterConfig(): ESResponsesDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfig {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfig(this.__scope, this.__resources, this.__input);
  }

  public get ebsOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusEbsOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusEbsOptions(this.__scope, this.__resources, this.__input);
  }

  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }

  public get snapshotOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusSnapshotOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusSnapshotOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusVpcOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusVpcOptions(this.__scope, this.__resources, this.__input);
  }

  public get cognitoOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusCognitoOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusCognitoOptions(this.__scope, this.__resources, this.__input);
  }

  public get encryptionAtRestOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusEncryptionAtRestOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusEncryptionAtRestOptions(this.__scope, this.__resources, this.__input);
  }

  public get nodeToNodeEncryptionOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }

  public get logPublishingOptions(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get serviceSoftwareOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusServiceSoftwareOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusServiceSoftwareOptions(this.__scope, this.__resources, this.__input);
  }

  public get domainEndpointOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusDomainEndpointOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusDomainEndpointOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedSecurityOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESResponsesDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this.__scope, this.__resources, this.__input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusEbsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.VolumeType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.VolumeSize',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.Iops',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusSnapshotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusVpcOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.SubnetIds',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as string[];
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusCognitoOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.RoleArn',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusEncryptionAtRestOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusNodeToNodeEncryptionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusServiceSoftwareOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusDomainEndpointOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {
    return new ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp(this.__scope, this.__resources, this.__input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainDomainStatusAdvancedSecurityOptionsSamlOptionsIdp {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainRequest) {
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get domainConfig(): ESResponsesDescribeElasticsearchDomainConfigDomainConfig {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfig(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get elasticsearchVersion(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersion {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersion(this.__scope, this.__resources, this.__input);
  }

  public get elasticsearchClusterConfig(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig(this.__scope, this.__resources, this.__input);
  }

  public get ebsOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptions(this.__scope, this.__resources, this.__input);
  }

  public get accessPolicies(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAccessPolicies {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAccessPolicies(this.__scope, this.__resources, this.__input);
  }

  public get snapshotOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptions(this.__scope, this.__resources, this.__input);
  }

  public get cognitoOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptions(this.__scope, this.__resources, this.__input);
  }

  public get encryptionAtRestOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions(this.__scope, this.__resources, this.__input);
  }

  public get nodeToNodeEncryptionOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedOptions(this.__scope, this.__resources, this.__input);
  }

  public get logPublishingOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptions(this.__scope, this.__resources, this.__input);
  }

  public get domainEndpointOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedSecurityOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersion {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Options',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Options') as unknown as string;
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig(this.__scope, this.__resources, this.__input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmCount') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.Options.EBSEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeType',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeSize',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.Options.Iops',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.Iops') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigEbsOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAccessPolicies {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.Options',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Options') as unknown as string;
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAccessPoliciesStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAccessPoliciesStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAccessPoliciesStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.Options.VPCId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SubnetIds',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.Options.AvailabilityZones',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SecurityGroupIds',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SecurityGroupIds') as unknown as string[];
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigVpcOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.UserPoolId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.IdentityPoolId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.Options.RoleArn',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.RoleArn') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigCognitoOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.Options',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Options') as unknown as Record<string, string>;
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.Options',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Options') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpoint',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp {
    return new ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp(this.__scope, this.__resources, this.__input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESResponsesDescribeElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesDescribeElasticsearchDomains {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchDomainsRequest) {
  }

  public get domainStatusList(): shapes.EsElasticsearchDomainStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchDomains',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchDomains.DomainStatusList'),
        outputPath: 'DomainStatusList',
        parameters: {
          DomainNames: this.__input.domainNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchDomains.DomainStatusList', props);
    return resource.getResponseField('DomainStatusList') as unknown as shapes.EsElasticsearchDomainStatus[];
  }

}

export class ESResponsesDescribeElasticsearchInstanceTypeLimits {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeElasticsearchInstanceTypeLimitsRequest) {
  }

  public get limitsByRole(): Record<string, shapes.EsLimits> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeElasticsearchInstanceTypeLimits',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeElasticsearchInstanceTypeLimits.LimitsByRole'),
        outputPath: 'LimitsByRole',
        parameters: {
          DomainName: this.__input.domainName,
          InstanceType: this.__input.instanceType,
          ElasticsearchVersion: this.__input.elasticsearchVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeElasticsearchInstanceTypeLimits.LimitsByRole', props);
    return resource.getResponseField('LimitsByRole') as unknown as Record<string, shapes.EsLimits>;
  }

}

export class ESResponsesDescribeInboundCrossClusterSearchConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeInboundCrossClusterSearchConnectionsRequest) {
  }

  public get crossClusterSearchConnections(): shapes.EsInboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeInboundCrossClusterSearchConnections.CrossClusterSearchConnections'),
        outputPath: 'CrossClusterSearchConnections',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInboundCrossClusterSearchConnections.CrossClusterSearchConnections', props);
    return resource.getResponseField('CrossClusterSearchConnections') as unknown as shapes.EsInboundCrossClusterSearchConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeInboundCrossClusterSearchConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInboundCrossClusterSearchConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesDescribeOutboundCrossClusterSearchConnections {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeOutboundCrossClusterSearchConnectionsRequest) {
  }

  public get crossClusterSearchConnections(): shapes.EsOutboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeOutboundCrossClusterSearchConnections.CrossClusterSearchConnections'),
        outputPath: 'CrossClusterSearchConnections',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOutboundCrossClusterSearchConnections.CrossClusterSearchConnections', props);
    return resource.getResponseField('CrossClusterSearchConnections') as unknown as shapes.EsOutboundCrossClusterSearchConnection[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeOutboundCrossClusterSearchConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOutboundCrossClusterSearchConnections.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesDescribePackages {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribePackagesRequest) {
  }

  public get packageDetailsList(): shapes.EsPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribePackages.PackageDetailsList'),
        outputPath: 'PackageDetailsList',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePackages.PackageDetailsList', props);
    return resource.getResponseField('PackageDetailsList') as unknown as shapes.EsPackageDetails[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribePackages.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.__input.filters,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePackages.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesDescribeReservedElasticsearchInstanceOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeReservedElasticsearchInstanceOfferingsRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstanceOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.__input.reservedElasticsearchInstanceOfferingId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedElasticsearchInstanceOfferings.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservedElasticsearchInstanceOfferings(): shapes.EsReservedElasticsearchInstanceOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstanceOfferings.ReservedElasticsearchInstanceOfferings'),
        outputPath: 'ReservedElasticsearchInstanceOfferings',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.__input.reservedElasticsearchInstanceOfferingId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedElasticsearchInstanceOfferings.ReservedElasticsearchInstanceOfferings', props);
    return resource.getResponseField('ReservedElasticsearchInstanceOfferings') as unknown as shapes.EsReservedElasticsearchInstanceOffering[];
  }

}

export class ESResponsesDescribeReservedElasticsearchInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDescribeReservedElasticsearchInstancesRequest) {
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReservedElasticsearchInstanceId: this.__input.reservedElasticsearchInstanceId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedElasticsearchInstances.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

  public get reservedElasticsearchInstances(): shapes.EsReservedElasticsearchInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DescribeReservedElasticsearchInstances.ReservedElasticsearchInstances'),
        outputPath: 'ReservedElasticsearchInstances',
        parameters: {
          ReservedElasticsearchInstanceId: this.__input.reservedElasticsearchInstanceId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedElasticsearchInstances.ReservedElasticsearchInstances', props);
    return resource.getResponseField('ReservedElasticsearchInstances') as unknown as shapes.EsReservedElasticsearchInstance[];
  }

}

export class ESResponsesDissociatePackage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDissociatePackageRequest) {
  }

  public get domainPackageDetails(): ESResponsesDissociatePackageDomainPackageDetails {
    return new ESResponsesDissociatePackageDomainPackageDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDissociatePackageDomainPackageDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDissociatePackageRequest) {
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }

  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }

  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }

  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }

  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }

  public get errorDetails(): ESResponsesDissociatePackageDomainPackageDetailsErrorDetails {
    return new ESResponsesDissociatePackageDomainPackageDetailsErrorDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesDissociatePackageDomainPackageDetailsErrorDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsDissociatePackageRequest) {
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.__input.packageId,
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESResponsesFetchCompatibleElasticsearchVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsGetCompatibleElasticsearchVersionsRequest) {
  }

  public get compatibleElasticsearchVersions(): shapes.EsCompatibleVersionsMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getCompatibleElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetCompatibleElasticsearchVersions.CompatibleElasticsearchVersions'),
        outputPath: 'CompatibleElasticsearchVersions',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetCompatibleElasticsearchVersions.CompatibleElasticsearchVersions', props);
    return resource.getResponseField('CompatibleElasticsearchVersions') as unknown as shapes.EsCompatibleVersionsMap[];
  }

}

export class ESResponsesFetchPackageVersionHistory {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsGetPackageVersionHistoryRequest) {
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.PackageID'),
        outputPath: 'PackageID',
        parameters: {
          PackageID: this.__input.packageId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetPackageVersionHistory.PackageID', props);
    return resource.getResponseField('PackageID') as unknown as string;
  }

  public get packageVersionHistoryList(): shapes.EsPackageVersionHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.PackageVersionHistoryList'),
        outputPath: 'PackageVersionHistoryList',
        parameters: {
          PackageID: this.__input.packageId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetPackageVersionHistory.PackageVersionHistoryList', props);
    return resource.getResponseField('PackageVersionHistoryList') as unknown as shapes.EsPackageVersionHistory[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetPackageVersionHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PackageID: this.__input.packageId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetPackageVersionHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesFetchUpgradeHistory {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsGetUpgradeHistoryRequest) {
  }

  public get upgradeHistories(): shapes.EsUpgradeHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeHistory.UpgradeHistories'),
        outputPath: 'UpgradeHistories',
        parameters: {
          DomainName: this.__input.domainName,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetUpgradeHistory.UpgradeHistories', props);
    return resource.getResponseField('UpgradeHistories') as unknown as shapes.EsUpgradeHistory[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DomainName: this.__input.domainName,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetUpgradeHistory.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesFetchUpgradeStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsGetUpgradeStatusRequest) {
  }

  public get upgradeStep(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.UpgradeStep'),
        outputPath: 'UpgradeStep',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetUpgradeStatus.UpgradeStep', props);
    return resource.getResponseField('UpgradeStep') as unknown as string;
  }

  public get stepStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.StepStatus'),
        outputPath: 'StepStatus',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetUpgradeStatus.StepStatus', props);
    return resource.getResponseField('StepStatus') as unknown as string;
  }

  public get upgradeName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.GetUpgradeStatus.UpgradeName'),
        outputPath: 'UpgradeName',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'GetUpgradeStatus.UpgradeName', props);
    return resource.getResponseField('UpgradeName') as unknown as string;
  }

}

export class ESResponsesListDomainNames {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[]) {
  }

  public get domainNames(): shapes.EsDomainInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDomainNames',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainNames.DomainNames'),
        outputPath: 'DomainNames',
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListDomainNames.DomainNames', props);
    return resource.getResponseField('DomainNames') as unknown as shapes.EsDomainInfo[];
  }

}

export class ESResponsesListDomainsForPackage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsListDomainsForPackageRequest) {
  }

  public get domainPackageDetailsList(): shapes.EsDomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainsForPackage.DomainPackageDetailsList'),
        outputPath: 'DomainPackageDetailsList',
        parameters: {
          PackageID: this.__input.packageId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListDomainsForPackage.DomainPackageDetailsList', props);
    return resource.getResponseField('DomainPackageDetailsList') as unknown as shapes.EsDomainPackageDetails[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListDomainsForPackage.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PackageID: this.__input.packageId,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListDomainsForPackage.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesListElasticsearchInstanceTypes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsListElasticsearchInstanceTypesRequest) {
  }

  public get elasticsearchInstanceTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchInstanceTypes.ElasticsearchInstanceTypes'),
        outputPath: 'ElasticsearchInstanceTypes',
        parameters: {
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          DomainName: this.__input.domainName,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListElasticsearchInstanceTypes.ElasticsearchInstanceTypes', props);
    return resource.getResponseField('ElasticsearchInstanceTypes') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchInstanceTypes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ElasticsearchVersion: this.__input.elasticsearchVersion,
          DomainName: this.__input.domainName,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListElasticsearchInstanceTypes.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesListElasticsearchVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsListElasticsearchVersionsRequest) {
  }

  public get elasticsearchVersions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchVersions.ElasticsearchVersions'),
        outputPath: 'ElasticsearchVersions',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListElasticsearchVersions.ElasticsearchVersions', props);
    return resource.getResponseField('ElasticsearchVersions') as unknown as string[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListElasticsearchVersions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListElasticsearchVersions.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesListPackagesForDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsListPackagesForDomainRequest) {
  }

  public get domainPackageDetailsList(): shapes.EsDomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListPackagesForDomain.DomainPackageDetailsList'),
        outputPath: 'DomainPackageDetailsList',
        parameters: {
          DomainName: this.__input.domainName,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListPackagesForDomain.DomainPackageDetailsList', props);
    return resource.getResponseField('DomainPackageDetailsList') as unknown as shapes.EsDomainPackageDetails[];
  }

  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListPackagesForDomain.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DomainName: this.__input.domainName,
          MaxResults: this.__input.maxResults,
          NextToken: this.__input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListPackagesForDomain.NextToken', props);
    return resource.getResponseField('NextToken') as unknown as string;
  }

}

export class ESResponsesListTags {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsListTagsRequest) {
  }

  public get tagList(): shapes.EsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.ListTags.TagList'),
        outputPath: 'TagList',
        parameters: {
          ARN: this.__input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListTags.TagList', props);
    return resource.getResponseField('TagList') as unknown as shapes.EsTag[];
  }

}

export class ESResponsesPurchaseReservedElasticsearchInstanceOffering {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsPurchaseReservedElasticsearchInstanceOfferingRequest) {
  }

  public get reservedElasticsearchInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.PurchaseReservedElasticsearchInstanceOffering.ReservedElasticsearchInstanceId'),
        outputPath: 'ReservedElasticsearchInstanceId',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.__input.reservedElasticsearchInstanceOfferingId,
          ReservationName: this.__input.reservationName,
          InstanceCount: this.__input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedElasticsearchInstanceOffering.ReservedElasticsearchInstanceId', props);
    return resource.getResponseField('ReservedElasticsearchInstanceId') as unknown as string;
  }

  public get reservationName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.PurchaseReservedElasticsearchInstanceOffering.ReservationName'),
        outputPath: 'ReservationName',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.__input.reservedElasticsearchInstanceOfferingId,
          ReservationName: this.__input.reservationName,
          InstanceCount: this.__input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedElasticsearchInstanceOffering.ReservationName', props);
    return resource.getResponseField('ReservationName') as unknown as string;
  }

}

export class ESResponsesRejectInboundCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
  }

  public get crossClusterSearchConnection(): ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnection {
    return new ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnection(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnection {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
  }

  public get sourceDomainInfo(): ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {
    return new ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get destinationDomainInfo(): ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {
    return new ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo(this.__scope, this.__resources, this.__input);
  }

  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }

  public get connectionStatus(): ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {
    return new ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionSourceDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionDestinationDomainInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as string;
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as string;
  }

}

export class ESResponsesRejectInboundCrossClusterSearchConnectionCrossClusterSearchConnectionConnectionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsRejectInboundCrossClusterSearchConnectionRequest) {
  }

  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as string;
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
        parameters: {
          CrossClusterSearchConnectionId: this.__input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as string;
  }

}

export class ESResponsesStartElasticsearchServiceSoftwareUpdate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsStartElasticsearchServiceSoftwareUpdateRequest) {
  }

  public get serviceSoftwareOptions(): ESResponsesStartElasticsearchServiceSoftwareUpdateServiceSoftwareOptions {
    return new ESResponsesStartElasticsearchServiceSoftwareUpdateServiceSoftwareOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesStartElasticsearchServiceSoftwareUpdateServiceSoftwareOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsStartElasticsearchServiceSoftwareUpdateRequest) {
  }

  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }

  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }

  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }

  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }

  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }

  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }

  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          DomainName: this.__input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get domainConfig(): ESResponsesUpdateElasticsearchDomainConfigDomainConfig {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfig(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get elasticsearchVersion(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersion {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersion(this.__scope, this.__resources, this.__input);
  }

  public get elasticsearchClusterConfig(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig(this.__scope, this.__resources, this.__input);
  }

  public get ebsOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptions(this.__scope, this.__resources, this.__input);
  }

  public get accessPolicies(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAccessPolicies {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAccessPolicies(this.__scope, this.__resources, this.__input);
  }

  public get snapshotOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptions(this.__scope, this.__resources, this.__input);
  }

  public get vpcOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptions(this.__scope, this.__resources, this.__input);
  }

  public get cognitoOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptions(this.__scope, this.__resources, this.__input);
  }

  public get encryptionAtRestOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions(this.__scope, this.__resources, this.__input);
  }

  public get nodeToNodeEncryptionOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedOptions(this.__scope, this.__resources, this.__input);
  }

  public get logPublishingOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptions(this.__scope, this.__resources, this.__input);
  }

  public get domainEndpointOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptions(this.__scope, this.__resources, this.__input);
  }

  public get advancedSecurityOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersion {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Options',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Options') as unknown as string;
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchVersionStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceType') as unknown as string;
  }

  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount') as unknown as number;
  }

  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled') as unknown as boolean;
  }

  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }

  public get zoneAwarenessConfig(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig(this.__scope, this.__resources, this.__input);
  }

  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType') as unknown as string;
  }

  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount') as unknown as number;
  }

  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled') as unknown as boolean;
  }

  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmType') as unknown as string;
  }

  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmCount') as unknown as number;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigOptionsZoneAwarenessConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigElasticsearchClusterConfigStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.Options.EBSEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.EBSEnabled') as unknown as boolean;
  }

  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeType',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeType') as unknown as string;
  }

  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.Options.VolumeSize',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.VolumeSize') as unknown as number;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.Options.Iops',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Options.Iops') as unknown as number;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigEbsOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAccessPolicies {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.Options',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Options') as unknown as string;
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAccessPoliciesStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAccessPoliciesStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAccessPoliciesStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour') as unknown as number;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigSnapshotOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.Options.VPCId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.VPCId') as unknown as string;
  }

  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SubnetIds',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SubnetIds') as unknown as string[];
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.Options.AvailabilityZones',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.AvailabilityZones') as unknown as string[];
  }

  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.Options.SecurityGroupIds',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Options.SecurityGroupIds') as unknown as string[];
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigVpcOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.Enabled') as unknown as boolean;
  }

  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.UserPoolId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.UserPoolId') as unknown as string;
  }

  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.Options.IdentityPoolId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.IdentityPoolId') as unknown as string;
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.Options.RoleArn',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Options.RoleArn') as unknown as string;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigCognitoOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.Enabled') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId') as unknown as string;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigEncryptionAtRestOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigNodeToNodeEncryptionOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.Options',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Options') as unknown as Record<string, string>;
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): Record<string, shapes.EsLogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.Options',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Options') as unknown as Record<string, shapes.EsLogPublishingOption>;
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigLogPublishingOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS') as unknown as boolean;
  }

  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy') as unknown as string;
  }

  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled') as unknown as boolean;
  }

  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpoint',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpoint') as unknown as string;
  }

  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn') as unknown as string;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigDomainEndpointOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get options(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions(this.__scope, this.__resources, this.__input);
  }

  public get status(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.Enabled') as unknown as boolean;
  }

  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }

  public get samlOptions(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled') as unknown as boolean;
  }

  public get idp(): ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp {
    return new ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp(this.__scope, this.__resources, this.__input);
  }

  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey') as unknown as string;
  }

  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey') as unknown as string;
  }

  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsOptionsSamlOptionsIdp {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent') as unknown as string;
  }

  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId') as unknown as string;
  }

}

export class ESResponsesUpdateElasticsearchDomainConfigDomainConfigAdvancedSecurityOptionsStatus {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdateElasticsearchDomainConfigRequest) {
  }

  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.CreationDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.CreationDate') as unknown as string;
  }

  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateDate',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateDate') as unknown as string;
  }

  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion') as unknown as number;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.State',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.State') as unknown as string;
  }

  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion',
        parameters: {
          DomainName: this.__input.domainName,
          ElasticsearchClusterConfig: {
            InstanceType: this.__input.elasticsearchClusterConfig?.instanceType,
            InstanceCount: this.__input.elasticsearchClusterConfig?.instanceCount,
            DedicatedMasterEnabled: this.__input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            ZoneAwarenessEnabled: this.__input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            ZoneAwarenessConfig: {
              AvailabilityZoneCount: this.__input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            DedicatedMasterType: this.__input.elasticsearchClusterConfig?.dedicatedMasterType,
            DedicatedMasterCount: this.__input.elasticsearchClusterConfig?.dedicatedMasterCount,
            WarmEnabled: this.__input.elasticsearchClusterConfig?.warmEnabled,
            WarmType: this.__input.elasticsearchClusterConfig?.warmType,
            WarmCount: this.__input.elasticsearchClusterConfig?.warmCount,
          },
          EBSOptions: {
            EBSEnabled: this.__input.ebsOptions?.ebsEnabled,
            VolumeType: this.__input.ebsOptions?.volumeType,
            VolumeSize: this.__input.ebsOptions?.volumeSize,
            Iops: this.__input.ebsOptions?.iops,
          },
          SnapshotOptions: {
            AutomatedSnapshotStartHour: this.__input.snapshotOptions?.automatedSnapshotStartHour,
          },
          VPCOptions: {
            SubnetIds: this.__input.vpcOptions?.subnetIds,
            SecurityGroupIds: this.__input.vpcOptions?.securityGroupIds,
          },
          CognitoOptions: {
            Enabled: this.__input.cognitoOptions?.enabled,
            UserPoolId: this.__input.cognitoOptions?.userPoolId,
            IdentityPoolId: this.__input.cognitoOptions?.identityPoolId,
            RoleArn: this.__input.cognitoOptions?.roleArn,
          },
          AdvancedOptions: this.__input.advancedOptions,
          AccessPolicies: this.__input.accessPolicies,
          LogPublishingOptions: this.__input.logPublishingOptions,
          DomainEndpointOptions: {
            EnforceHTTPS: this.__input.domainEndpointOptions?.enforceHttps,
            TLSSecurityPolicy: this.__input.domainEndpointOptions?.tlsSecurityPolicy,
            CustomEndpointEnabled: this.__input.domainEndpointOptions?.customEndpointEnabled,
            CustomEndpoint: this.__input.domainEndpointOptions?.customEndpoint,
            CustomEndpointCertificateArn: this.__input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          AdvancedSecurityOptions: {
            Enabled: this.__input.advancedSecurityOptions?.enabled,
            InternalUserDatabaseEnabled: this.__input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            MasterUserOptions: {
              MasterUserARN: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              MasterUserName: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              MasterUserPassword: this.__input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            SAMLOptions: {
              Enabled: this.__input.advancedSecurityOptions?.samlOptions?.enabled,
              Idp: {
                MetadataContent: this.__input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                EntityId: this.__input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              MasterUserName: this.__input.advancedSecurityOptions?.samlOptions?.masterUserName,
              MasterBackendRole: this.__input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              SubjectKey: this.__input.advancedSecurityOptions?.samlOptions?.subjectKey,
              RolesKey: this.__input.advancedSecurityOptions?.samlOptions?.rolesKey,
              SessionTimeoutMinutes: this.__input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion') as unknown as boolean;
  }

}

export class ESResponsesUpdatePackage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdatePackageRequest) {
  }

  public get packageDetails(): ESResponsesUpdatePackagePackageDetails {
    return new ESResponsesUpdatePackagePackageDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdatePackagePackageDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdatePackageRequest) {
  }

  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }

  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }

  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }

  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }

  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }

  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }

  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }

  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }

  public get errorDetails(): ESResponsesUpdatePackagePackageDetailsErrorDetails {
    return new ESResponsesUpdatePackagePackageDetailsErrorDetails(this.__scope, this.__resources, this.__input);
  }

}

export class ESResponsesUpdatePackagePackageDetailsErrorDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpdatePackageRequest) {
  }

  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorType',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as string;
  }

  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpdatePackage.PackageDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
        parameters: {
          PackageID: this.__input.packageId,
          PackageSource: {
            S3BucketName: this.__input.packageSource.s3BucketName,
            S3Key: this.__input.packageSource.s3Key,
          },
          PackageDescription: this.__input.packageDescription,
          CommitMessage: this.__input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }

}

export class ESResponsesUpgradeElasticsearchDomain {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.EsUpgradeElasticsearchDomainRequest) {
  }

  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.DomainName'),
        outputPath: 'DomainName',
        parameters: {
          DomainName: this.__input.domainName,
          TargetVersion: this.__input.targetVersion,
          PerformCheckOnly: this.__input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpgradeElasticsearchDomain.DomainName', props);
    return resource.getResponseField('DomainName') as unknown as string;
  }

  public get targetVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.TargetVersion'),
        outputPath: 'TargetVersion',
        parameters: {
          DomainName: this.__input.domainName,
          TargetVersion: this.__input.targetVersion,
          PerformCheckOnly: this.__input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpgradeElasticsearchDomain.TargetVersion', props);
    return resource.getResponseField('TargetVersion') as unknown as string;
  }

  public get performCheckOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ES.UpgradeElasticsearchDomain.PerformCheckOnly'),
        outputPath: 'PerformCheckOnly',
        parameters: {
          DomainName: this.__input.domainName,
          TargetVersion: this.__input.targetVersion,
          PerformCheckOnly: this.__input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'UpgradeElasticsearchDomain.PerformCheckOnly', props);
    return resource.getResponseField('PerformCheckOnly') as unknown as boolean;
  }

}

