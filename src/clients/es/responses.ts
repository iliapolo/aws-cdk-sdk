import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

/**
 * Response for AcceptInboundCrossClusterSearchConnection.
 */
export class AcceptInboundCrossClusterSearchConnectionResponse {
  /**
   * Response for AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnection
   */
  static CrossClusterSearchConnectionResponse = class {
    /**
     * Response for AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfo
     */
    static SourceDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get sourceDomainInfo(): InstanceType<typeof AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse> {
      return new AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfo
     */
    static DestinationDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get destinationDomainInfo(): InstanceType<typeof AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse> {
      return new AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the connection id for the inbound cross-cluster search connection.
     */
    public get crossClusterSearchConnectionId(): shapes.CrossClusterSearchConnectionId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'acceptInboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
          outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
          parameters: {
            CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
      return request.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as shapes.CrossClusterSearchConnectionId;
    }
    /**
     * Response for AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatus
     */
    static ConnectionStatusResponse = class {
      /**
       * The state code for inbound connection. This can be one of the following:  PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner. APPROVED: Inbound connection is pending acceptance by destination domain owner. REJECTING: Inbound connection rejection is in process. REJECTED: Inbound connection is rejected. DELETING: Inbound connection deletion is in progress. DELETED: Inbound connection is deleted and cannot be used further.
       */
      public get statusCode(): shapes.InboundCrossClusterSearchConnectionStatusCode {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as shapes.InboundCrossClusterSearchConnectionStatusCode;
      }
      /**
       * Specifies verbose information for the inbound connection status.
       */
      public get message(): shapes.CrossClusterSearchConnectionStatusMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'acceptInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as shapes.CrossClusterSearchConnectionStatusMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get connectionStatus(): InstanceType<typeof AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse> {
      return new AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get crossClusterSearchConnection(): InstanceType<typeof AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse> {
    return new AcceptInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
  }
}

/**
 * Response for AssociatePackage.
 */
export class AssociatePackageResponse {
  /**
   * Response for AssociatePackageResponse.DomainPackageDetails
   */
  static DomainPackageDetailsResponse = class {
    /**
     * Internal ID of the package.
     */
    public get packageId(): shapes.PackageID {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.PackageID'),
          outputPath: 'DomainPackageDetails.PackageID',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.PackageID', props);
      return request.getResponseField('DomainPackageDetails.PackageID') as unknown as shapes.PackageID;
    }
    /**
     * User specified name of the package.
     */
    public get packageName(): shapes.PackageName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.PackageName'),
          outputPath: 'DomainPackageDetails.PackageName',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.PackageName', props);
      return request.getResponseField('DomainPackageDetails.PackageName') as unknown as shapes.PackageName;
    }
    /**
     * Currently supports only TXT-DICTIONARY.
     */
    public get packageType(): shapes.PackageType {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.PackageType'),
          outputPath: 'DomainPackageDetails.PackageType',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.PackageType', props);
      return request.getResponseField('DomainPackageDetails.PackageType') as unknown as shapes.PackageType;
    }
    /**
     * Timestamp of the most-recent update to the association status.
     */
    public get lastUpdated(): shapes.LastUpdated {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.LastUpdated'),
          outputPath: 'DomainPackageDetails.LastUpdated',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.LastUpdated', props);
      return request.getResponseField('DomainPackageDetails.LastUpdated') as unknown as shapes.LastUpdated;
    }
    /**
     * Name of the domain you've associated a package with.
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.DomainName'),
          outputPath: 'DomainPackageDetails.DomainName',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.DomainName', props);
      return request.getResponseField('DomainPackageDetails.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
     */
    public get domainPackageStatus(): shapes.DomainPackageStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.DomainPackageStatus'),
          outputPath: 'DomainPackageDetails.DomainPackageStatus',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.DomainPackageStatus', props);
      return request.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as shapes.DomainPackageStatus;
    }
    /**
     * State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
     */
    public get packageVersion(): shapes.PackageVersion {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.PackageVersion'),
          outputPath: 'DomainPackageDetails.PackageVersion',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.PackageVersion', props);
      return request.getResponseField('DomainPackageDetails.PackageVersion') as unknown as shapes.PackageVersion;
    }
    /**
     * The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.
     */
    public get referencePath(): shapes.ReferencePath {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'associatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.ReferencePath'),
          outputPath: 'DomainPackageDetails.ReferencePath',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.ReferencePath', props);
      return request.getResponseField('DomainPackageDetails.ReferencePath') as unknown as shapes.ReferencePath;
    }
    /**
     * Response for AssociatePackageResponse.DomainPackageDetailsResponse.ErrorDetails
     */
    static ErrorDetailsResponse = class {
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorType(): shapes.ErrorType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'associatePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorType'),
            outputPath: 'DomainPackageDetails.ErrorDetails.ErrorType',
            parameters: {
              PackageID: this.input.packageId,
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorType', props);
        return request.getResponseField('DomainPackageDetails.ErrorDetails.ErrorType') as unknown as shapes.ErrorType;
      }
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorMessage(): shapes.ErrorMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'associatePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage'),
            outputPath: 'DomainPackageDetails.ErrorDetails.ErrorMessage',
            parameters: {
              PackageID: this.input.packageId,
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage', props);
        return request.getResponseField('DomainPackageDetails.ErrorDetails.ErrorMessage') as unknown as shapes.ErrorMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AssociatePackageRequest) {
      }
    }
    public get errorDetails(): InstanceType<typeof AssociatePackageResponse.DomainPackageDetailsResponse.ErrorDetailsResponse> {
      return new AssociatePackageResponse.DomainPackageDetailsResponse.ErrorDetailsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AssociatePackageRequest) {
    }
  }
  public get domainPackageDetails(): InstanceType<typeof AssociatePackageResponse.DomainPackageDetailsResponse> {
    return new AssociatePackageResponse.DomainPackageDetailsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.AssociatePackageRequest) {
  }
}

/**
 * Response for CancelElasticsearchServiceSoftwareUpdate.
 */
export class CancelElasticsearchServiceSoftwareUpdateResponse {
  /**
   * Response for CancelElasticsearchServiceSoftwareUpdateResponse.ServiceSoftwareOptions
   */
  static ServiceSoftwareOptionsResponse = class {
    /**
     * The current service software version that is present on the domain.
     */
    public get currentVersion(): shapes.String {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
          outputPath: 'ServiceSoftwareOptions.CurrentVersion',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
      return request.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as shapes.String;
    }
    /**
     * The new service software version if one is available.
     */
    public get newVersion(): shapes.String {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
          outputPath: 'ServiceSoftwareOptions.NewVersion',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
      return request.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as shapes.String;
    }
    /**
     * True if you are able to update you service software version. False if you are not able to update your service software version.
     */
    public get updateAvailable(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
          outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
      return request.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as shapes.Boolean;
    }
    /**
     * True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
     */
    public get cancellable(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
          outputPath: 'ServiceSoftwareOptions.Cancellable',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
      return request.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as shapes.Boolean;
    }
    /**
     * The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
     */
    public get updateStatus(): shapes.DeploymentStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
          outputPath: 'ServiceSoftwareOptions.UpdateStatus',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
      return request.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as shapes.DeploymentStatus;
    }
    /**
     * The description of the UpdateStatus.
     */
    public get description(): shapes.String {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
          outputPath: 'ServiceSoftwareOptions.Description',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
      return request.getResponseField('ServiceSoftwareOptions.Description') as unknown as shapes.String;
    }
    /**
     * Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
     */
    public get automatedUpdateDate(): shapes.DeploymentCloseDateTimeStamp {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
          outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
      return request.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as shapes.DeploymentCloseDateTimeStamp;
    }
    /**
     * True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
     */
    public get optionalDeployment(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'cancelElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
          outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
      return request.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as shapes.Boolean;
    }
    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    }
  }
  public get serviceSoftwareOptions(): InstanceType<typeof CancelElasticsearchServiceSoftwareUpdateResponse.ServiceSoftwareOptionsResponse> {
    return new CancelElasticsearchServiceSoftwareUpdateResponse.ServiceSoftwareOptionsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
  }
}

/**
 * Response for CreateElasticsearchDomain.
 */
export class CreateElasticsearchDomainResponse {
  /**
   * Response for CreateElasticsearchDomainResponse.DomainStatus
   */
  static DomainStatusResponse = class {
    /**
     * The unique identifier for the specified Elasticsearch domain.
     */
    public get domainId(): shapes.DomainId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainId'),
          outputPath: 'DomainStatus.DomainId',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainId', props);
      return request.getResponseField('DomainStatus.DomainId') as unknown as shapes.DomainId;
    }
    /**
     * The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainName'),
          outputPath: 'DomainStatus.DomainName',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainName', props);
      return request.getResponseField('DomainStatus.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
     */
    public get arn(): shapes.ARN {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ARN'),
          outputPath: 'DomainStatus.ARN',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ARN', props);
      return request.getResponseField('DomainStatus.ARN') as unknown as shapes.ARN;
    }
    /**
     * The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
     */
    public get created(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.Created'),
          outputPath: 'DomainStatus.Created',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.Created', props);
      return request.getResponseField('DomainStatus.Created') as unknown as shapes.Boolean;
    }
    /**
     * The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
     */
    public get deleted(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.Deleted'),
          outputPath: 'DomainStatus.Deleted',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.Deleted', props);
      return request.getResponseField('DomainStatus.Deleted') as unknown as shapes.Boolean;
    }
    /**
     * The Elasticsearch domain endpoint that you use to submit index and search requests.
     */
    public get endpoint(): shapes.ServiceUrl {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.Endpoint'),
          outputPath: 'DomainStatus.Endpoint',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.Endpoint', props);
      return request.getResponseField('DomainStatus.Endpoint') as unknown as shapes.ServiceUrl;
    }
    /**
     * Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
     */
    public get endpoints(): shapes.EndpointsMap {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.Endpoints'),
          outputPath: 'DomainStatus.Endpoints',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.Endpoints', props);
      return request.getResponseField('DomainStatus.Endpoints') as unknown as shapes.EndpointsMap;
    }
    /**
     * The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
     */
    public get processing(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.Processing'),
          outputPath: 'DomainStatus.Processing',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.Processing', props);
      return request.getResponseField('DomainStatus.Processing') as unknown as shapes.Boolean;
    }
    /**
     * The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
     */
    public get upgradeProcessing(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.UpgradeProcessing'),
          outputPath: 'DomainStatus.UpgradeProcessing',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
      return request.getResponseField('DomainStatus.UpgradeProcessing') as unknown as shapes.Boolean;
    }
    /**
     * The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
     */
    public get elasticsearchVersion(): shapes.ElasticsearchVersionString {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
          outputPath: 'DomainStatus.ElasticsearchVersion',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
      return request.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as shapes.ElasticsearchVersionString;
    }
    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfig
     */
    static ElasticsearchClusterConfigResponse = class {
      /**
       * The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
       */
      public get instanceType(): shapes.ESPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as shapes.ESPartitionInstanceType;
      }
      /**
       * The number of instances in the specified domain cluster.
       */
      public get instanceCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as shapes.IntegerClass;
      }
      /**
       * A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
       */
      public get dedicatedMasterEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as shapes.Boolean;
      }
      /**
       * A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
       */
      public get zoneAwarenessEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfig
       */
      static ZoneAwarenessConfigResponse = class {
        /**
         * An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
         */
        public get availabilityZoneCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'createElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
              outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchVersion: this.input.elasticsearchVersion,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                AccessPolicies: this.input.accessPolicies,
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                EncryptionAtRestOptions: {
                  Enabled: this.input.encryptionAtRestOptions?.enabled,
                  KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                },
                NodeToNodeEncryptionOptions: {
                  Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                },
                AdvancedOptions: this.input.advancedOptions,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
          return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
        }
      }
      public get zoneAwarenessConfig(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfigResponse> {
        return new CreateElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfigResponse(this.scope, this.resources, this.input);
      }

      /**
       * The instance type for a dedicated master node.
       */
      public get dedicatedMasterType(): shapes.ESPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as shapes.ESPartitionInstanceType;
      }
      /**
       * Total number of dedicated master nodes, active and on standby, for the cluster.
       */
      public get dedicatedMasterCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as shapes.IntegerClass;
      }
      /**
       * True to enable warm storage.
       */
      public get warmEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as shapes.Boolean;
      }
      /**
       * The instance type for the Elasticsearch cluster's warm nodes.
       */
      public get warmType(): shapes.ESWarmPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as shapes.ESWarmPartitionInstanceType;
      }
      /**
       * The number of warm nodes in the cluster.
       */
      public get warmCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get elasticsearchClusterConfig(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.EBSOptions
     */
    static EBSOptionsResponse = class {
      /**
       * Specifies whether EBS-based storage is enabled.
       */
      public get ebsEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
            outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
        return request.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the volume type for EBS-based storage.
       */
      public get volumeType(): shapes.VolumeType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
            outputPath: 'DomainStatus.EBSOptions.VolumeType',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
        return request.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as shapes.VolumeType;
      }
      /**
       * Integer to specify the size of an EBS volume.
       */
      public get volumeSize(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
            outputPath: 'DomainStatus.EBSOptions.VolumeSize',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
        return request.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as shapes.IntegerClass;
      }
      /**
       * Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
       */
      public get iops(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
            outputPath: 'DomainStatus.EBSOptions.Iops',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
        return request.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get ebsOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.EBSOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.EBSOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * IAM access policy as a JSON-formatted string.
     */
    public get accessPolicies(): shapes.PolicyDocument {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AccessPolicies'),
          outputPath: 'DomainStatus.AccessPolicies',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AccessPolicies', props);
      return request.getResponseField('DomainStatus.AccessPolicies') as unknown as shapes.PolicyDocument;
    }
    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptions
     */
    static SnapshotOptionsResponse = class {
      /**
       * Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
       */
      public get automatedSnapshotStartHour(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
            outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
        return request.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get snapshotOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.VPCOptions
     */
    static VPCOptionsResponse = class {
      /**
       * The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
       */
      public get vpcId(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
            outputPath: 'DomainStatus.VPCOptions.VPCId',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
        return request.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as shapes.String;
      }
      /**
       * Specifies the subnets for VPC endpoint.
       */
      public get subnetIds(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
            outputPath: 'DomainStatus.VPCOptions.SubnetIds',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
        return request.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as shapes.StringList;
      }
      /**
       * The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
       */
      public get availabilityZones(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
            outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
        return request.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as shapes.StringList;
      }
      /**
       * Specifies the security groups for VPC endpoint.
       */
      public get securityGroupIds(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
            outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
        return request.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as shapes.StringList;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get vpcOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.VPCOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.VPCOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.CognitoOptions
     */
    static CognitoOptionsResponse = class {
      /**
       * Specifies the option to enable Cognito for Kibana authentication.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
            outputPath: 'DomainStatus.CognitoOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
        return request.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the Cognito user pool ID for Kibana authentication.
       */
      public get userPoolId(): shapes.UserPoolId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
            outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
        return request.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as shapes.UserPoolId;
      }
      /**
       * Specifies the Cognito identity pool ID for Kibana authentication.
       */
      public get identityPoolId(): shapes.IdentityPoolId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
            outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
        return request.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as shapes.IdentityPoolId;
      }
      /**
       * Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
       */
      public get roleArn(): shapes.RoleArn {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
            outputPath: 'DomainStatus.CognitoOptions.RoleArn',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
        return request.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as shapes.RoleArn;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get cognitoOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.CognitoOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.CognitoOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptions
     */
    static EncryptionAtRestOptionsResponse = class {
      /**
       * Specifies the option to enable Encryption At Rest.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
            outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
        return request.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the KMS Key ID for Encryption At Rest options.
       */
      public get kmsKeyId(): shapes.KmsKeyId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
            outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
        return request.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as shapes.KmsKeyId;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get encryptionAtRestOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptions
     */
    static NodeToNodeEncryptionOptionsResponse = class {
      /**
       * Specify true to enable node-to-node encryption.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
            outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
        return request.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as shapes.Boolean;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get nodeToNodeEncryptionOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the status of the AdvancedOptions
     */
    public get advancedOptions(): shapes.AdvancedOptions {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedOptions'),
          outputPath: 'DomainStatus.AdvancedOptions',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedOptions', props);
      return request.getResponseField('DomainStatus.AdvancedOptions') as unknown as shapes.AdvancedOptions;
    }
    /**
     * Log publishing options for the given domain.
     */
    public get logPublishingOptions(): shapes.LogPublishingOptions {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.LogPublishingOptions'),
          outputPath: 'DomainStatus.LogPublishingOptions',
          parameters: {
            DomainName: this.input.domainName,
            ElasticsearchVersion: this.input.elasticsearchVersion,
            ElasticsearchClusterConfig: {
              InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
              InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
              DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
              ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
              ZoneAwarenessConfig: {
                AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
              },
              DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
              DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
              WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
              WarmType: this.input.elasticsearchClusterConfig?.warmType,
              WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
            },
            EBSOptions: {
              EBSEnabled: this.input.ebsOptions?.ebsEnabled,
              VolumeType: this.input.ebsOptions?.volumeType,
              VolumeSize: this.input.ebsOptions?.volumeSize,
              Iops: this.input.ebsOptions?.iops,
            },
            AccessPolicies: this.input.accessPolicies,
            SnapshotOptions: {
              AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
            },
            VPCOptions: {
              SubnetIds: this.input.vpcOptions?.subnetIds,
              SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
            },
            CognitoOptions: {
              Enabled: this.input.cognitoOptions?.enabled,
              UserPoolId: this.input.cognitoOptions?.userPoolId,
              IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
              RoleArn: this.input.cognitoOptions?.roleArn,
            },
            EncryptionAtRestOptions: {
              Enabled: this.input.encryptionAtRestOptions?.enabled,
              KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
            },
            NodeToNodeEncryptionOptions: {
              Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
            },
            AdvancedOptions: this.input.advancedOptions,
            LogPublishingOptions: this.input.logPublishingOptions,
            DomainEndpointOptions: {
              EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
              TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
              CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
              CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
              CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
            },
            AdvancedSecurityOptions: {
              Enabled: this.input.advancedSecurityOptions?.enabled,
              InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
              MasterUserOptions: {
                MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
              },
              SAMLOptions: {
                Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                Idp: {
                  MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                  EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                },
                MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
              },
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
      return request.getResponseField('DomainStatus.LogPublishingOptions') as unknown as shapes.LogPublishingOptions;
    }
    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptions
     */
    static ServiceSoftwareOptionsResponse = class {
      /**
       * The current service software version that is present on the domain.
       */
      public get currentVersion(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as shapes.String;
      }
      /**
       * The new service software version if one is available.
       */
      public get newVersion(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as shapes.String;
      }
      /**
       * True if you are able to update you service software version. False if you are not able to update your service software version.
       */
      public get updateAvailable(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as shapes.Boolean;
      }
      /**
       * True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
       */
      public get cancellable(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as shapes.Boolean;
      }
      /**
       * The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
       */
      public get updateStatus(): shapes.DeploymentStatus {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as shapes.DeploymentStatus;
      }
      /**
       * The description of the UpdateStatus.
       */
      public get description(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as shapes.String;
      }
      /**
       * Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
       */
      public get automatedUpdateDate(): shapes.DeploymentCloseDateTimeStamp {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as shapes.DeploymentCloseDateTimeStamp;
      }
      /**
       * True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
       */
      public get optionalDeployment(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as shapes.Boolean;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get serviceSoftwareOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptions
     */
    static DomainEndpointOptionsResponse = class {
      /**
       * Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
       */
      public get enforceHttps(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
            outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as shapes.Boolean;
      }
      /**
       * Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.  It can be one of the following values:  Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher. Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2
       */
      public get tlsSecurityPolicy(): shapes.TLSSecurityPolicy {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
            outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as shapes.TLSSecurityPolicy;
      }
      /**
       * Specify if custom endpoint should be enabled for the Elasticsearch domain.
       */
      public get customEndpointEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Specify the fully qualified domain for your custom endpoint.
       */
      public get customEndpoint(): shapes.DomainNameFqdn {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as shapes.DomainNameFqdn;
      }
      /**
       * Specify ACM certificate ARN for your custom endpoint.
       */
      public get customEndpointCertificateArn(): shapes.ARN {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as shapes.ARN;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get domainEndpointOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptions
     */
    static AdvancedSecurityOptionsResponse = class {
      /**
       * True if advanced security is enabled.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
            outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
        return request.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * True if the internal user database is enabled.
       */
      public get internalUserDatabaseEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
            outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchVersion: this.input.elasticsearchVersion,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              AccessPolicies: this.input.accessPolicies,
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              EncryptionAtRestOptions: {
                Enabled: this.input.encryptionAtRestOptions?.enabled,
                KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
              },
              NodeToNodeEncryptionOptions: {
                Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
              },
              AdvancedOptions: this.input.advancedOptions,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
        return request.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptions
       */
      static SAMLOptionsResponse = class {
        /**
         * True if SAML is enabled.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'createElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchVersion: this.input.elasticsearchVersion,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                AccessPolicies: this.input.accessPolicies,
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                EncryptionAtRestOptions: {
                  Enabled: this.input.encryptionAtRestOptions?.enabled,
                  KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                },
                NodeToNodeEncryptionOptions: {
                  Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                },
                AdvancedOptions: this.input.advancedOptions,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.Idp
         */
        static IdpResponse = class {
          /**
           * The Metadata of the SAML application in xml format.
           */
          public get metadataContent(): shapes.SAMLMetadata {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'createElasticsearchDomain',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
                outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchVersion: this.input.elasticsearchVersion,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  AccessPolicies: this.input.accessPolicies,
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  EncryptionAtRestOptions: {
                    Enabled: this.input.encryptionAtRestOptions?.enabled,
                    KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                  },
                  NodeToNodeEncryptionOptions: {
                    Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
            return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as shapes.SAMLMetadata;
          }
          /**
           * The unique Entity ID of the application in SAML Identity Provider.
           */
          public get entityId(): shapes.SAMLEntityId {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'createElasticsearchDomain',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
                outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchVersion: this.input.elasticsearchVersion,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  AccessPolicies: this.input.accessPolicies,
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  EncryptionAtRestOptions: {
                    Enabled: this.input.encryptionAtRestOptions?.enabled,
                    KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                  },
                  NodeToNodeEncryptionOptions: {
                    Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
            return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as shapes.SAMLEntityId;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
          }
        }
        public get idp(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.IdpResponse> {
          return new CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.IdpResponse(this.scope, this.resources, this.input);
        }

        /**
         * The key used for matching the SAML Subject attribute.
         */
        public get subjectKey(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'createElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchVersion: this.input.elasticsearchVersion,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                AccessPolicies: this.input.accessPolicies,
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                EncryptionAtRestOptions: {
                  Enabled: this.input.encryptionAtRestOptions?.enabled,
                  KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                },
                NodeToNodeEncryptionOptions: {
                  Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                },
                AdvancedOptions: this.input.advancedOptions,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as shapes.String;
        }
        /**
         * The key used for matching the SAML Roles attribute.
         */
        public get rolesKey(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'createElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchVersion: this.input.elasticsearchVersion,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                AccessPolicies: this.input.accessPolicies,
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                EncryptionAtRestOptions: {
                  Enabled: this.input.encryptionAtRestOptions?.enabled,
                  KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                },
                NodeToNodeEncryptionOptions: {
                  Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                },
                AdvancedOptions: this.input.advancedOptions,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as shapes.String;
        }
        /**
         * The duration, in minutes, after which a user session becomes inactive.
         */
        public get sessionTimeoutMinutes(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'createElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchVersion: this.input.elasticsearchVersion,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                AccessPolicies: this.input.accessPolicies,
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                EncryptionAtRestOptions: {
                  Enabled: this.input.encryptionAtRestOptions?.enabled,
                  KmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
                },
                NodeToNodeEncryptionOptions: {
                  Enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
                },
                AdvancedOptions: this.input.advancedOptions,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
        }
      }
      public get samlOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse> {
        return new CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
      }
    }
    public get advancedSecurityOptions(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse> {
      return new CreateElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
    }
  }
  public get domainStatus(): InstanceType<typeof CreateElasticsearchDomainResponse.DomainStatusResponse> {
    return new CreateElasticsearchDomainResponse.DomainStatusResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateElasticsearchDomainRequest) {
  }
}

/**
 * Response for CreateOutboundCrossClusterSearchConnection.
 */
export class CreateOutboundCrossClusterSearchConnectionResponse {
  /**
   * Response for CreateOutboundCrossClusterSearchConnectionResponse.SourceDomainInfo
   */
  static SourceDomainInfoResponse = class {
    /**
     * Specifies the DomainName.
     */
    public get ownerId(): shapes.OwnerId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
          outputPath: 'SourceDomainInfo.OwnerId',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
      return request.getResponseField('SourceDomainInfo.OwnerId') as unknown as shapes.OwnerId;
    }
    /**
     * Specifies the DomainName.
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName'),
          outputPath: 'SourceDomainInfo.DomainName',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
      return request.getResponseField('SourceDomainInfo.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * Specifies the DomainName.
     */
    public get region(): shapes.Region {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region'),
          outputPath: 'SourceDomainInfo.Region',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region', props);
      return request.getResponseField('SourceDomainInfo.Region') as unknown as shapes.Region;
    }
    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get sourceDomainInfo(): InstanceType<typeof CreateOutboundCrossClusterSearchConnectionResponse.SourceDomainInfoResponse> {
    return new CreateOutboundCrossClusterSearchConnectionResponse.SourceDomainInfoResponse(this.scope, this.resources, this.input);
  }

  /**
   * Response for CreateOutboundCrossClusterSearchConnectionResponse.DestinationDomainInfo
   */
  static DestinationDomainInfoResponse = class {
    /**
     * Specifies the DomainName.
     */
    public get ownerId(): shapes.OwnerId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
          outputPath: 'DestinationDomainInfo.OwnerId',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
      return request.getResponseField('DestinationDomainInfo.OwnerId') as unknown as shapes.OwnerId;
    }
    /**
     * Specifies the DomainName.
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
          outputPath: 'DestinationDomainInfo.DomainName',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
      return request.getResponseField('DestinationDomainInfo.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * Specifies the DomainName.
     */
    public get region(): shapes.Region {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.Region'),
          outputPath: 'DestinationDomainInfo.Region',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.DestinationDomainInfo.Region', props);
      return request.getResponseField('DestinationDomainInfo.Region') as unknown as shapes.Region;
    }
    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get destinationDomainInfo(): InstanceType<typeof CreateOutboundCrossClusterSearchConnectionResponse.DestinationDomainInfoResponse> {
    return new CreateOutboundCrossClusterSearchConnectionResponse.DestinationDomainInfoResponse(this.scope, this.resources, this.input);
  }

  /**
   * Specifies the connection alias provided during the create connection request.
   */
  public get connectionAlias(): shapes.ConnectionAlias {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'ConnectionAlias',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.ConnectionAlias', props);
    return request.getResponseField('ConnectionAlias') as unknown as shapes.ConnectionAlias;
  }
  /**
   * Response for CreateOutboundCrossClusterSearchConnectionResponse.ConnectionStatus
   */
  static ConnectionStatusResponse = class {
    /**
     * The state code for outbound connection. This can be one of the following:  VALIDATING: The outbound connection request is being validated. VALIDATION_FAILED: Validation failed for the connection request. PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by destination domain owner. PROVISIONING: Outbound connection request is in process. ACTIVE: Outbound connection is active and ready to use. REJECTED: Outbound connection request is rejected by destination domain owner. DELETING: Outbound connection deletion is in progress. DELETED: Outbound connection is deleted and cannot be used further.
     */
    public get statusCode(): shapes.OutboundCrossClusterSearchConnectionStatusCode {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode'),
          outputPath: 'ConnectionStatus.StatusCode',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
      return request.getResponseField('ConnectionStatus.StatusCode') as unknown as shapes.OutboundCrossClusterSearchConnectionStatusCode;
    }
    /**
     * Specifies verbose information for the outbound connection status.
     */
    public get message(): shapes.CrossClusterSearchConnectionStatusMessage {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message'),
          outputPath: 'ConnectionStatus.Message',
          parameters: {
            SourceDomainInfo: {
              OwnerId: this.input.sourceDomainInfo.ownerId,
              DomainName: this.input.sourceDomainInfo.domainName,
              Region: this.input.sourceDomainInfo.region,
            },
            DestinationDomainInfo: {
              OwnerId: this.input.destinationDomainInfo.ownerId,
              DomainName: this.input.destinationDomainInfo.domainName,
              Region: this.input.destinationDomainInfo.region,
            },
            ConnectionAlias: this.input.connectionAlias,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message', props);
      return request.getResponseField('ConnectionStatus.Message') as unknown as shapes.CrossClusterSearchConnectionStatusMessage;
    }
    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get connectionStatus(): InstanceType<typeof CreateOutboundCrossClusterSearchConnectionResponse.ConnectionStatusResponse> {
    return new CreateOutboundCrossClusterSearchConnectionResponse.ConnectionStatusResponse(this.scope, this.resources, this.input);
  }

  /**
   * Unique id for the created outbound connection, which is used for subsequent operations on connection.
   */
  public get crossClusterSearchConnectionId(): shapes.CrossClusterSearchConnectionId {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('CreateOutboundCrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnectionId',
        parameters: {
          SourceDomainInfo: {
            OwnerId: this.input.sourceDomainInfo.ownerId,
            DomainName: this.input.sourceDomainInfo.domainName,
            Region: this.input.sourceDomainInfo.region,
          },
          DestinationDomainInfo: {
            OwnerId: this.input.destinationDomainInfo.ownerId,
            DomainName: this.input.destinationDomainInfo.domainName,
            Region: this.input.destinationDomainInfo.region,
          },
          ConnectionAlias: this.input.connectionAlias,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'CreateOutboundCrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return request.getResponseField('CrossClusterSearchConnectionId') as unknown as shapes.CrossClusterSearchConnectionId;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
  }
}

/**
 * Response for CreatePackage.
 */
export class CreatePackageResponse {
  /**
   * Response for CreatePackageResponse.PackageDetails
   */
  static PackageDetailsResponse = class {
    /**
     * Internal ID of the package.
     */
    public get packageId(): shapes.PackageID {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.PackageID'),
          outputPath: 'PackageDetails.PackageID',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.PackageID', props);
      return request.getResponseField('PackageDetails.PackageID') as unknown as shapes.PackageID;
    }
    /**
     * User specified name of the package.
     */
    public get packageName(): shapes.PackageName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.PackageName'),
          outputPath: 'PackageDetails.PackageName',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.PackageName', props);
      return request.getResponseField('PackageDetails.PackageName') as unknown as shapes.PackageName;
    }
    /**
     * Currently supports only TXT-DICTIONARY.
     */
    public get packageType(): shapes.PackageType {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.PackageType'),
          outputPath: 'PackageDetails.PackageType',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.PackageType', props);
      return request.getResponseField('PackageDetails.PackageType') as unknown as shapes.PackageType;
    }
    /**
     * User-specified description of the package.
     */
    public get packageDescription(): shapes.PackageDescription {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.PackageDescription'),
          outputPath: 'PackageDetails.PackageDescription',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.PackageDescription', props);
      return request.getResponseField('PackageDetails.PackageDescription') as unknown as shapes.PackageDescription;
    }
    /**
     * Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
     */
    public get packageStatus(): shapes.PackageStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.PackageStatus'),
          outputPath: 'PackageDetails.PackageStatus',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.PackageStatus', props);
      return request.getResponseField('PackageDetails.PackageStatus') as unknown as shapes.PackageStatus;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get createdAt(): shapes.CreatedAt {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.CreatedAt'),
          outputPath: 'PackageDetails.CreatedAt',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.CreatedAt', props);
      return request.getResponseField('PackageDetails.CreatedAt') as unknown as shapes.CreatedAt;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get lastUpdatedAt(): shapes.LastUpdated {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.LastUpdatedAt'),
          outputPath: 'PackageDetails.LastUpdatedAt',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.LastUpdatedAt', props);
      return request.getResponseField('PackageDetails.LastUpdatedAt') as unknown as shapes.LastUpdated;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get availablePackageVersion(): shapes.PackageVersion {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'createPackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.AvailablePackageVersion'),
          outputPath: 'PackageDetails.AvailablePackageVersion',
          parameters: {
            PackageName: this.input.packageName,
            PackageType: this.input.packageType,
            PackageDescription: this.input.packageDescription,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.AvailablePackageVersion', props);
      return request.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as shapes.PackageVersion;
    }
    /**
     * Response for CreatePackageResponse.PackageDetailsResponse.ErrorDetails
     */
    static ErrorDetailsResponse = class {
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorType(): shapes.ErrorType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createPackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.ErrorDetails.ErrorType'),
            outputPath: 'PackageDetails.ErrorDetails.ErrorType',
            parameters: {
              PackageName: this.input.packageName,
              PackageType: this.input.packageType,
              PackageDescription: this.input.packageDescription,
              PackageSource: {
                S3BucketName: this.input.packageSource.s3BucketName,
                S3Key: this.input.packageSource.s3Key,
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.ErrorDetails.ErrorType', props);
        return request.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as shapes.ErrorType;
      }
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorMessage(): shapes.ErrorMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'createPackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('CreatePackage.PackageDetails.ErrorDetails.ErrorMessage'),
            outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
            parameters: {
              PackageName: this.input.packageName,
              PackageType: this.input.packageType,
              PackageDescription: this.input.packageDescription,
              PackageSource: {
                S3BucketName: this.input.packageSource.s3BucketName,
                S3Key: this.input.packageSource.s3Key,
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'CreatePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
        return request.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as shapes.ErrorMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreatePackageRequest) {
      }
    }
    public get errorDetails(): InstanceType<typeof CreatePackageResponse.PackageDetailsResponse.ErrorDetailsResponse> {
      return new CreatePackageResponse.PackageDetailsResponse.ErrorDetailsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreatePackageRequest) {
    }
  }
  public get packageDetails(): InstanceType<typeof CreatePackageResponse.PackageDetailsResponse> {
    return new CreatePackageResponse.PackageDetailsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.CreatePackageRequest) {
  }
}

/**
 * Response for DeleteElasticsearchDomain.
 */
export class DeleteElasticsearchDomainResponse {
  /**
   * Response for DeleteElasticsearchDomainResponse.DomainStatus
   */
  static DomainStatusResponse = class {
    /**
     * The unique identifier for the specified Elasticsearch domain.
     */
    public get domainId(): shapes.DomainId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainId'),
          outputPath: 'DomainStatus.DomainId',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainId', props);
      return request.getResponseField('DomainStatus.DomainId') as unknown as shapes.DomainId;
    }
    /**
     * The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainName'),
          outputPath: 'DomainStatus.DomainName',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainName', props);
      return request.getResponseField('DomainStatus.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
     */
    public get arn(): shapes.ARN {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ARN'),
          outputPath: 'DomainStatus.ARN',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ARN', props);
      return request.getResponseField('DomainStatus.ARN') as unknown as shapes.ARN;
    }
    /**
     * The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
     */
    public get created(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.Created'),
          outputPath: 'DomainStatus.Created',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.Created', props);
      return request.getResponseField('DomainStatus.Created') as unknown as shapes.Boolean;
    }
    /**
     * The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
     */
    public get deleted(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.Deleted'),
          outputPath: 'DomainStatus.Deleted',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.Deleted', props);
      return request.getResponseField('DomainStatus.Deleted') as unknown as shapes.Boolean;
    }
    /**
     * The Elasticsearch domain endpoint that you use to submit index and search requests.
     */
    public get endpoint(): shapes.ServiceUrl {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.Endpoint'),
          outputPath: 'DomainStatus.Endpoint',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.Endpoint', props);
      return request.getResponseField('DomainStatus.Endpoint') as unknown as shapes.ServiceUrl;
    }
    /**
     * Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
     */
    public get endpoints(): shapes.EndpointsMap {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.Endpoints'),
          outputPath: 'DomainStatus.Endpoints',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.Endpoints', props);
      return request.getResponseField('DomainStatus.Endpoints') as unknown as shapes.EndpointsMap;
    }
    /**
     * The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
     */
    public get processing(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.Processing'),
          outputPath: 'DomainStatus.Processing',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.Processing', props);
      return request.getResponseField('DomainStatus.Processing') as unknown as shapes.Boolean;
    }
    /**
     * The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
     */
    public get upgradeProcessing(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing'),
          outputPath: 'DomainStatus.UpgradeProcessing',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
      return request.getResponseField('DomainStatus.UpgradeProcessing') as unknown as shapes.Boolean;
    }
    /**
     * The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
     */
    public get elasticsearchVersion(): shapes.ElasticsearchVersionString {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
          outputPath: 'DomainStatus.ElasticsearchVersion',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
      return request.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as shapes.ElasticsearchVersionString;
    }
    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfig
     */
    static ElasticsearchClusterConfigResponse = class {
      /**
       * The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
       */
      public get instanceType(): shapes.ESPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as shapes.ESPartitionInstanceType;
      }
      /**
       * The number of instances in the specified domain cluster.
       */
      public get instanceCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as shapes.IntegerClass;
      }
      /**
       * A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
       */
      public get dedicatedMasterEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as shapes.Boolean;
      }
      /**
       * A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
       */
      public get zoneAwarenessEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfig
       */
      static ZoneAwarenessConfigResponse = class {
        /**
         * An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
         */
        public get availabilityZoneCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'deleteElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
              outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
          return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
        }
      }
      public get zoneAwarenessConfig(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfigResponse> {
        return new DeleteElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfigResponse(this.scope, this.resources, this.input);
      }

      /**
       * The instance type for a dedicated master node.
       */
      public get dedicatedMasterType(): shapes.ESPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as shapes.ESPartitionInstanceType;
      }
      /**
       * Total number of dedicated master nodes, active and on standby, for the cluster.
       */
      public get dedicatedMasterCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as shapes.IntegerClass;
      }
      /**
       * True to enable warm storage.
       */
      public get warmEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as shapes.Boolean;
      }
      /**
       * The instance type for the Elasticsearch cluster's warm nodes.
       */
      public get warmType(): shapes.ESWarmPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as shapes.ESWarmPartitionInstanceType;
      }
      /**
       * The number of warm nodes in the cluster.
       */
      public get warmCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get elasticsearchClusterConfig(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.EBSOptions
     */
    static EBSOptionsResponse = class {
      /**
       * Specifies whether EBS-based storage is enabled.
       */
      public get ebsEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
            outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
        return request.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the volume type for EBS-based storage.
       */
      public get volumeType(): shapes.VolumeType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
            outputPath: 'DomainStatus.EBSOptions.VolumeType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
        return request.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as shapes.VolumeType;
      }
      /**
       * Integer to specify the size of an EBS volume.
       */
      public get volumeSize(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
            outputPath: 'DomainStatus.EBSOptions.VolumeSize',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
        return request.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as shapes.IntegerClass;
      }
      /**
       * Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
       */
      public get iops(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
            outputPath: 'DomainStatus.EBSOptions.Iops',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
        return request.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get ebsOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.EBSOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.EBSOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * IAM access policy as a JSON-formatted string.
     */
    public get accessPolicies(): shapes.PolicyDocument {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AccessPolicies'),
          outputPath: 'DomainStatus.AccessPolicies',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AccessPolicies', props);
      return request.getResponseField('DomainStatus.AccessPolicies') as unknown as shapes.PolicyDocument;
    }
    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptions
     */
    static SnapshotOptionsResponse = class {
      /**
       * Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
       */
      public get automatedSnapshotStartHour(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
            outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
        return request.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get snapshotOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.VPCOptions
     */
    static VPCOptionsResponse = class {
      /**
       * The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
       */
      public get vpcId(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
            outputPath: 'DomainStatus.VPCOptions.VPCId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
        return request.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as shapes.String;
      }
      /**
       * Specifies the subnets for VPC endpoint.
       */
      public get subnetIds(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
            outputPath: 'DomainStatus.VPCOptions.SubnetIds',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
        return request.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as shapes.StringList;
      }
      /**
       * The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
       */
      public get availabilityZones(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
            outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
        return request.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as shapes.StringList;
      }
      /**
       * Specifies the security groups for VPC endpoint.
       */
      public get securityGroupIds(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
            outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
        return request.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as shapes.StringList;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get vpcOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.VPCOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.VPCOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.CognitoOptions
     */
    static CognitoOptionsResponse = class {
      /**
       * Specifies the option to enable Cognito for Kibana authentication.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
            outputPath: 'DomainStatus.CognitoOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
        return request.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the Cognito user pool ID for Kibana authentication.
       */
      public get userPoolId(): shapes.UserPoolId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
            outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
        return request.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as shapes.UserPoolId;
      }
      /**
       * Specifies the Cognito identity pool ID for Kibana authentication.
       */
      public get identityPoolId(): shapes.IdentityPoolId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
            outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
        return request.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as shapes.IdentityPoolId;
      }
      /**
       * Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
       */
      public get roleArn(): shapes.RoleArn {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
            outputPath: 'DomainStatus.CognitoOptions.RoleArn',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
        return request.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as shapes.RoleArn;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get cognitoOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.CognitoOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.CognitoOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptions
     */
    static EncryptionAtRestOptionsResponse = class {
      /**
       * Specifies the option to enable Encryption At Rest.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
            outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
        return request.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the KMS Key ID for Encryption At Rest options.
       */
      public get kmsKeyId(): shapes.KmsKeyId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
            outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
        return request.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as shapes.KmsKeyId;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get encryptionAtRestOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptions
     */
    static NodeToNodeEncryptionOptionsResponse = class {
      /**
       * Specify true to enable node-to-node encryption.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
            outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
        return request.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as shapes.Boolean;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get nodeToNodeEncryptionOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the status of the AdvancedOptions
     */
    public get advancedOptions(): shapes.AdvancedOptions {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedOptions'),
          outputPath: 'DomainStatus.AdvancedOptions',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedOptions', props);
      return request.getResponseField('DomainStatus.AdvancedOptions') as unknown as shapes.AdvancedOptions;
    }
    /**
     * Log publishing options for the given domain.
     */
    public get logPublishingOptions(): shapes.LogPublishingOptions {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions'),
          outputPath: 'DomainStatus.LogPublishingOptions',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
      return request.getResponseField('DomainStatus.LogPublishingOptions') as unknown as shapes.LogPublishingOptions;
    }
    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptions
     */
    static ServiceSoftwareOptionsResponse = class {
      /**
       * The current service software version that is present on the domain.
       */
      public get currentVersion(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as shapes.String;
      }
      /**
       * The new service software version if one is available.
       */
      public get newVersion(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as shapes.String;
      }
      /**
       * True if you are able to update you service software version. False if you are not able to update your service software version.
       */
      public get updateAvailable(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as shapes.Boolean;
      }
      /**
       * True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
       */
      public get cancellable(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as shapes.Boolean;
      }
      /**
       * The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
       */
      public get updateStatus(): shapes.DeploymentStatus {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as shapes.DeploymentStatus;
      }
      /**
       * The description of the UpdateStatus.
       */
      public get description(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as shapes.String;
      }
      /**
       * Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
       */
      public get automatedUpdateDate(): shapes.DeploymentCloseDateTimeStamp {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as shapes.DeploymentCloseDateTimeStamp;
      }
      /**
       * True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
       */
      public get optionalDeployment(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as shapes.Boolean;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get serviceSoftwareOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptions
     */
    static DomainEndpointOptionsResponse = class {
      /**
       * Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
       */
      public get enforceHttps(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
            outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as shapes.Boolean;
      }
      /**
       * Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.  It can be one of the following values:  Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher. Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2
       */
      public get tlsSecurityPolicy(): shapes.TLSSecurityPolicy {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
            outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as shapes.TLSSecurityPolicy;
      }
      /**
       * Specify if custom endpoint should be enabled for the Elasticsearch domain.
       */
      public get customEndpointEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Specify the fully qualified domain for your custom endpoint.
       */
      public get customEndpoint(): shapes.DomainNameFqdn {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as shapes.DomainNameFqdn;
      }
      /**
       * Specify ACM certificate ARN for your custom endpoint.
       */
      public get customEndpointCertificateArn(): shapes.ARN {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as shapes.ARN;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get domainEndpointOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptions
     */
    static AdvancedSecurityOptionsResponse = class {
      /**
       * True if advanced security is enabled.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
            outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
        return request.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * True if the internal user database is enabled.
       */
      public get internalUserDatabaseEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
            outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
        return request.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptions
       */
      static SAMLOptionsResponse = class {
        /**
         * True if SAML is enabled.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'deleteElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.Idp
         */
        static IdpResponse = class {
          /**
           * The Metadata of the SAML application in xml format.
           */
          public get metadataContent(): shapes.SAMLMetadata {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'deleteElasticsearchDomain',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
                outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
            return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as shapes.SAMLMetadata;
          }
          /**
           * The unique Entity ID of the application in SAML Identity Provider.
           */
          public get entityId(): shapes.SAMLEntityId {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'deleteElasticsearchDomain',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
                outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
            return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as shapes.SAMLEntityId;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
          }
        }
        public get idp(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.IdpResponse> {
          return new DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.IdpResponse(this.scope, this.resources, this.input);
        }

        /**
         * The key used for matching the SAML Subject attribute.
         */
        public get subjectKey(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'deleteElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as shapes.String;
        }
        /**
         * The key used for matching the SAML Roles attribute.
         */
        public get rolesKey(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'deleteElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as shapes.String;
        }
        /**
         * The duration, in minutes, after which a user session becomes inactive.
         */
        public get sessionTimeoutMinutes(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'deleteElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
        }
      }
      public get samlOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse> {
        return new DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
      }
    }
    public get advancedSecurityOptions(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse> {
      return new DeleteElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
    }
  }
  public get domainStatus(): InstanceType<typeof DeleteElasticsearchDomainResponse.DomainStatusResponse> {
    return new DeleteElasticsearchDomainResponse.DomainStatusResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteElasticsearchDomainRequest) {
  }
}

/**
 * Response for DeleteInboundCrossClusterSearchConnection.
 */
export class DeleteInboundCrossClusterSearchConnectionResponse {
  /**
   * Response for DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnection
   */
  static CrossClusterSearchConnectionResponse = class {
    /**
     * Response for DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfo
     */
    static SourceDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get sourceDomainInfo(): InstanceType<typeof DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse> {
      return new DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfo
     */
    static DestinationDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get destinationDomainInfo(): InstanceType<typeof DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse> {
      return new DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the connection id for the inbound cross-cluster search connection.
     */
    public get crossClusterSearchConnectionId(): shapes.CrossClusterSearchConnectionId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteInboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
          outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
          parameters: {
            CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
      return request.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as shapes.CrossClusterSearchConnectionId;
    }
    /**
     * Response for DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatus
     */
    static ConnectionStatusResponse = class {
      /**
       * The state code for inbound connection. This can be one of the following:  PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner. APPROVED: Inbound connection is pending acceptance by destination domain owner. REJECTING: Inbound connection rejection is in process. REJECTED: Inbound connection is rejected. DELETING: Inbound connection deletion is in progress. DELETED: Inbound connection is deleted and cannot be used further.
       */
      public get statusCode(): shapes.InboundCrossClusterSearchConnectionStatusCode {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as shapes.InboundCrossClusterSearchConnectionStatusCode;
      }
      /**
       * Specifies verbose information for the inbound connection status.
       */
      public get message(): shapes.CrossClusterSearchConnectionStatusMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as shapes.CrossClusterSearchConnectionStatusMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get connectionStatus(): InstanceType<typeof DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse> {
      return new DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get crossClusterSearchConnection(): InstanceType<typeof DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse> {
    return new DeleteInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
  }
}

/**
 * Response for DeleteOutboundCrossClusterSearchConnection.
 */
export class DeleteOutboundCrossClusterSearchConnectionResponse {
  /**
   * Response for DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnection
   */
  static CrossClusterSearchConnectionResponse = class {
    /**
     * Response for DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfo
     */
    static SourceDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get sourceDomainInfo(): InstanceType<typeof DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse> {
      return new DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfo
     */
    static DestinationDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get destinationDomainInfo(): InstanceType<typeof DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse> {
      return new DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the connection id for the outbound cross-cluster search connection.
     */
    public get crossClusterSearchConnectionId(): shapes.CrossClusterSearchConnectionId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
          outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
          parameters: {
            CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
      return request.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as shapes.CrossClusterSearchConnectionId;
    }
    /**
     * Specifies the connection alias for the outbound cross-cluster search connection.
     */
    public get connectionAlias(): shapes.ConnectionAlias {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deleteOutboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias'),
          outputPath: 'CrossClusterSearchConnection.ConnectionAlias',
          parameters: {
            CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias', props);
      return request.getResponseField('CrossClusterSearchConnection.ConnectionAlias') as unknown as shapes.ConnectionAlias;
    }
    /**
     * Response for DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatus
     */
    static ConnectionStatusResponse = class {
      /**
       * The state code for outbound connection. This can be one of the following:  VALIDATING: The outbound connection request is being validated. VALIDATION_FAILED: Validation failed for the connection request. PENDING_ACCEPTANCE: Outbound connection request is validated and is not yet accepted by destination domain owner. PROVISIONING: Outbound connection request is in process. ACTIVE: Outbound connection is active and ready to use. REJECTED: Outbound connection request is rejected by destination domain owner. DELETING: Outbound connection deletion is in progress. DELETED: Outbound connection is deleted and cannot be used further.
       */
      public get statusCode(): shapes.OutboundCrossClusterSearchConnectionStatusCode {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as shapes.OutboundCrossClusterSearchConnectionStatusCode;
      }
      /**
       * Specifies verbose information for the outbound connection status.
       */
      public get message(): shapes.CrossClusterSearchConnectionStatusMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deleteOutboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as shapes.CrossClusterSearchConnectionStatusMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get connectionStatus(): InstanceType<typeof DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse> {
      return new DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get crossClusterSearchConnection(): InstanceType<typeof DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse> {
    return new DeleteOutboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
  }
}

/**
 * Response for DeletePackage.
 */
export class DeletePackageResponse {
  /**
   * Response for DeletePackageResponse.PackageDetails
   */
  static PackageDetailsResponse = class {
    /**
     * Internal ID of the package.
     */
    public get packageId(): shapes.PackageID {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.PackageID'),
          outputPath: 'PackageDetails.PackageID',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.PackageID', props);
      return request.getResponseField('PackageDetails.PackageID') as unknown as shapes.PackageID;
    }
    /**
     * User specified name of the package.
     */
    public get packageName(): shapes.PackageName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.PackageName'),
          outputPath: 'PackageDetails.PackageName',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.PackageName', props);
      return request.getResponseField('PackageDetails.PackageName') as unknown as shapes.PackageName;
    }
    /**
     * Currently supports only TXT-DICTIONARY.
     */
    public get packageType(): shapes.PackageType {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.PackageType'),
          outputPath: 'PackageDetails.PackageType',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.PackageType', props);
      return request.getResponseField('PackageDetails.PackageType') as unknown as shapes.PackageType;
    }
    /**
     * User-specified description of the package.
     */
    public get packageDescription(): shapes.PackageDescription {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.PackageDescription'),
          outputPath: 'PackageDetails.PackageDescription',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.PackageDescription', props);
      return request.getResponseField('PackageDetails.PackageDescription') as unknown as shapes.PackageDescription;
    }
    /**
     * Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
     */
    public get packageStatus(): shapes.PackageStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.PackageStatus'),
          outputPath: 'PackageDetails.PackageStatus',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.PackageStatus', props);
      return request.getResponseField('PackageDetails.PackageStatus') as unknown as shapes.PackageStatus;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get createdAt(): shapes.CreatedAt {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.CreatedAt'),
          outputPath: 'PackageDetails.CreatedAt',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.CreatedAt', props);
      return request.getResponseField('PackageDetails.CreatedAt') as unknown as shapes.CreatedAt;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get lastUpdatedAt(): shapes.LastUpdated {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.LastUpdatedAt'),
          outputPath: 'PackageDetails.LastUpdatedAt',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.LastUpdatedAt', props);
      return request.getResponseField('PackageDetails.LastUpdatedAt') as unknown as shapes.LastUpdated;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get availablePackageVersion(): shapes.PackageVersion {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'deletePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.AvailablePackageVersion'),
          outputPath: 'PackageDetails.AvailablePackageVersion',
          parameters: {
            PackageID: this.input.packageId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.AvailablePackageVersion', props);
      return request.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as shapes.PackageVersion;
    }
    /**
     * Response for DeletePackageResponse.PackageDetailsResponse.ErrorDetails
     */
    static ErrorDetailsResponse = class {
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorType(): shapes.ErrorType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deletePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.ErrorDetails.ErrorType'),
            outputPath: 'PackageDetails.ErrorDetails.ErrorType',
            parameters: {
              PackageID: this.input.packageId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.ErrorDetails.ErrorType', props);
        return request.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as shapes.ErrorType;
      }
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorMessage(): shapes.ErrorMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'deletePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DeletePackage.PackageDetails.ErrorDetails.ErrorMessage'),
            outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
            parameters: {
              PackageID: this.input.packageId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DeletePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
        return request.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as shapes.ErrorMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeletePackageRequest) {
      }
    }
    public get errorDetails(): InstanceType<typeof DeletePackageResponse.PackageDetailsResponse.ErrorDetailsResponse> {
      return new DeletePackageResponse.PackageDetailsResponse.ErrorDetailsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeletePackageRequest) {
    }
  }
  public get packageDetails(): InstanceType<typeof DeletePackageResponse.PackageDetailsResponse> {
    return new DeletePackageResponse.PackageDetailsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DeletePackageRequest) {
  }
}

/**
 * Response for DescribeElasticsearchDomain.
 */
export class DescribeElasticsearchDomainResponse {
  /**
   * Response for DescribeElasticsearchDomainResponse.DomainStatus
   */
  static DomainStatusResponse = class {
    /**
     * The unique identifier for the specified Elasticsearch domain.
     */
    public get domainId(): shapes.DomainId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainId'),
          outputPath: 'DomainStatus.DomainId',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainId', props);
      return request.getResponseField('DomainStatus.DomainId') as unknown as shapes.DomainId;
    }
    /**
     * The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainName'),
          outputPath: 'DomainStatus.DomainName',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainName', props);
      return request.getResponseField('DomainStatus.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
     */
    public get arn(): shapes.ARN {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ARN'),
          outputPath: 'DomainStatus.ARN',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ARN', props);
      return request.getResponseField('DomainStatus.ARN') as unknown as shapes.ARN;
    }
    /**
     * The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
     */
    public get created(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.Created'),
          outputPath: 'DomainStatus.Created',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.Created', props);
      return request.getResponseField('DomainStatus.Created') as unknown as shapes.Boolean;
    }
    /**
     * The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
     */
    public get deleted(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.Deleted'),
          outputPath: 'DomainStatus.Deleted',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.Deleted', props);
      return request.getResponseField('DomainStatus.Deleted') as unknown as shapes.Boolean;
    }
    /**
     * The Elasticsearch domain endpoint that you use to submit index and search requests.
     */
    public get endpoint(): shapes.ServiceUrl {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.Endpoint'),
          outputPath: 'DomainStatus.Endpoint',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.Endpoint', props);
      return request.getResponseField('DomainStatus.Endpoint') as unknown as shapes.ServiceUrl;
    }
    /**
     * Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
     */
    public get endpoints(): shapes.EndpointsMap {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.Endpoints'),
          outputPath: 'DomainStatus.Endpoints',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.Endpoints', props);
      return request.getResponseField('DomainStatus.Endpoints') as unknown as shapes.EndpointsMap;
    }
    /**
     * The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
     */
    public get processing(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.Processing'),
          outputPath: 'DomainStatus.Processing',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.Processing', props);
      return request.getResponseField('DomainStatus.Processing') as unknown as shapes.Boolean;
    }
    /**
     * The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
     */
    public get upgradeProcessing(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing'),
          outputPath: 'DomainStatus.UpgradeProcessing',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
      return request.getResponseField('DomainStatus.UpgradeProcessing') as unknown as shapes.Boolean;
    }
    /**
     * The status of an Elasticsearch domain version upgrade. True if Amazon Elasticsearch Service is undergoing a version upgrade. False if the configuration is active.
     */
    public get elasticsearchVersion(): shapes.ElasticsearchVersionString {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
          outputPath: 'DomainStatus.ElasticsearchVersion',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
      return request.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as shapes.ElasticsearchVersionString;
    }
    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfig
     */
    static ElasticsearchClusterConfigResponse = class {
      /**
       * The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
       */
      public get instanceType(): shapes.ESPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceType') as unknown as shapes.ESPartitionInstanceType;
      }
      /**
       * The number of instances in the specified domain cluster.
       */
      public get instanceCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.InstanceCount',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.InstanceCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.InstanceCount') as unknown as shapes.IntegerClass;
      }
      /**
       * A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
       */
      public get dedicatedMasterEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as shapes.Boolean;
      }
      /**
       * A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
       */
      public get zoneAwarenessEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfig
       */
      static ZoneAwarenessConfigResponse = class {
        /**
         * An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
         */
        public get availabilityZoneCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
              outputPath: 'DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
          return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
        }
      }
      public get zoneAwarenessConfig(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfigResponse> {
        return new DescribeElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse.ZoneAwarenessConfigResponse(this.scope, this.resources, this.input);
      }

      /**
       * The instance type for a dedicated master node.
       */
      public get dedicatedMasterType(): shapes.ESPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as shapes.ESPartitionInstanceType;
      }
      /**
       * Total number of dedicated master nodes, active and on standby, for the cluster.
       */
      public get dedicatedMasterCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as shapes.IntegerClass;
      }
      /**
       * True to enable warm storage.
       */
      public get warmEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmEnabled', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmEnabled') as unknown as shapes.Boolean;
      }
      /**
       * The instance type for the Elasticsearch cluster's warm nodes.
       */
      public get warmType(): shapes.ESWarmPartitionInstanceType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmType', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmType') as unknown as shapes.ESWarmPartitionInstanceType;
      }
      /**
       * The number of warm nodes in the cluster.
       */
      public get warmCount(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount'),
            outputPath: 'DomainStatus.ElasticsearchClusterConfig.WarmCount',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.WarmCount', props);
        return request.getResponseField('DomainStatus.ElasticsearchClusterConfig.WarmCount') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get elasticsearchClusterConfig(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.ElasticsearchClusterConfigResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.EBSOptions
     */
    static EBSOptionsResponse = class {
      /**
       * Specifies whether EBS-based storage is enabled.
       */
      public get ebsEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled'),
            outputPath: 'DomainStatus.EBSOptions.EBSEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSEnabled', props);
        return request.getResponseField('DomainStatus.EBSOptions.EBSEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the volume type for EBS-based storage.
       */
      public get volumeType(): shapes.VolumeType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeType'),
            outputPath: 'DomainStatus.EBSOptions.VolumeType',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeType', props);
        return request.getResponseField('DomainStatus.EBSOptions.VolumeType') as unknown as shapes.VolumeType;
      }
      /**
       * Integer to specify the size of an EBS volume.
       */
      public get volumeSize(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize'),
            outputPath: 'DomainStatus.EBSOptions.VolumeSize',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.VolumeSize', props);
        return request.getResponseField('DomainStatus.EBSOptions.VolumeSize') as unknown as shapes.IntegerClass;
      }
      /**
       * Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
       */
      public get iops(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.EBSOptions.Iops'),
            outputPath: 'DomainStatus.EBSOptions.Iops',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.Iops', props);
        return request.getResponseField('DomainStatus.EBSOptions.Iops') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get ebsOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.EBSOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.EBSOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * IAM access policy as a JSON-formatted string.
     */
    public get accessPolicies(): shapes.PolicyDocument {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AccessPolicies'),
          outputPath: 'DomainStatus.AccessPolicies',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AccessPolicies', props);
      return request.getResponseField('DomainStatus.AccessPolicies') as unknown as shapes.PolicyDocument;
    }
    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptions
     */
    static SnapshotOptionsResponse = class {
      /**
       * Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
       */
      public get automatedSnapshotStartHour(): shapes.IntegerClass {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour'),
            outputPath: 'DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour', props);
        return request.getResponseField('DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as shapes.IntegerClass;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get snapshotOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.SnapshotOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.VPCOptions
     */
    static VPCOptionsResponse = class {
      /**
       * The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
       */
      public get vpcId(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCId'),
            outputPath: 'DomainStatus.VPCOptions.VPCId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCId', props);
        return request.getResponseField('DomainStatus.VPCOptions.VPCId') as unknown as shapes.String;
      }
      /**
       * Specifies the subnets for VPC endpoint.
       */
      public get subnetIds(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds'),
            outputPath: 'DomainStatus.VPCOptions.SubnetIds',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.SubnetIds', props);
        return request.getResponseField('DomainStatus.VPCOptions.SubnetIds') as unknown as shapes.StringList;
      }
      /**
       * The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
       */
      public get availabilityZones(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones'),
            outputPath: 'DomainStatus.VPCOptions.AvailabilityZones',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.AvailabilityZones', props);
        return request.getResponseField('DomainStatus.VPCOptions.AvailabilityZones') as unknown as shapes.StringList;
      }
      /**
       * Specifies the security groups for VPC endpoint.
       */
      public get securityGroupIds(): shapes.StringList {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds'),
            outputPath: 'DomainStatus.VPCOptions.SecurityGroupIds',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.SecurityGroupIds', props);
        return request.getResponseField('DomainStatus.VPCOptions.SecurityGroupIds') as unknown as shapes.StringList;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get vpcOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.VPCOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.VPCOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.CognitoOptions
     */
    static CognitoOptionsResponse = class {
      /**
       * Specifies the option to enable Cognito for Kibana authentication.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.CognitoOptions.Enabled'),
            outputPath: 'DomainStatus.CognitoOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.Enabled', props);
        return request.getResponseField('DomainStatus.CognitoOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the Cognito user pool ID for Kibana authentication.
       */
      public get userPoolId(): shapes.UserPoolId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId'),
            outputPath: 'DomainStatus.CognitoOptions.UserPoolId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.UserPoolId', props);
        return request.getResponseField('DomainStatus.CognitoOptions.UserPoolId') as unknown as shapes.UserPoolId;
      }
      /**
       * Specifies the Cognito identity pool ID for Kibana authentication.
       */
      public get identityPoolId(): shapes.IdentityPoolId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId'),
            outputPath: 'DomainStatus.CognitoOptions.IdentityPoolId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.IdentityPoolId', props);
        return request.getResponseField('DomainStatus.CognitoOptions.IdentityPoolId') as unknown as shapes.IdentityPoolId;
      }
      /**
       * Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
       */
      public get roleArn(): shapes.RoleArn {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn'),
            outputPath: 'DomainStatus.CognitoOptions.RoleArn',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.RoleArn', props);
        return request.getResponseField('DomainStatus.CognitoOptions.RoleArn') as unknown as shapes.RoleArn;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get cognitoOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.CognitoOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.CognitoOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptions
     */
    static EncryptionAtRestOptionsResponse = class {
      /**
       * Specifies the option to enable Encryption At Rest.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled'),
            outputPath: 'DomainStatus.EncryptionAtRestOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.Enabled', props);
        return request.getResponseField('DomainStatus.EncryptionAtRestOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * Specifies the KMS Key ID for Encryption At Rest options.
       */
      public get kmsKeyId(): shapes.KmsKeyId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId'),
            outputPath: 'DomainStatus.EncryptionAtRestOptions.KmsKeyId',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.KmsKeyId', props);
        return request.getResponseField('DomainStatus.EncryptionAtRestOptions.KmsKeyId') as unknown as shapes.KmsKeyId;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get encryptionAtRestOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.EncryptionAtRestOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptions
     */
    static NodeToNodeEncryptionOptionsResponse = class {
      /**
       * Specify true to enable node-to-node encryption.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled'),
            outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.Enabled', props);
        return request.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.Enabled') as unknown as shapes.Boolean;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get nodeToNodeEncryptionOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.NodeToNodeEncryptionOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the status of the AdvancedOptions
     */
    public get advancedOptions(): shapes.AdvancedOptions {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedOptions'),
          outputPath: 'DomainStatus.AdvancedOptions',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedOptions', props);
      return request.getResponseField('DomainStatus.AdvancedOptions') as unknown as shapes.AdvancedOptions;
    }
    /**
     * Log publishing options for the given domain.
     */
    public get logPublishingOptions(): shapes.LogPublishingOptions {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'describeElasticsearchDomain',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions'),
          outputPath: 'DomainStatus.LogPublishingOptions',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
      return request.getResponseField('DomainStatus.LogPublishingOptions') as unknown as shapes.LogPublishingOptions;
    }
    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptions
     */
    static ServiceSoftwareOptionsResponse = class {
      /**
       * The current service software version that is present on the domain.
       */
      public get currentVersion(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.CurrentVersion',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.CurrentVersion', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.CurrentVersion') as unknown as shapes.String;
      }
      /**
       * The new service software version if one is available.
       */
      public get newVersion(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.NewVersion',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.NewVersion', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.NewVersion') as unknown as shapes.String;
      }
      /**
       * True if you are able to update you service software version. False if you are not able to update your service software version.
       */
      public get updateAvailable(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateAvailable',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateAvailable', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateAvailable') as unknown as shapes.Boolean;
      }
      /**
       * True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
       */
      public get cancellable(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.Cancellable',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Cancellable', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.Cancellable') as unknown as shapes.Boolean;
      }
      /**
       * The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
       */
      public get updateStatus(): shapes.DeploymentStatus {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.UpdateStatus',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.UpdateStatus', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.UpdateStatus') as unknown as shapes.DeploymentStatus;
      }
      /**
       * The description of the UpdateStatus.
       */
      public get description(): shapes.String {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.Description',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.Description', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.Description') as unknown as shapes.String;
      }
      /**
       * Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
       */
      public get automatedUpdateDate(): shapes.DeploymentCloseDateTimeStamp {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as shapes.DeploymentCloseDateTimeStamp;
      }
      /**
       * True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
       */
      public get optionalDeployment(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment'),
            outputPath: 'DomainStatus.ServiceSoftwareOptions.OptionalDeployment',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.OptionalDeployment', props);
        return request.getResponseField('DomainStatus.ServiceSoftwareOptions.OptionalDeployment') as unknown as shapes.Boolean;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get serviceSoftwareOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.ServiceSoftwareOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptions
     */
    static DomainEndpointOptionsResponse = class {
      /**
       * Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
       */
      public get enforceHttps(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS'),
            outputPath: 'DomainStatus.DomainEndpointOptions.EnforceHTTPS',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.EnforceHTTPS', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.EnforceHTTPS') as unknown as shapes.Boolean;
      }
      /**
       * Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.  It can be one of the following values:  Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher. Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2
       */
      public get tlsSecurityPolicy(): shapes.TLSSecurityPolicy {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy'),
            outputPath: 'DomainStatus.DomainEndpointOptions.TLSSecurityPolicy',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.TLSSecurityPolicy') as unknown as shapes.TLSSecurityPolicy;
      }
      /**
       * Specify if custom endpoint should be enabled for the Elasticsearch domain.
       */
      public get customEndpointEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Specify the fully qualified domain for your custom endpoint.
       */
      public get customEndpoint(): shapes.DomainNameFqdn {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpoint',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpoint', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpoint') as unknown as shapes.DomainNameFqdn;
      }
      /**
       * Specify ACM certificate ARN for your custom endpoint.
       */
      public get customEndpointCertificateArn(): shapes.ARN {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn'),
            outputPath: 'DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn', props);
        return request.getResponseField('DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as shapes.ARN;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get domainEndpointOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.DomainEndpointOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptions
     */
    static AdvancedSecurityOptionsResponse = class {
      /**
       * True if advanced security is enabled.
       */
      public get enabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled'),
            outputPath: 'DomainStatus.AdvancedSecurityOptions.Enabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.Enabled', props);
        return request.getResponseField('DomainStatus.AdvancedSecurityOptions.Enabled') as unknown as shapes.Boolean;
      }
      /**
       * True if the internal user database is enabled.
       */
      public get internalUserDatabaseEnabled(): shapes.Boolean {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomain',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
            outputPath: 'DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
        return request.getResponseField('DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as shapes.Boolean;
      }
      /**
       * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptions
       */
      static SAMLOptionsResponse = class {
        /**
         * True if SAML is enabled.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.Idp
         */
        static IdpResponse = class {
          /**
           * The Metadata of the SAML application in xml format.
           */
          public get metadataContent(): shapes.SAMLMetadata {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomain',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent'),
                outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent', props);
            return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent') as unknown as shapes.SAMLMetadata;
          }
          /**
           * The unique Entity ID of the application in SAML Identity Provider.
           */
          public get entityId(): shapes.SAMLEntityId {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomain',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId'),
                outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId', props);
            return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId') as unknown as shapes.SAMLEntityId;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
          }
        }
        public get idp(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.IdpResponse> {
          return new DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse.IdpResponse(this.scope, this.resources, this.input);
        }

        /**
         * The key used for matching the SAML Subject attribute.
         */
        public get subjectKey(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey') as unknown as shapes.String;
        }
        /**
         * The key used for matching the SAML Roles attribute.
         */
        public get rolesKey(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey') as unknown as shapes.String;
        }
        /**
         * The duration, in minutes, after which a user session becomes inactive.
         */
        public get sessionTimeoutMinutes(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomain',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes'),
              outputPath: 'DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes', props);
          return request.getResponseField('DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
        }
      }
      public get samlOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse> {
        return new DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse.SAMLOptionsResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
      }
    }
    public get advancedSecurityOptions(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse> {
      return new DescribeElasticsearchDomainResponse.DomainStatusResponse.AdvancedSecurityOptionsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
    }
  }
  public get domainStatus(): InstanceType<typeof DescribeElasticsearchDomainResponse.DomainStatusResponse> {
    return new DescribeElasticsearchDomainResponse.DomainStatusResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainRequest) {
  }
}

/**
 * Response for DescribeElasticsearchDomainConfig.
 */
export class DescribeElasticsearchDomainConfigResponse {
  /**
   * Response for DescribeElasticsearchDomainConfigResponse.DomainConfig
   */
  static DomainConfigResponse = class {
    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersion
     */
    static ElasticsearchVersionResponse = class {
      /**
       * Specifies the Elasticsearch version for the specified Elasticsearch domain.
       */
      public get options(): shapes.ElasticsearchVersionString {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options'),
            outputPath: 'DomainConfig.ElasticsearchVersion.Options',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options', props);
        return request.getResponseField('DomainConfig.ElasticsearchVersion.Options') as unknown as shapes.ElasticsearchVersionString;
      }
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get elasticsearchVersion(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfig
     */
    static ElasticsearchClusterConfigResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.Options
       */
      static OptionsResponse = class {
        /**
         * The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
         */
        public get instanceType(): shapes.ESPartitionInstanceType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceType') as unknown as shapes.ESPartitionInstanceType;
        }
        /**
         * The number of instances in the specified domain cluster.
         */
        public get instanceCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount') as unknown as shapes.IntegerClass;
        }
        /**
         * A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
         */
        public get dedicatedMasterEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled') as unknown as shapes.Boolean;
        }
        /**
         * A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
         */
        public get zoneAwarenessEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse.ZoneAwarenessConfig
         */
        static ZoneAwarenessConfigResponse = class {
          /**
           * An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
           */
          public get availabilityZoneCount(): shapes.IntegerClass {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount'),
                outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount', props);
            return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as shapes.IntegerClass;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
          }
        }
        public get zoneAwarenessConfig(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse.ZoneAwarenessConfigResponse> {
          return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse.ZoneAwarenessConfigResponse(this.scope, this.resources, this.input);
        }

        /**
         * The instance type for a dedicated master node.
         */
        public get dedicatedMasterType(): shapes.ESPartitionInstanceType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType') as unknown as shapes.ESPartitionInstanceType;
        }
        /**
         * Total number of dedicated master nodes, active and on standby, for the cluster.
         */
        public get dedicatedMasterCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount') as unknown as shapes.IntegerClass;
        }
        /**
         * True to enable warm storage.
         */
        public get warmEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled') as unknown as shapes.Boolean;
        }
        /**
         * The instance type for the Elasticsearch cluster's warm nodes.
         */
        public get warmType(): shapes.ESWarmPartitionInstanceType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmType',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmType') as unknown as shapes.ESWarmPartitionInstanceType;
        }
        /**
         * The number of warm nodes in the cluster.
         */
        public get warmCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmCount',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmCount') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get elasticsearchClusterConfig(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptions
     */
    static EBSOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies whether EBS-based storage is enabled.
         */
        public get ebsEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled'),
              outputPath: 'DomainConfig.EBSOptions.Options.EBSEnabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.EBSEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Specifies the volume type for EBS-based storage.
         */
        public get volumeType(): shapes.VolumeType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType'),
              outputPath: 'DomainConfig.EBSOptions.Options.VolumeType',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.VolumeType') as unknown as shapes.VolumeType;
        }
        /**
         * Integer to specify the size of an EBS volume.
         */
        public get volumeSize(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize'),
              outputPath: 'DomainConfig.EBSOptions.Options.VolumeSize',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.VolumeSize') as unknown as shapes.IntegerClass;
        }
        /**
         * Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
         */
        public get iops(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops'),
              outputPath: 'DomainConfig.EBSOptions.Options.Iops',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.Iops') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.EBSOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.EBSOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.EBSOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State'),
              outputPath: 'DomainConfig.EBSOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.EBSOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get ebsOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPolicies
     */
    static AccessPoliciesResponse = class {
      /**
       * The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See  Configuring Access Policiesfor more information.
       */
      public get options(): shapes.PolicyDocument {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options'),
            outputPath: 'DomainConfig.AccessPolicies.Options',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options', props);
        return request.getResponseField('DomainConfig.AccessPolicies.Options') as unknown as shapes.PolicyDocument;
      }
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate'),
              outputPath: 'DomainConfig.AccessPolicies.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate'),
              outputPath: 'DomainConfig.AccessPolicies.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion'),
              outputPath: 'DomainConfig.AccessPolicies.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State'),
              outputPath: 'DomainConfig.AccessPolicies.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion'),
              outputPath: 'DomainConfig.AccessPolicies.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get accessPolicies(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptions
     */
    static SnapshotOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
         */
        public get automatedSnapshotStartHour(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour'),
              outputPath: 'DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get snapshotOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptions
     */
    static VPCOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
         */
        public get vpcId(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId'),
              outputPath: 'DomainConfig.VPCOptions.Options.VPCId',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.VPCId') as unknown as shapes.String;
        }
        /**
         * Specifies the subnets for VPC endpoint.
         */
        public get subnetIds(): shapes.StringList {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds'),
              outputPath: 'DomainConfig.VPCOptions.Options.SubnetIds',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.SubnetIds') as unknown as shapes.StringList;
        }
        /**
         * The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
         */
        public get availabilityZones(): shapes.StringList {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones'),
              outputPath: 'DomainConfig.VPCOptions.Options.AvailabilityZones',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.AvailabilityZones') as unknown as shapes.StringList;
        }
        /**
         * Specifies the security groups for VPC endpoint.
         */
        public get securityGroupIds(): shapes.StringList {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds'),
              outputPath: 'DomainConfig.VPCOptions.Options.SecurityGroupIds',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.SecurityGroupIds') as unknown as shapes.StringList;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.VPCOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.VPCOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.VPCOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State'),
              outputPath: 'DomainConfig.VPCOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.VPCOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get vpcOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptions
     */
    static CognitoOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies the option to enable Cognito for Kibana authentication.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled'),
              outputPath: 'DomainConfig.CognitoOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Specifies the Cognito user pool ID for Kibana authentication.
         */
        public get userPoolId(): shapes.UserPoolId {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId'),
              outputPath: 'DomainConfig.CognitoOptions.Options.UserPoolId',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.UserPoolId') as unknown as shapes.UserPoolId;
        }
        /**
         * Specifies the Cognito identity pool ID for Kibana authentication.
         */
        public get identityPoolId(): shapes.IdentityPoolId {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId'),
              outputPath: 'DomainConfig.CognitoOptions.Options.IdentityPoolId',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.IdentityPoolId') as unknown as shapes.IdentityPoolId;
        }
        /**
         * Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
         */
        public get roleArn(): shapes.RoleArn {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn'),
              outputPath: 'DomainConfig.CognitoOptions.Options.RoleArn',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.RoleArn') as unknown as shapes.RoleArn;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.CognitoOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.CognitoOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.CognitoOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State'),
              outputPath: 'DomainConfig.CognitoOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.CognitoOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get cognitoOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptions
     */
    static EncryptionAtRestOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies the option to enable Encryption At Rest.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Specifies the KMS Key ID for Encryption At Rest options.
         */
        public get kmsKeyId(): shapes.KmsKeyId {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId') as unknown as shapes.KmsKeyId;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get encryptionAtRestOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptions
     */
    static NodeToNodeEncryptionOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specify true to enable node-to-node encryption.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get nodeToNodeEncryptionOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptions
     */
    static AdvancedOptionsResponse = class {
      /**
       * Specifies the status of advanced options for the specified Elasticsearch domain.
       */
      public get options(): shapes.AdvancedOptions {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options'),
            outputPath: 'DomainConfig.AdvancedOptions.Options',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options', props);
        return request.getResponseField('DomainConfig.AdvancedOptions.Options') as unknown as shapes.AdvancedOptions;
      }
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get advancedOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptions
     */
    static LogPublishingOptionsResponse = class {
      /**
       * The log publishing options configured for the Elasticsearch domain.
       */
      public get options(): shapes.LogPublishingOptions {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'describeElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options'),
            outputPath: 'DomainConfig.LogPublishingOptions.Options',
            parameters: {
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options', props);
        return request.getResponseField('DomainConfig.LogPublishingOptions.Options') as unknown as shapes.LogPublishingOptions;
      }
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get logPublishingOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptions
     */
    static DomainEndpointOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
         */
        public get enforceHttps(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS') as unknown as shapes.Boolean;
        }
        /**
         * Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.  It can be one of the following values:  Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher. Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2
         */
        public get tlsSecurityPolicy(): shapes.TLSSecurityPolicy {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy') as unknown as shapes.TLSSecurityPolicy;
        }
        /**
         * Specify if custom endpoint should be enabled for the Elasticsearch domain.
         */
        public get customEndpointEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Specify the fully qualified domain for your custom endpoint.
         */
        public get customEndpoint(): shapes.DomainNameFqdn {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpoint',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpoint') as unknown as shapes.DomainNameFqdn;
        }
        /**
         * Specify ACM certificate ARN for your custom endpoint.
         */
        public get customEndpointCertificateArn(): shapes.ARN {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn') as unknown as shapes.ARN;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get domainEndpointOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptions
     */
    static AdvancedSecurityOptionsResponse = class {
      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * True if advanced security is enabled.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * True if the internal user database is enabled.
         */
        public get internalUserDatabaseEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptions
         */
        static SAMLOptionsResponse = class {
          /**
           * True if SAML is enabled.
           */
          public get enabled(): shapes.Boolean {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled') as unknown as shapes.Boolean;
          }
          /**
           * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse.Idp
           */
          static IdpResponse = class {
            /**
             * The Metadata of the SAML application in xml format.
             */
            public get metadataContent(): shapes.SAMLMetadata {
              const props: cr.AwsCustomResourceProps = {
                onUpdate: {
                  action: 'describeElasticsearchDomainConfig',
                  service: 'ES',
                  physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent'),
                  outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent',
                  parameters: {
                    DomainName: this.input.domainName,
                  },
                },
                policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
              };
              const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent', props);
              return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent') as unknown as shapes.SAMLMetadata;
            }
            /**
             * The unique Entity ID of the application in SAML Identity Provider.
             */
            public get entityId(): shapes.SAMLEntityId {
              const props: cr.AwsCustomResourceProps = {
                onUpdate: {
                  action: 'describeElasticsearchDomainConfig',
                  service: 'ES',
                  physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId'),
                  outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId',
                  parameters: {
                    DomainName: this.input.domainName,
                  },
                },
                policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
              };
              const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId', props);
              return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId') as unknown as shapes.SAMLEntityId;
            }
            constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
            }
          }
          public get idp(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse.IdpResponse> {
            return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse.IdpResponse(this.scope, this.resources, this.input);
          }

          /**
           * The key used for matching the SAML Subject attribute.
           */
          public get subjectKey(): shapes.String {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey') as unknown as shapes.String;
          }
          /**
           * The key used for matching the SAML Roles attribute.
           */
          public get rolesKey(): shapes.String {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey') as unknown as shapes.String;
          }
          /**
           * The duration, in minutes, after which a user session becomes inactive.
           */
          public get sessionTimeoutMinutes(): shapes.IntegerClass {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'describeElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes',
                parameters: {
                  DomainName: this.input.domainName,
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes') as unknown as shapes.IntegerClass;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
          }
        }
        public get samlOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse> {
          return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse(this.scope, this.resources, this.input);
        }

        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'describeElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.StatusResponse> {
        return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
      }
    }
    public get advancedSecurityOptions(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse> {
      return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    }
  }
  public get domainConfig(): InstanceType<typeof DescribeElasticsearchDomainConfigResponse.DomainConfigResponse> {
    return new DescribeElasticsearchDomainConfigResponse.DomainConfigResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
  }
}

/**
 * Response for DescribeElasticsearchDomains.
 */
export class DescribeElasticsearchDomainsResponse {
  /**
   * The status of the domains requested in the DescribeElasticsearchDomains request.
   */
  public get domainStatusList(): shapes.ElasticsearchDomainStatusList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeElasticsearchDomains',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchDomains.DomainStatusList'),
        outputPath: 'DomainStatusList',
        parameters: {
          DomainNames: this.input.domainNames,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchDomains.DomainStatusList', props);
    return request.getResponseField('DomainStatusList') as unknown as shapes.ElasticsearchDomainStatusList;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchDomainsRequest) {
  }
}

/**
 * Response for DescribeElasticsearchInstanceTypeLimits.
 */
export class DescribeElasticsearchInstanceTypeLimitsResponse {
  /**
   * Version of Elasticsearch for which  Limits  are needed.
   */
  public get limitsByRole(): shapes.LimitsByRole {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeElasticsearchInstanceTypeLimits',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeElasticsearchInstanceTypeLimits.LimitsByRole'),
        outputPath: 'LimitsByRole',
        parameters: {
          DomainName: this.input.domainName,
          InstanceType: this.input.instanceType,
          ElasticsearchVersion: this.input.elasticsearchVersion,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeElasticsearchInstanceTypeLimits.LimitsByRole', props);
    return request.getResponseField('LimitsByRole') as unknown as shapes.LimitsByRole;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest) {
  }
}

/**
 * Response for DescribeInboundCrossClusterSearchConnections.
 */
export class DescribeInboundCrossClusterSearchConnectionsResponse {
  /**
   * Consists of list of InboundCrossClusterSearchConnection matching the specified filter criteria.
   */
  public get crossClusterSearchConnections(): shapes.InboundCrossClusterSearchConnections {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeInboundCrossClusterSearchConnections.CrossClusterSearchConnections'),
        outputPath: 'CrossClusterSearchConnections',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeInboundCrossClusterSearchConnections.CrossClusterSearchConnections', props);
    return request.getResponseField('CrossClusterSearchConnections') as unknown as shapes.InboundCrossClusterSearchConnections;
  }
  /**
   * If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
   */
  public get nextToken(): shapes.NextToken {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeInboundCrossClusterSearchConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeInboundCrossClusterSearchConnections.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.NextToken;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest) {
  }
}

/**
 * Response for DescribeOutboundCrossClusterSearchConnections.
 */
export class DescribeOutboundCrossClusterSearchConnectionsResponse {
  /**
   * Consists of list of OutboundCrossClusterSearchConnection matching the specified filter criteria.
   */
  public get crossClusterSearchConnections(): shapes.OutboundCrossClusterSearchConnections {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeOutboundCrossClusterSearchConnections.CrossClusterSearchConnections'),
        outputPath: 'CrossClusterSearchConnections',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeOutboundCrossClusterSearchConnections.CrossClusterSearchConnections', props);
    return request.getResponseField('CrossClusterSearchConnections') as unknown as shapes.OutboundCrossClusterSearchConnections;
  }
  /**
   * If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results.
   */
  public get nextToken(): shapes.NextToken {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeOutboundCrossClusterSearchConnections.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeOutboundCrossClusterSearchConnections.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.NextToken;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest) {
  }
}

/**
 * Response for DescribePackages.
 */
export class DescribePackagesResponse {
  /**
   * List of PackageDetails objects.
   */
  public get packageDetailsList(): shapes.PackageDetailsList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribePackages.PackageDetailsList'),
        outputPath: 'PackageDetailsList',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribePackages.PackageDetailsList', props);
    return request.getResponseField('PackageDetailsList') as unknown as shapes.PackageDetailsList;
  }
  /**
   * List of PackageDetails objects.
   */
  public get nextToken(): shapes.String {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describePackages',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribePackages.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          Filters: this.input.filters,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribePackages.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.String;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribePackagesRequest) {
  }
}

/**
 * Response for DescribeReservedElasticsearchInstanceOfferings.
 */
export class DescribeReservedElasticsearchInstanceOfferingsResponse {
  /**
   * Provides an identifier to allow retrieval of paginated results.
   */
  public get nextToken(): shapes.NextToken {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeReservedElasticsearchInstanceOfferings.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeReservedElasticsearchInstanceOfferings.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.NextToken;
  }
  /**
   * List of reserved Elasticsearch instance offerings
   */
  public get reservedElasticsearchInstanceOfferings(): shapes.ReservedElasticsearchInstanceOfferingList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeReservedElasticsearchInstanceOfferings.ReservedElasticsearchInstanceOfferings'),
        outputPath: 'ReservedElasticsearchInstanceOfferings',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeReservedElasticsearchInstanceOfferings.ReservedElasticsearchInstanceOfferings', props);
    return request.getResponseField('ReservedElasticsearchInstanceOfferings') as unknown as shapes.ReservedElasticsearchInstanceOfferingList;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest) {
  }
}

/**
 * Response for DescribeReservedElasticsearchInstances.
 */
export class DescribeReservedElasticsearchInstancesResponse {
  /**
   * Provides an identifier to allow retrieval of paginated results.
   */
  public get nextToken(): shapes.String {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeReservedElasticsearchInstances.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ReservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeReservedElasticsearchInstances.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.String;
  }
  /**
   * List of reserved Elasticsearch instances.
   */
  public get reservedElasticsearchInstances(): shapes.ReservedElasticsearchInstanceList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('DescribeReservedElasticsearchInstances.ReservedElasticsearchInstances'),
        outputPath: 'ReservedElasticsearchInstances',
        parameters: {
          ReservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'DescribeReservedElasticsearchInstances.ReservedElasticsearchInstances', props);
    return request.getResponseField('ReservedElasticsearchInstances') as unknown as shapes.ReservedElasticsearchInstanceList;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DescribeReservedElasticsearchInstancesRequest) {
  }
}

/**
 * Response for DissociatePackage.
 */
export class DissociatePackageResponse {
  /**
   * Response for DissociatePackageResponse.DomainPackageDetails
   */
  static DomainPackageDetailsResponse = class {
    /**
     * Internal ID of the package.
     */
    public get packageId(): shapes.PackageID {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.PackageID'),
          outputPath: 'DomainPackageDetails.PackageID',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.PackageID', props);
      return request.getResponseField('DomainPackageDetails.PackageID') as unknown as shapes.PackageID;
    }
    /**
     * User specified name of the package.
     */
    public get packageName(): shapes.PackageName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.PackageName'),
          outputPath: 'DomainPackageDetails.PackageName',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.PackageName', props);
      return request.getResponseField('DomainPackageDetails.PackageName') as unknown as shapes.PackageName;
    }
    /**
     * Currently supports only TXT-DICTIONARY.
     */
    public get packageType(): shapes.PackageType {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.PackageType'),
          outputPath: 'DomainPackageDetails.PackageType',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.PackageType', props);
      return request.getResponseField('DomainPackageDetails.PackageType') as unknown as shapes.PackageType;
    }
    /**
     * Timestamp of the most-recent update to the association status.
     */
    public get lastUpdated(): shapes.LastUpdated {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.LastUpdated'),
          outputPath: 'DomainPackageDetails.LastUpdated',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.LastUpdated', props);
      return request.getResponseField('DomainPackageDetails.LastUpdated') as unknown as shapes.LastUpdated;
    }
    /**
     * Name of the domain you've associated a package with.
     */
    public get domainName(): shapes.DomainName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.DomainName'),
          outputPath: 'DomainPackageDetails.DomainName',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.DomainName', props);
      return request.getResponseField('DomainPackageDetails.DomainName') as unknown as shapes.DomainName;
    }
    /**
     * State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
     */
    public get domainPackageStatus(): shapes.DomainPackageStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.DomainPackageStatus'),
          outputPath: 'DomainPackageDetails.DomainPackageStatus',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.DomainPackageStatus', props);
      return request.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as shapes.DomainPackageStatus;
    }
    /**
     * State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
     */
    public get packageVersion(): shapes.PackageVersion {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.PackageVersion'),
          outputPath: 'DomainPackageDetails.PackageVersion',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.PackageVersion', props);
      return request.getResponseField('DomainPackageDetails.PackageVersion') as unknown as shapes.PackageVersion;
    }
    /**
     * The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.
     */
    public get referencePath(): shapes.ReferencePath {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'dissociatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.ReferencePath'),
          outputPath: 'DomainPackageDetails.ReferencePath',
          parameters: {
            PackageID: this.input.packageId,
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.ReferencePath', props);
      return request.getResponseField('DomainPackageDetails.ReferencePath') as unknown as shapes.ReferencePath;
    }
    /**
     * Response for DissociatePackageResponse.DomainPackageDetailsResponse.ErrorDetails
     */
    static ErrorDetailsResponse = class {
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorType(): shapes.ErrorType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'dissociatePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorType'),
            outputPath: 'DomainPackageDetails.ErrorDetails.ErrorType',
            parameters: {
              PackageID: this.input.packageId,
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorType', props);
        return request.getResponseField('DomainPackageDetails.ErrorDetails.ErrorType') as unknown as shapes.ErrorType;
      }
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorMessage(): shapes.ErrorMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'dissociatePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage'),
            outputPath: 'DomainPackageDetails.ErrorDetails.ErrorMessage',
            parameters: {
              PackageID: this.input.packageId,
              DomainName: this.input.domainName,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorMessage', props);
        return request.getResponseField('DomainPackageDetails.ErrorDetails.ErrorMessage') as unknown as shapes.ErrorMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DissociatePackageRequest) {
      }
    }
    public get errorDetails(): InstanceType<typeof DissociatePackageResponse.DomainPackageDetailsResponse.ErrorDetailsResponse> {
      return new DissociatePackageResponse.DomainPackageDetailsResponse.ErrorDetailsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DissociatePackageRequest) {
    }
  }
  public get domainPackageDetails(): InstanceType<typeof DissociatePackageResponse.DomainPackageDetailsResponse> {
    return new DissociatePackageResponse.DomainPackageDetailsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.DissociatePackageRequest) {
  }
}

/**
 * Response for GetCompatibleElasticsearchVersions.
 */
export class GetCompatibleElasticsearchVersionsResponse {
  /**
   * A map of compatible Elasticsearch versions returned as part of the  GetCompatibleElasticsearchVersions  operation.
   */
  public get compatibleElasticsearchVersions(): shapes.CompatibleElasticsearchVersionsList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getCompatibleElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetCompatibleElasticsearchVersions.CompatibleElasticsearchVersions'),
        outputPath: 'CompatibleElasticsearchVersions',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetCompatibleElasticsearchVersions.CompatibleElasticsearchVersions', props);
    return request.getResponseField('CompatibleElasticsearchVersions') as unknown as shapes.CompatibleElasticsearchVersionsList;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.GetCompatibleElasticsearchVersionsRequest) {
  }
}

/**
 * Response for GetPackageVersionHistory.
 */
export class GetPackageVersionHistoryResponse {
  /**
   * Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.
   */
  public get packageId(): shapes.PackageID {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetPackageVersionHistory.PackageID'),
        outputPath: 'PackageID',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetPackageVersionHistory.PackageID', props);
    return request.getResponseField('PackageID') as unknown as shapes.PackageID;
  }
  /**
   * List of PackageVersionHistory objects.
   */
  public get packageVersionHistoryList(): shapes.PackageVersionHistoryList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetPackageVersionHistory.PackageVersionHistoryList'),
        outputPath: 'PackageVersionHistoryList',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetPackageVersionHistory.PackageVersionHistoryList', props);
    return request.getResponseField('PackageVersionHistoryList') as unknown as shapes.PackageVersionHistoryList;
  }
  /**
   * List of PackageVersionHistory objects.
   */
  public get nextToken(): shapes.String {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetPackageVersionHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetPackageVersionHistory.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.String;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.GetPackageVersionHistoryRequest) {
  }
}

/**
 * Response for GetUpgradeHistory.
 */
export class GetUpgradeHistoryResponse {
  /**
   * A list of  UpgradeHistory  objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of  GetUpgradeHistoryResponse  object.
   */
  public get upgradeHistories(): shapes.UpgradeHistoryList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetUpgradeHistory.UpgradeHistories'),
        outputPath: 'UpgradeHistories',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetUpgradeHistory.UpgradeHistories', props);
    return request.getResponseField('UpgradeHistories') as unknown as shapes.UpgradeHistoryList;
  }
  /**
   * Pagination token that needs to be supplied to the next call to get the next page of results
   */
  public get nextToken(): shapes.String {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetUpgradeHistory.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetUpgradeHistory.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.String;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.GetUpgradeHistoryRequest) {
  }
}

/**
 * Response for GetUpgradeStatus.
 */
export class GetUpgradeStatusResponse {
  /**
   * Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through:  PreUpgradeCheck Snapshot Upgrade
   */
  public get upgradeStep(): shapes.UpgradeStep {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetUpgradeStatus.UpgradeStep'),
        outputPath: 'UpgradeStep',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetUpgradeStatus.UpgradeStep', props);
    return request.getResponseField('UpgradeStep') as unknown as shapes.UpgradeStep;
  }
  /**
   * One of 4 statuses that a step can go through returned as part of the  GetUpgradeStatusResponse  object. The status can take one of the following values:  In Progress Succeeded Succeeded with Issues Failed
   */
  public get stepStatus(): shapes.UpgradeStatus {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetUpgradeStatus.StepStatus'),
        outputPath: 'StepStatus',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetUpgradeStatus.StepStatus', props);
    return request.getResponseField('StepStatus') as unknown as shapes.UpgradeStatus;
  }
  /**
   * A string that describes the update briefly
   */
  public get upgradeName(): shapes.UpgradeName {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('GetUpgradeStatus.UpgradeName'),
        outputPath: 'UpgradeName',
        parameters: {
          DomainName: this.input.domainName,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'GetUpgradeStatus.UpgradeName', props);
    return request.getResponseField('UpgradeName') as unknown as shapes.UpgradeName;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.GetUpgradeStatusRequest) {
  }
}

/**
 * Response for ListDomainNames.
 */
export class ListDomainNamesResponse {
  /**
   * List of Elasticsearch domain names.
   */
  public get domainNames(): shapes.DomainInfoList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listDomainNames',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListDomainNames.DomainNames'),
        outputPath: 'DomainNames',
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListDomainNames.DomainNames', props);
    return request.getResponseField('DomainNames') as unknown as shapes.DomainInfoList;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[]) {
  }
}

/**
 * Response for ListDomainsForPackage.
 */
export class ListDomainsForPackageResponse {
  /**
   * List of DomainPackageDetails objects.
   */
  public get domainPackageDetailsList(): shapes.DomainPackageDetailsList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListDomainsForPackage.DomainPackageDetailsList'),
        outputPath: 'DomainPackageDetailsList',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListDomainsForPackage.DomainPackageDetailsList', props);
    return request.getResponseField('DomainPackageDetailsList') as unknown as shapes.DomainPackageDetailsList;
  }
  /**
   * List of DomainPackageDetails objects.
   */
  public get nextToken(): shapes.String {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListDomainsForPackage.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          PackageID: this.input.packageId,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListDomainsForPackage.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.String;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.ListDomainsForPackageRequest) {
  }
}

/**
 * Response for ListElasticsearchInstanceTypes.
 */
export class ListElasticsearchInstanceTypesResponse {
  /**
   * List of instance types supported by Amazon Elasticsearch service for given  ElasticsearchVersion
   */
  public get elasticsearchInstanceTypes(): shapes.ElasticsearchInstanceTypeList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListElasticsearchInstanceTypes.ElasticsearchInstanceTypes'),
        outputPath: 'ElasticsearchInstanceTypes',
        parameters: {
          ElasticsearchVersion: this.input.elasticsearchVersion,
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListElasticsearchInstanceTypes.ElasticsearchInstanceTypes', props);
    return request.getResponseField('ElasticsearchInstanceTypes') as unknown as shapes.ElasticsearchInstanceTypeList;
  }
  /**
   * In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results.
   */
  public get nextToken(): shapes.NextToken {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListElasticsearchInstanceTypes.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          ElasticsearchVersion: this.input.elasticsearchVersion,
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListElasticsearchInstanceTypes.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.NextToken;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.ListElasticsearchInstanceTypesRequest) {
  }
}

/**
 * Response for ListElasticsearchVersions.
 */
export class ListElasticsearchVersionsResponse {
  /**
   * Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored.
   */
  public get elasticsearchVersions(): shapes.ElasticsearchVersionList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListElasticsearchVersions.ElasticsearchVersions'),
        outputPath: 'ElasticsearchVersions',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListElasticsearchVersions.ElasticsearchVersions', props);
    return request.getResponseField('ElasticsearchVersions') as unknown as shapes.ElasticsearchVersionList;
  }
  /**
   * Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored.
   */
  public get nextToken(): shapes.NextToken {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListElasticsearchVersions.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListElasticsearchVersions.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.NextToken;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.ListElasticsearchVersionsRequest) {
  }
}

/**
 * Response for ListPackagesForDomain.
 */
export class ListPackagesForDomainResponse {
  /**
   * List of DomainPackageDetails objects.
   */
  public get domainPackageDetailsList(): shapes.DomainPackageDetailsList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListPackagesForDomain.DomainPackageDetailsList'),
        outputPath: 'DomainPackageDetailsList',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListPackagesForDomain.DomainPackageDetailsList', props);
    return request.getResponseField('DomainPackageDetailsList') as unknown as shapes.DomainPackageDetailsList;
  }
  /**
   * Pagination token that needs to be supplied to the next call to get the next page of results.
   */
  public get nextToken(): shapes.String {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListPackagesForDomain.NextToken'),
        outputPath: 'NextToken',
        parameters: {
          DomainName: this.input.domainName,
          MaxResults: this.input.maxResults,
          NextToken: this.input.nextToken,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListPackagesForDomain.NextToken', props);
    return request.getResponseField('NextToken') as unknown as shapes.String;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.ListPackagesForDomainRequest) {
  }
}

/**
 * Response for ListTags.
 */
export class ListTagsResponse {
  /**
   * List of Tag for the requested Elasticsearch domain.
   */
  public get tagList(): shapes.TagList {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'listTags',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('ListTags.TagList'),
        outputPath: 'TagList',
        parameters: {
          ARN: this.input.arn,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'ListTags.TagList', props);
    return request.getResponseField('TagList') as unknown as shapes.TagList;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.ListTagsRequest) {
  }
}

/**
 * Response for PurchaseReservedElasticsearchInstanceOffering.
 */
export class PurchaseReservedElasticsearchInstanceOfferingResponse {
  /**
   * Details of the reserved Elasticsearch instance which was purchased.
   */
  public get reservedElasticsearchInstanceId(): shapes.GUID {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('PurchaseReservedElasticsearchInstanceOffering.ReservedElasticsearchInstanceId'),
        outputPath: 'ReservedElasticsearchInstanceId',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          ReservationName: this.input.reservationName,
          InstanceCount: this.input.instanceCount,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'PurchaseReservedElasticsearchInstanceOffering.ReservedElasticsearchInstanceId', props);
    return request.getResponseField('ReservedElasticsearchInstanceId') as unknown as shapes.GUID;
  }
  /**
   * The customer-specified identifier used to track this reservation.
   */
  public get reservationName(): shapes.ReservationToken {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('PurchaseReservedElasticsearchInstanceOffering.ReservationName'),
        outputPath: 'ReservationName',
        parameters: {
          ReservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          ReservationName: this.input.reservationName,
          InstanceCount: this.input.instanceCount,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'PurchaseReservedElasticsearchInstanceOffering.ReservationName', props);
    return request.getResponseField('ReservationName') as unknown as shapes.ReservationToken;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest) {
  }
}

/**
 * Response for RejectInboundCrossClusterSearchConnection.
 */
export class RejectInboundCrossClusterSearchConnectionResponse {
  /**
   * Response for RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnection
   */
  static CrossClusterSearchConnectionResponse = class {
    /**
     * Response for RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfo
     */
    static SourceDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get sourceDomainInfo(): InstanceType<typeof RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse> {
      return new RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.SourceDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfo
     */
    static DestinationDomainInfoResponse = class {
      /**
       * Specifies the DomainName.
       */
      public get ownerId(): shapes.OwnerId {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.OwnerId',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.OwnerId', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.OwnerId') as unknown as shapes.OwnerId;
      }
      /**
       * Specifies the DomainName.
       */
      public get domainName(): shapes.DomainName {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.DomainName',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.DomainName', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.DomainName') as unknown as shapes.DomainName;
      }
      /**
       * Specifies the DomainName.
       */
      public get region(): shapes.Region {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region'),
            outputPath: 'CrossClusterSearchConnection.DestinationDomainInfo.Region',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.DestinationDomainInfo.Region', props);
        return request.getResponseField('CrossClusterSearchConnection.DestinationDomainInfo.Region') as unknown as shapes.Region;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get destinationDomainInfo(): InstanceType<typeof RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse> {
      return new RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.DestinationDomainInfoResponse(this.scope, this.resources, this.input);
    }

    /**
     * Specifies the connection id for the inbound cross-cluster search connection.
     */
    public get crossClusterSearchConnectionId(): shapes.CrossClusterSearchConnectionId {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'rejectInboundCrossClusterSearchConnection',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
          outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
          parameters: {
            CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
      return request.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as shapes.CrossClusterSearchConnectionId;
    }
    /**
     * Response for RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatus
     */
    static ConnectionStatusResponse = class {
      /**
       * The state code for inbound connection. This can be one of the following:  PENDING_ACCEPTANCE: Inbound connection is not yet accepted by destination domain owner. APPROVED: Inbound connection is pending acceptance by destination domain owner. REJECTING: Inbound connection rejection is in process. REJECTED: Inbound connection is rejected. DELETING: Inbound connection deletion is in progress. DELETED: Inbound connection is deleted and cannot be used further.
       */
      public get statusCode(): shapes.InboundCrossClusterSearchConnectionStatusCode {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.StatusCode',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.StatusCode') as unknown as shapes.InboundCrossClusterSearchConnectionStatusCode;
      }
      /**
       * Specifies verbose information for the inbound connection status.
       */
      public get message(): shapes.CrossClusterSearchConnectionStatusMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'rejectInboundCrossClusterSearchConnection',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message'),
            outputPath: 'CrossClusterSearchConnection.ConnectionStatus.Message',
            parameters: {
              CrossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.Message', props);
        return request.getResponseField('CrossClusterSearchConnection.ConnectionStatus.Message') as unknown as shapes.CrossClusterSearchConnectionStatusMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
      }
    }
    public get connectionStatus(): InstanceType<typeof RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse> {
      return new RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse.ConnectionStatusResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    }
  }
  public get crossClusterSearchConnection(): InstanceType<typeof RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse> {
    return new RejectInboundCrossClusterSearchConnectionResponse.CrossClusterSearchConnectionResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
  }
}

/**
 * Response for StartElasticsearchServiceSoftwareUpdate.
 */
export class StartElasticsearchServiceSoftwareUpdateResponse {
  /**
   * Response for StartElasticsearchServiceSoftwareUpdateResponse.ServiceSoftwareOptions
   */
  static ServiceSoftwareOptionsResponse = class {
    /**
     * The current service software version that is present on the domain.
     */
    public get currentVersion(): shapes.String {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
          outputPath: 'ServiceSoftwareOptions.CurrentVersion',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
      return request.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as shapes.String;
    }
    /**
     * The new service software version if one is available.
     */
    public get newVersion(): shapes.String {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
          outputPath: 'ServiceSoftwareOptions.NewVersion',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
      return request.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as shapes.String;
    }
    /**
     * True if you are able to update you service software version. False if you are not able to update your service software version.
     */
    public get updateAvailable(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
          outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
      return request.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as shapes.Boolean;
    }
    /**
     * True if you are able to cancel your service software version update. False if you are not able to cancel your service software version.
     */
    public get cancellable(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
          outputPath: 'ServiceSoftwareOptions.Cancellable',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
      return request.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as shapes.Boolean;
    }
    /**
     * The status of your service software update. This field can take the following values: ELIGIBLE, PENDING_UPDATE, IN_PROGRESS, COMPLETED, and NOT_ELIGIBLE.
     */
    public get updateStatus(): shapes.DeploymentStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
          outputPath: 'ServiceSoftwareOptions.UpdateStatus',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
      return request.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as shapes.DeploymentStatus;
    }
    /**
     * The description of the UpdateStatus.
     */
    public get description(): shapes.String {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
          outputPath: 'ServiceSoftwareOptions.Description',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
      return request.getResponseField('ServiceSoftwareOptions.Description') as unknown as shapes.String;
    }
    /**
     * Timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
     */
    public get automatedUpdateDate(): shapes.DeploymentCloseDateTimeStamp {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
          outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
      return request.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as shapes.DeploymentCloseDateTimeStamp;
    }
    /**
     * True if a service software is never automatically updated. False if a service software is automatically updated after AutomatedUpdateDate.
     */
    public get optionalDeployment(): shapes.Boolean {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'startElasticsearchServiceSoftwareUpdate',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
          outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
          parameters: {
            DomainName: this.input.domainName,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
      return request.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as shapes.Boolean;
    }
    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    }
  }
  public get serviceSoftwareOptions(): InstanceType<typeof StartElasticsearchServiceSoftwareUpdateResponse.ServiceSoftwareOptionsResponse> {
    return new StartElasticsearchServiceSoftwareUpdateResponse.ServiceSoftwareOptionsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
  }
}

/**
 * Response for UpdateElasticsearchDomainConfig.
 */
export class UpdateElasticsearchDomainConfigResponse {
  /**
   * Response for UpdateElasticsearchDomainConfigResponse.DomainConfig
   */
  static DomainConfigResponse = class {
    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersion
     */
    static ElasticsearchVersionResponse = class {
      /**
       * Specifies the Elasticsearch version for the specified Elasticsearch domain.
       */
      public get options(): shapes.ElasticsearchVersionString {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options'),
            outputPath: 'DomainConfig.ElasticsearchVersion.Options',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              AdvancedOptions: this.input.advancedOptions,
              AccessPolicies: this.input.accessPolicies,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Options', props);
        return request.getResponseField('DomainConfig.ElasticsearchVersion.Options') as unknown as shapes.ElasticsearchVersionString;
      }
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.State', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion'),
              outputPath: 'DomainConfig.ElasticsearchVersion.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.ElasticsearchVersion.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get elasticsearchVersion(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchVersionResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfig
     */
    static ElasticsearchClusterConfigResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.Options
       */
      static OptionsResponse = class {
        /**
         * The instance type for an Elasticsearch cluster. UltraWarm instance types are not supported for data instances.
         */
        public get instanceType(): shapes.ESPartitionInstanceType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceType',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceType', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceType') as unknown as shapes.ESPartitionInstanceType;
        }
        /**
         * The number of instances in the specified domain cluster.
         */
        public get instanceCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.InstanceCount') as unknown as shapes.IntegerClass;
        }
        /**
         * A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
         */
        public get dedicatedMasterEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterEnabled') as unknown as shapes.Boolean;
        }
        /**
         * A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
         */
        public get zoneAwarenessEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse.ZoneAwarenessConfig
         */
        static ZoneAwarenessConfigResponse = class {
          /**
           * An integer value to indicate the number of availability zones for a domain when zone awareness is enabled. This should be equal to number of subnets if VPC endpoints is enabled
           */
          public get availabilityZoneCount(): shapes.IntegerClass {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'updateElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount'),
                outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  AccessPolicies: this.input.accessPolicies,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount', props);
            return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as shapes.IntegerClass;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
          }
        }
        public get zoneAwarenessConfig(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse.ZoneAwarenessConfigResponse> {
          return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse.ZoneAwarenessConfigResponse(this.scope, this.resources, this.input);
        }

        /**
         * The instance type for a dedicated master node.
         */
        public get dedicatedMasterType(): shapes.ESPartitionInstanceType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterType') as unknown as shapes.ESPartitionInstanceType;
        }
        /**
         * Total number of dedicated master nodes, active and on standby, for the cluster.
         */
        public get dedicatedMasterCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.DedicatedMasterCount') as unknown as shapes.IntegerClass;
        }
        /**
         * True to enable warm storage.
         */
        public get warmEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmEnabled') as unknown as shapes.Boolean;
        }
        /**
         * The instance type for the Elasticsearch cluster's warm nodes.
         */
        public get warmType(): shapes.ESWarmPartitionInstanceType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmType',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmType', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmType') as unknown as shapes.ESWarmPartitionInstanceType;
        }
        /**
         * The number of warm nodes in the cluster.
         */
        public get warmCount(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Options.WarmCount',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Options.WarmCount', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Options.WarmCount') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.State', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion'),
              outputPath: 'DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.ElasticsearchClusterConfig.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get elasticsearchClusterConfig(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.ElasticsearchClusterConfigResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptions
     */
    static EBSOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies whether EBS-based storage is enabled.
         */
        public get ebsEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled'),
              outputPath: 'DomainConfig.EBSOptions.Options.EBSEnabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.EBSEnabled', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.EBSEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Specifies the volume type for EBS-based storage.
         */
        public get volumeType(): shapes.VolumeType {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType'),
              outputPath: 'DomainConfig.EBSOptions.Options.VolumeType',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeType', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.VolumeType') as unknown as shapes.VolumeType;
        }
        /**
         * Integer to specify the size of an EBS volume.
         */
        public get volumeSize(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize'),
              outputPath: 'DomainConfig.EBSOptions.Options.VolumeSize',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.VolumeSize', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.VolumeSize') as unknown as shapes.IntegerClass;
        }
        /**
         * Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
         */
        public get iops(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops'),
              outputPath: 'DomainConfig.EBSOptions.Options.Iops',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Options.Iops', props);
          return request.getResponseField('DomainConfig.EBSOptions.Options.Iops') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.EBSOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.EBSOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.EBSOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State'),
              outputPath: 'DomainConfig.EBSOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.State', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.EBSOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.EBSOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get ebsOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EBSOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPolicies
     */
    static AccessPoliciesResponse = class {
      /**
       * The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See  Configuring Access Policiesfor more information.
       */
      public get options(): shapes.PolicyDocument {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options'),
            outputPath: 'DomainConfig.AccessPolicies.Options',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              AdvancedOptions: this.input.advancedOptions,
              AccessPolicies: this.input.accessPolicies,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Options', props);
        return request.getResponseField('DomainConfig.AccessPolicies.Options') as unknown as shapes.PolicyDocument;
      }
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate'),
              outputPath: 'DomainConfig.AccessPolicies.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate'),
              outputPath: 'DomainConfig.AccessPolicies.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion'),
              outputPath: 'DomainConfig.AccessPolicies.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State'),
              outputPath: 'DomainConfig.AccessPolicies.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.State', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion'),
              outputPath: 'DomainConfig.AccessPolicies.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.AccessPolicies.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get accessPolicies(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AccessPoliciesResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptions
     */
    static SnapshotOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
         */
        public get automatedSnapshotStartHour(): shapes.IntegerClass {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour'),
              outputPath: 'DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Options.AutomatedSnapshotStartHour') as unknown as shapes.IntegerClass;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.State', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.SnapshotOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.SnapshotOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get snapshotOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.SnapshotOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptions
     */
    static VPCOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
         */
        public get vpcId(): shapes.String {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId'),
              outputPath: 'DomainConfig.VPCOptions.Options.VPCId',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.VPCId', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.VPCId') as unknown as shapes.String;
        }
        /**
         * Specifies the subnets for VPC endpoint.
         */
        public get subnetIds(): shapes.StringList {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds'),
              outputPath: 'DomainConfig.VPCOptions.Options.SubnetIds',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SubnetIds', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.SubnetIds') as unknown as shapes.StringList;
        }
        /**
         * The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
         */
        public get availabilityZones(): shapes.StringList {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones'),
              outputPath: 'DomainConfig.VPCOptions.Options.AvailabilityZones',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.AvailabilityZones', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.AvailabilityZones') as unknown as shapes.StringList;
        }
        /**
         * Specifies the security groups for VPC endpoint.
         */
        public get securityGroupIds(): shapes.StringList {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds'),
              outputPath: 'DomainConfig.VPCOptions.Options.SecurityGroupIds',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Options.SecurityGroupIds', props);
          return request.getResponseField('DomainConfig.VPCOptions.Options.SecurityGroupIds') as unknown as shapes.StringList;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.VPCOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.VPCOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.VPCOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State'),
              outputPath: 'DomainConfig.VPCOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.State', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.VPCOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.VPCOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get vpcOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.VPCOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptions
     */
    static CognitoOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies the option to enable Cognito for Kibana authentication.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled'),
              outputPath: 'DomainConfig.CognitoOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Specifies the Cognito user pool ID for Kibana authentication.
         */
        public get userPoolId(): shapes.UserPoolId {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId'),
              outputPath: 'DomainConfig.CognitoOptions.Options.UserPoolId',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.UserPoolId', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.UserPoolId') as unknown as shapes.UserPoolId;
        }
        /**
         * Specifies the Cognito identity pool ID for Kibana authentication.
         */
        public get identityPoolId(): shapes.IdentityPoolId {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId'),
              outputPath: 'DomainConfig.CognitoOptions.Options.IdentityPoolId',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.IdentityPoolId', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.IdentityPoolId') as unknown as shapes.IdentityPoolId;
        }
        /**
         * Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
         */
        public get roleArn(): shapes.RoleArn {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn'),
              outputPath: 'DomainConfig.CognitoOptions.Options.RoleArn',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Options.RoleArn', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Options.RoleArn') as unknown as shapes.RoleArn;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.CognitoOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.CognitoOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.CognitoOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State'),
              outputPath: 'DomainConfig.CognitoOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.State', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.CognitoOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.CognitoOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get cognitoOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.CognitoOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptions
     */
    static EncryptionAtRestOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specifies the option to enable Encryption At Rest.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * Specifies the KMS Key ID for Encryption At Rest options.
         */
        public get kmsKeyId(): shapes.KmsKeyId {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Options.KmsKeyId') as unknown as shapes.KmsKeyId;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.State', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.EncryptionAtRestOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get encryptionAtRestOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.EncryptionAtRestOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptions
     */
    static NodeToNodeEncryptionOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specify true to enable node-to-node encryption.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.State', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get nodeToNodeEncryptionOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.NodeToNodeEncryptionOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptions
     */
    static AdvancedOptionsResponse = class {
      /**
       * Specifies the status of advanced options for the specified Elasticsearch domain.
       */
      public get options(): shapes.AdvancedOptions {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options'),
            outputPath: 'DomainConfig.AdvancedOptions.Options',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              AdvancedOptions: this.input.advancedOptions,
              AccessPolicies: this.input.accessPolicies,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Options', props);
        return request.getResponseField('DomainConfig.AdvancedOptions.Options') as unknown as shapes.AdvancedOptions;
      }
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.State', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.AdvancedOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.AdvancedOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get advancedOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptions
     */
    static LogPublishingOptionsResponse = class {
      /**
       * The log publishing options configured for the Elasticsearch domain.
       */
      public get options(): shapes.LogPublishingOptions {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'updateElasticsearchDomainConfig',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options'),
            outputPath: 'DomainConfig.LogPublishingOptions.Options',
            parameters: {
              DomainName: this.input.domainName,
              ElasticsearchClusterConfig: {
                InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                },
                DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                WarmType: this.input.elasticsearchClusterConfig?.warmType,
                WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
              },
              EBSOptions: {
                EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                VolumeType: this.input.ebsOptions?.volumeType,
                VolumeSize: this.input.ebsOptions?.volumeSize,
                Iops: this.input.ebsOptions?.iops,
              },
              SnapshotOptions: {
                AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
              },
              VPCOptions: {
                SubnetIds: this.input.vpcOptions?.subnetIds,
                SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
              },
              CognitoOptions: {
                Enabled: this.input.cognitoOptions?.enabled,
                UserPoolId: this.input.cognitoOptions?.userPoolId,
                IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                RoleArn: this.input.cognitoOptions?.roleArn,
              },
              AdvancedOptions: this.input.advancedOptions,
              AccessPolicies: this.input.accessPolicies,
              LogPublishingOptions: this.input.logPublishingOptions,
              DomainEndpointOptions: {
                EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
              },
              AdvancedSecurityOptions: {
                Enabled: this.input.advancedSecurityOptions?.enabled,
                InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                MasterUserOptions: {
                  MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                  MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                  MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                },
                SAMLOptions: {
                  Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                  Idp: {
                    MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                    EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                  },
                  MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                  MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                  SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                  RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                  SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                },
              },
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Options', props);
        return request.getResponseField('DomainConfig.LogPublishingOptions.Options') as unknown as shapes.LogPublishingOptions;
      }
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.State', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.LogPublishingOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.LogPublishingOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get logPublishingOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.LogPublishingOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptions
     */
    static DomainEndpointOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * Specify if only HTTPS endpoint should be enabled for the Elasticsearch domain.
         */
        public get enforceHttps(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.EnforceHTTPS') as unknown as shapes.Boolean;
        }
        /**
         * Specify the TLS security policy that needs to be applied to the HTTPS endpoint of Elasticsearch domain.  It can be one of the following values:  Policy-Min-TLS-1-0-2019-07:  TLS security policy which supports TLSv1.0 and higher. Policy-Min-TLS-1-2-2019-07:  TLS security policy which supports only TLSv1.2
         */
        public get tlsSecurityPolicy(): shapes.TLSSecurityPolicy {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.TLSSecurityPolicy') as unknown as shapes.TLSSecurityPolicy;
        }
        /**
         * Specify if custom endpoint should be enabled for the Elasticsearch domain.
         */
        public get customEndpointEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Specify the fully qualified domain for your custom endpoint.
         */
        public get customEndpoint(): shapes.DomainNameFqdn {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpoint',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpoint', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpoint') as unknown as shapes.DomainNameFqdn;
        }
        /**
         * Specify ACM certificate ARN for your custom endpoint.
         */
        public get customEndpointCertificateArn(): shapes.ARN {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Options.CustomEndpointCertificateArn') as unknown as shapes.ARN;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.State', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.DomainEndpointOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.DomainEndpointOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get domainEndpointOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.DomainEndpointOptionsResponse(this.scope, this.resources, this.input);
    }

    /**
     * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptions
     */
    static AdvancedSecurityOptionsResponse = class {
      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.Options
       */
      static OptionsResponse = class {
        /**
         * True if advanced security is enabled.
         */
        public get enabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.Enabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.Enabled', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.Enabled') as unknown as shapes.Boolean;
        }
        /**
         * True if the internal user database is enabled.
         */
        public get internalUserDatabaseEnabled(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.InternalUserDatabaseEnabled') as unknown as shapes.Boolean;
        }
        /**
         * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptions
         */
        static SAMLOptionsResponse = class {
          /**
           * True if SAML is enabled.
           */
          public get enabled(): shapes.Boolean {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'updateElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  AccessPolicies: this.input.accessPolicies,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Enabled') as unknown as shapes.Boolean;
          }
          /**
           * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse.Idp
           */
          static IdpResponse = class {
            /**
             * The Metadata of the SAML application in xml format.
             */
            public get metadataContent(): shapes.SAMLMetadata {
              const props: cr.AwsCustomResourceProps = {
                onUpdate: {
                  action: 'updateElasticsearchDomainConfig',
                  service: 'ES',
                  physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent'),
                  outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent',
                  parameters: {
                    DomainName: this.input.domainName,
                    ElasticsearchClusterConfig: {
                      InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                      InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                      DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                      ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                      ZoneAwarenessConfig: {
                        AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                      },
                      DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                      DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                      WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                      WarmType: this.input.elasticsearchClusterConfig?.warmType,
                      WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                    },
                    EBSOptions: {
                      EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                      VolumeType: this.input.ebsOptions?.volumeType,
                      VolumeSize: this.input.ebsOptions?.volumeSize,
                      Iops: this.input.ebsOptions?.iops,
                    },
                    SnapshotOptions: {
                      AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                    },
                    VPCOptions: {
                      SubnetIds: this.input.vpcOptions?.subnetIds,
                      SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                    },
                    CognitoOptions: {
                      Enabled: this.input.cognitoOptions?.enabled,
                      UserPoolId: this.input.cognitoOptions?.userPoolId,
                      IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                      RoleArn: this.input.cognitoOptions?.roleArn,
                    },
                    AdvancedOptions: this.input.advancedOptions,
                    AccessPolicies: this.input.accessPolicies,
                    LogPublishingOptions: this.input.logPublishingOptions,
                    DomainEndpointOptions: {
                      EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                      TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                      CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                      CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                      CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                    },
                    AdvancedSecurityOptions: {
                      Enabled: this.input.advancedSecurityOptions?.enabled,
                      InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                      MasterUserOptions: {
                        MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                        MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                        MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                      },
                      SAMLOptions: {
                        Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                        Idp: {
                          MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                          EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                        },
                        MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                        MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                        SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                        RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                        SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                      },
                    },
                  },
                },
                policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
              };
              const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent', props);
              return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.MetadataContent') as unknown as shapes.SAMLMetadata;
            }
            /**
             * The unique Entity ID of the application in SAML Identity Provider.
             */
            public get entityId(): shapes.SAMLEntityId {
              const props: cr.AwsCustomResourceProps = {
                onUpdate: {
                  action: 'updateElasticsearchDomainConfig',
                  service: 'ES',
                  physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId'),
                  outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId',
                  parameters: {
                    DomainName: this.input.domainName,
                    ElasticsearchClusterConfig: {
                      InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                      InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                      DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                      ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                      ZoneAwarenessConfig: {
                        AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                      },
                      DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                      DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                      WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                      WarmType: this.input.elasticsearchClusterConfig?.warmType,
                      WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                    },
                    EBSOptions: {
                      EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                      VolumeType: this.input.ebsOptions?.volumeType,
                      VolumeSize: this.input.ebsOptions?.volumeSize,
                      Iops: this.input.ebsOptions?.iops,
                    },
                    SnapshotOptions: {
                      AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                    },
                    VPCOptions: {
                      SubnetIds: this.input.vpcOptions?.subnetIds,
                      SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                    },
                    CognitoOptions: {
                      Enabled: this.input.cognitoOptions?.enabled,
                      UserPoolId: this.input.cognitoOptions?.userPoolId,
                      IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                      RoleArn: this.input.cognitoOptions?.roleArn,
                    },
                    AdvancedOptions: this.input.advancedOptions,
                    AccessPolicies: this.input.accessPolicies,
                    LogPublishingOptions: this.input.logPublishingOptions,
                    DomainEndpointOptions: {
                      EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                      TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                      CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                      CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                      CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                    },
                    AdvancedSecurityOptions: {
                      Enabled: this.input.advancedSecurityOptions?.enabled,
                      InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                      MasterUserOptions: {
                        MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                        MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                        MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                      },
                      SAMLOptions: {
                        Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                        Idp: {
                          MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                          EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                        },
                        MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                        MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                        SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                        RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                        SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                      },
                    },
                  },
                },
                policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
              };
              const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId', props);
              return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.Idp.EntityId') as unknown as shapes.SAMLEntityId;
            }
            constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
            }
          }
          public get idp(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse.IdpResponse> {
            return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse.IdpResponse(this.scope, this.resources, this.input);
          }

          /**
           * The key used for matching the SAML Subject attribute.
           */
          public get subjectKey(): shapes.String {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'updateElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  AccessPolicies: this.input.accessPolicies,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SubjectKey') as unknown as shapes.String;
          }
          /**
           * The key used for matching the SAML Roles attribute.
           */
          public get rolesKey(): shapes.String {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'updateElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  AccessPolicies: this.input.accessPolicies,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.RolesKey') as unknown as shapes.String;
          }
          /**
           * The duration, in minutes, after which a user session becomes inactive.
           */
          public get sessionTimeoutMinutes(): shapes.IntegerClass {
            const props: cr.AwsCustomResourceProps = {
              onUpdate: {
                action: 'updateElasticsearchDomainConfig',
                service: 'ES',
                physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes'),
                outputPath: 'DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes',
                parameters: {
                  DomainName: this.input.domainName,
                  ElasticsearchClusterConfig: {
                    InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                    InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                    DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                    ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                    ZoneAwarenessConfig: {
                      AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                    },
                    DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                    DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                    WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                    WarmType: this.input.elasticsearchClusterConfig?.warmType,
                    WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                  },
                  EBSOptions: {
                    EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                    VolumeType: this.input.ebsOptions?.volumeType,
                    VolumeSize: this.input.ebsOptions?.volumeSize,
                    Iops: this.input.ebsOptions?.iops,
                  },
                  SnapshotOptions: {
                    AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                  },
                  VPCOptions: {
                    SubnetIds: this.input.vpcOptions?.subnetIds,
                    SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                  },
                  CognitoOptions: {
                    Enabled: this.input.cognitoOptions?.enabled,
                    UserPoolId: this.input.cognitoOptions?.userPoolId,
                    IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                    RoleArn: this.input.cognitoOptions?.roleArn,
                  },
                  AdvancedOptions: this.input.advancedOptions,
                  AccessPolicies: this.input.accessPolicies,
                  LogPublishingOptions: this.input.logPublishingOptions,
                  DomainEndpointOptions: {
                    EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                    TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                    CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                    CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                    CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                  },
                  AdvancedSecurityOptions: {
                    Enabled: this.input.advancedSecurityOptions?.enabled,
                    InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                    MasterUserOptions: {
                      MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                      MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                      MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                    },
                    SAMLOptions: {
                      Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                      Idp: {
                        MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                        EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                      },
                      MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                      MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                      SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                      RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                      SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                    },
                  },
                },
              },
              policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
            };
            const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes', props);
            return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Options.SAMLOptions.SessionTimeoutMinutes') as unknown as shapes.IntegerClass;
          }
          constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
          }
        }
        public get samlOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse> {
          return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse.SAMLOptionsResponse(this.scope, this.resources, this.input);
        }

        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get options(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.OptionsResponse(this.scope, this.resources, this.input);
      }

      /**
       * Response for UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.Status
       */
      static StatusResponse = class {
        /**
         * Timestamp which tells the creation date for the entity.
         */
        public get creationDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.CreationDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.CreationDate', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.CreationDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Timestamp which tells the last updated time for the entity.
         */
        public get updateDate(): shapes.UpdateTimestamp {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateDate',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateDate', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateDate') as unknown as shapes.UpdateTimestamp;
        }
        /**
         * Specifies the latest version for the entity.
         */
        public get updateVersion(): shapes.UIntValue {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.UpdateVersion') as unknown as shapes.UIntValue;
        }
        /**
         * Provides the OptionState for the Elasticsearch domain.
         */
        public get state(): shapes.OptionState {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.State',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.State', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.State') as unknown as shapes.OptionState;
        }
        /**
         * Indicates whether the Elasticsearch domain is being deleted.
         */
        public get pendingDeletion(): shapes.Boolean {
          const props: cr.AwsCustomResourceProps = {
            onUpdate: {
              action: 'updateElasticsearchDomainConfig',
              service: 'ES',
              physicalResourceId: cr.PhysicalResourceId.of('UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion'),
              outputPath: 'DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion',
              parameters: {
                DomainName: this.input.domainName,
                ElasticsearchClusterConfig: {
                  InstanceType: this.input.elasticsearchClusterConfig?.instanceType,
                  InstanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
                  DedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
                  ZoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
                  ZoneAwarenessConfig: {
                    AvailabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
                  },
                  DedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
                  DedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
                  WarmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
                  WarmType: this.input.elasticsearchClusterConfig?.warmType,
                  WarmCount: this.input.elasticsearchClusterConfig?.warmCount,
                },
                EBSOptions: {
                  EBSEnabled: this.input.ebsOptions?.ebsEnabled,
                  VolumeType: this.input.ebsOptions?.volumeType,
                  VolumeSize: this.input.ebsOptions?.volumeSize,
                  Iops: this.input.ebsOptions?.iops,
                },
                SnapshotOptions: {
                  AutomatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
                },
                VPCOptions: {
                  SubnetIds: this.input.vpcOptions?.subnetIds,
                  SecurityGroupIds: this.input.vpcOptions?.securityGroupIds,
                },
                CognitoOptions: {
                  Enabled: this.input.cognitoOptions?.enabled,
                  UserPoolId: this.input.cognitoOptions?.userPoolId,
                  IdentityPoolId: this.input.cognitoOptions?.identityPoolId,
                  RoleArn: this.input.cognitoOptions?.roleArn,
                },
                AdvancedOptions: this.input.advancedOptions,
                AccessPolicies: this.input.accessPolicies,
                LogPublishingOptions: this.input.logPublishingOptions,
                DomainEndpointOptions: {
                  EnforceHTTPS: this.input.domainEndpointOptions?.enforceHttps,
                  TLSSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
                  CustomEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
                  CustomEndpoint: this.input.domainEndpointOptions?.customEndpoint,
                  CustomEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
                },
                AdvancedSecurityOptions: {
                  Enabled: this.input.advancedSecurityOptions?.enabled,
                  InternalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
                  MasterUserOptions: {
                    MasterUserARN: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
                    MasterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
                    MasterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
                  },
                  SAMLOptions: {
                    Enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
                    Idp: {
                      MetadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                      EntityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
                    },
                    MasterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
                    MasterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
                    SubjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
                    RolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
                    SessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
                  },
                },
              },
            },
            policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
          };
          const request = new cr.AwsCustomResource(this.scope, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion', props);
          return request.getResponseField('DomainConfig.AdvancedSecurityOptions.Status.PendingDeletion') as unknown as shapes.Boolean;
        }
        constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
        }
      }
      public get status(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.StatusResponse> {
        return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse.StatusResponse(this.scope, this.resources, this.input);
      }

      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
      }
    }
    public get advancedSecurityOptions(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse> {
      return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse.AdvancedSecurityOptionsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    }
  }
  public get domainConfig(): InstanceType<typeof UpdateElasticsearchDomainConfigResponse.DomainConfigResponse> {
    return new UpdateElasticsearchDomainConfigResponse.DomainConfigResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
  }
}

/**
 * Response for UpdatePackage.
 */
export class UpdatePackageResponse {
  /**
   * Response for UpdatePackageResponse.PackageDetails
   */
  static PackageDetailsResponse = class {
    /**
     * Internal ID of the package.
     */
    public get packageId(): shapes.PackageID {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.PackageID'),
          outputPath: 'PackageDetails.PackageID',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.PackageID', props);
      return request.getResponseField('PackageDetails.PackageID') as unknown as shapes.PackageID;
    }
    /**
     * User specified name of the package.
     */
    public get packageName(): shapes.PackageName {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.PackageName'),
          outputPath: 'PackageDetails.PackageName',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.PackageName', props);
      return request.getResponseField('PackageDetails.PackageName') as unknown as shapes.PackageName;
    }
    /**
     * Currently supports only TXT-DICTIONARY.
     */
    public get packageType(): shapes.PackageType {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.PackageType'),
          outputPath: 'PackageDetails.PackageType',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.PackageType', props);
      return request.getResponseField('PackageDetails.PackageType') as unknown as shapes.PackageType;
    }
    /**
     * User-specified description of the package.
     */
    public get packageDescription(): shapes.PackageDescription {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.PackageDescription'),
          outputPath: 'PackageDetails.PackageDescription',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.PackageDescription', props);
      return request.getResponseField('PackageDetails.PackageDescription') as unknown as shapes.PackageDescription;
    }
    /**
     * Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
     */
    public get packageStatus(): shapes.PackageStatus {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.PackageStatus'),
          outputPath: 'PackageDetails.PackageStatus',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.PackageStatus', props);
      return request.getResponseField('PackageDetails.PackageStatus') as unknown as shapes.PackageStatus;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get createdAt(): shapes.CreatedAt {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.CreatedAt'),
          outputPath: 'PackageDetails.CreatedAt',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.CreatedAt', props);
      return request.getResponseField('PackageDetails.CreatedAt') as unknown as shapes.CreatedAt;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get lastUpdatedAt(): shapes.LastUpdated {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.LastUpdatedAt'),
          outputPath: 'PackageDetails.LastUpdatedAt',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.LastUpdatedAt', props);
      return request.getResponseField('PackageDetails.LastUpdatedAt') as unknown as shapes.LastUpdated;
    }
    /**
     * Timestamp which tells creation date of the package.
     */
    public get availablePackageVersion(): shapes.PackageVersion {
      const props: cr.AwsCustomResourceProps = {
        onUpdate: {
          action: 'updatePackage',
          service: 'ES',
          physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.AvailablePackageVersion'),
          outputPath: 'PackageDetails.AvailablePackageVersion',
          parameters: {
            PackageID: this.input.packageId,
            PackageSource: {
              S3BucketName: this.input.packageSource.s3BucketName,
              S3Key: this.input.packageSource.s3Key,
            },
            PackageDescription: this.input.packageDescription,
            CommitMessage: this.input.commitMessage,
          },
        },
        policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      };
      const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.AvailablePackageVersion', props);
      return request.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as shapes.PackageVersion;
    }
    /**
     * Response for UpdatePackageResponse.PackageDetailsResponse.ErrorDetails
     */
    static ErrorDetailsResponse = class {
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorType(): shapes.ErrorType {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'updatePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.ErrorDetails.ErrorType'),
            outputPath: 'PackageDetails.ErrorDetails.ErrorType',
            parameters: {
              PackageID: this.input.packageId,
              PackageSource: {
                S3BucketName: this.input.packageSource.s3BucketName,
                S3Key: this.input.packageSource.s3Key,
              },
              PackageDescription: this.input.packageDescription,
              CommitMessage: this.input.commitMessage,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorType', props);
        return request.getResponseField('PackageDetails.ErrorDetails.ErrorType') as unknown as shapes.ErrorType;
      }
      /**
       * Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
       */
      public get errorMessage(): shapes.ErrorMessage {
        const props: cr.AwsCustomResourceProps = {
          onUpdate: {
            action: 'updatePackage',
            service: 'ES',
            physicalResourceId: cr.PhysicalResourceId.of('UpdatePackage.PackageDetails.ErrorDetails.ErrorMessage'),
            outputPath: 'PackageDetails.ErrorDetails.ErrorMessage',
            parameters: {
              PackageID: this.input.packageId,
              PackageSource: {
                S3BucketName: this.input.packageSource.s3BucketName,
                S3Key: this.input.packageSource.s3Key,
              },
              PackageDescription: this.input.packageDescription,
              CommitMessage: this.input.commitMessage,
            },
          },
          policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
        };
        const request = new cr.AwsCustomResource(this.scope, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorMessage', props);
        return request.getResponseField('PackageDetails.ErrorDetails.ErrorMessage') as unknown as shapes.ErrorMessage;
      }
      constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdatePackageRequest) {
      }
    }
    public get errorDetails(): InstanceType<typeof UpdatePackageResponse.PackageDetailsResponse.ErrorDetailsResponse> {
      return new UpdatePackageResponse.PackageDetailsResponse.ErrorDetailsResponse(this.scope, this.resources, this.input);
    }

    constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdatePackageRequest) {
    }
  }
  public get packageDetails(): InstanceType<typeof UpdatePackageResponse.PackageDetailsResponse> {
    return new UpdatePackageResponse.PackageDetailsResponse(this.scope, this.resources, this.input);
  }

  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpdatePackageRequest) {
  }
}

/**
 * Response for UpgradeElasticsearchDomain.
 */
export class UpgradeElasticsearchDomainResponse {
  /**
   * This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade.
   */
  public get domainName(): shapes.DomainName {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('UpgradeElasticsearchDomain.DomainName'),
        outputPath: 'DomainName',
        parameters: {
          DomainName: this.input.domainName,
          TargetVersion: this.input.targetVersion,
          PerformCheckOnly: this.input.performCheckOnly,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'UpgradeElasticsearchDomain.DomainName', props);
    return request.getResponseField('DomainName') as unknown as shapes.DomainName;
  }
  /**
   * The version of Elasticsearch that you intend to upgrade the domain to.
   */
  public get targetVersion(): shapes.ElasticsearchVersionString {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('UpgradeElasticsearchDomain.TargetVersion'),
        outputPath: 'TargetVersion',
        parameters: {
          DomainName: this.input.domainName,
          TargetVersion: this.input.targetVersion,
          PerformCheckOnly: this.input.performCheckOnly,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'UpgradeElasticsearchDomain.TargetVersion', props);
    return request.getResponseField('TargetVersion') as unknown as shapes.ElasticsearchVersionString;
  }
  /**
   * This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade.
   */
  public get performCheckOnly(): shapes.Boolean {
    const props: cr.AwsCustomResourceProps = {
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'ES',
        physicalResourceId: cr.PhysicalResourceId.of('UpgradeElasticsearchDomain.PerformCheckOnly'),
        outputPath: 'PerformCheckOnly',
        parameters: {
          DomainName: this.input.domainName,
          TargetVersion: this.input.targetVersion,
          PerformCheckOnly: this.input.performCheckOnly,
        },
      },
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
    };
    const request = new cr.AwsCustomResource(this.scope, 'UpgradeElasticsearchDomain.PerformCheckOnly', props);
    return request.getResponseField('PerformCheckOnly') as unknown as shapes.Boolean;
  }
  constructor(public scope: cdk.Construct, public readonly resources: string[], public readonly input: shapes.UpgradeElasticsearchDomainRequest) {
  }
}

